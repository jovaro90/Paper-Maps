{
  "version": 3,
  "sources": ["../../ol/Control.js", "../../ol/control/FullScreen.js", "../../ol/control/MousePosition.js", "../../ol/control/OverviewMap.js", "../../ol/control/ScaleLine.js", "../../ol/control/ZoomSlider.js", "../../ol/control/ZoomToExtent.js"],
  "sourcesContent": ["/**\r\n * @module ol/control\r\n */\r\nexport {default as Attribution} from './control/Attribution.js';\r\nexport {default as Control} from './control/Control.js';\r\nexport {default as FullScreen} from './control/FullScreen.js';\r\nexport {default as MousePosition} from './control/MousePosition.js';\r\nexport {default as OverviewMap} from './control/OverviewMap.js';\r\nexport {default as Rotate} from './control/Rotate.js';\r\nexport {default as ScaleLine} from './control/ScaleLine.js';\r\nexport {default as Zoom} from './control/Zoom.js';\r\nexport {default as ZoomSlider} from './control/ZoomSlider.js';\r\nexport {default as ZoomToExtent} from './control/ZoomToExtent.js';\r\nexport {defaults} from './control/defaults.js';\r\n", "/**\r\n * @module ol/control/FullScreen\r\n */\r\nimport MapProperty from '../MapProperty.js';\r\nimport {CLASS_CONTROL, CLASS_UNSELECTABLE, CLASS_UNSUPPORTED} from '../css.js';\r\nimport {replaceNode} from '../dom.js';\r\nimport EventType from '../events/EventType.js';\r\nimport {listen, unlistenByKey} from '../events.js';\r\nimport Control from './Control.js';\r\n\r\nconst events = ['fullscreenchange', 'webkitfullscreenchange'];\r\n\r\n/**\r\n * @enum {string}\r\n */\r\nconst FullScreenEventType = {\r\n  /**\r\n   * Triggered after the map entered fullscreen.\r\n   * @event FullScreenEventType#enterfullscreen\r\n   * @api\r\n   */\r\n  ENTERFULLSCREEN: 'enterfullscreen',\r\n\r\n  /**\r\n   * Triggered after the map leave fullscreen.\r\n   * @event FullScreenEventType#leavefullscreen\r\n   * @api\r\n   */\r\n  LEAVEFULLSCREEN: 'leavefullscreen',\r\n};\r\n\r\n/***\r\n * @template Return\r\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes|\r\n *     'enterfullscreen'|'leavefullscreen', import(\"../events/Event.js\").default, Return> &\r\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\r\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|\r\n *     'enterfullscreen'|'leavefullscreen'|import(\"../ObjectEventType\").Types, Return>} FullScreenOnSignature\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {string} [className='ol-full-screen'] CSS class name.\r\n * @property {string|Text|HTMLElement} [label='\\u2922'] Text label to use for the button.\r\n * Instead of text, also an element (e.g. a `span` element) can be used.\r\n * @property {string|Text|HTMLElement} [labelActive='\\u00d7'] Text label to use for the\r\n * button when full-screen is active.\r\n * Instead of text, also an element (e.g. a `span` element) can be used.\r\n * @property {string} [activeClassName=className + '-true'] CSS class name for the button\r\n * when full-screen is active.\r\n * @property {string} [inactiveClassName=className + '-false'] CSS class name for the button\r\n * when full-screen is inactive.\r\n * @property {string} [tipLabel='Toggle full-screen'] Text label to use for the button tip.\r\n * @property {boolean} [keys=false] Full keyboard access.\r\n * @property {HTMLElement|string} [target] Specify a target if you want the\r\n * control to be rendered outside of the map's viewport.\r\n * @property {HTMLElement|string} [source] The element to be displayed\r\n * fullscreen. When not provided, the element containing the map viewport will\r\n * be displayed fullscreen.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Provides a button that when clicked fills up the full screen with the map.\r\n * The full screen source element is by default the element containing the map viewport unless\r\n * overridden by providing the `source` option. In which case, the dom\r\n * element introduced using this parameter will be displayed in full screen.\r\n *\r\n * When in full screen mode, a close button is shown to exit full screen mode.\r\n * The [Fullscreen API](https://www.w3.org/TR/fullscreen/) is used to\r\n * toggle the map in full screen mode.\r\n *\r\n * @fires FullScreenEventType#enterfullscreen\r\n * @fires FullScreenEventType#leavefullscreen\r\n * @api\r\n */\r\nclass FullScreen extends Control {\r\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    options = options ? options : {};\r\n\r\n    super({\r\n      element: document.createElement('div'),\r\n      target: options.target,\r\n    });\r\n\r\n    /***\r\n     * @type {FullScreenOnSignature<import(\"../events\").EventsKey>}\r\n     */\r\n    this.on;\r\n\r\n    /***\r\n     * @type {FullScreenOnSignature<import(\"../events\").EventsKey>}\r\n     */\r\n    this.once;\r\n\r\n    /***\r\n     * @type {FullScreenOnSignature<void>}\r\n     */\r\n    this.un;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.keys_ = options.keys !== undefined ? options.keys : false;\r\n\r\n    /**\r\n     * @private\r\n     * @type {HTMLElement|string|undefined}\r\n     */\r\n    this.source_ = options.source;\r\n\r\n    /**\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.isInFullscreen_ = false;\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    this.boundHandleMapTargetChange_ = this.handleMapTargetChange_.bind(this);\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.cssClassName_ =\r\n      options.className !== undefined ? options.className : 'ol-full-screen';\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<import(\"../events.js\").EventsKey>}\r\n     */\r\n    this.documentListeners_ = [];\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<string>}\r\n     */\r\n    this.activeClassName_ =\r\n      options.activeClassName !== undefined\r\n        ? options.activeClassName.split(' ')\r\n        : [this.cssClassName_ + '-true'];\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<string>}\r\n     */\r\n    this.inactiveClassName_ =\r\n      options.inactiveClassName !== undefined\r\n        ? options.inactiveClassName.split(' ')\r\n        : [this.cssClassName_ + '-false'];\r\n\r\n    const label = options.label !== undefined ? options.label : '\\u2922';\r\n\r\n    /**\r\n     * @private\r\n     * @type {Text|HTMLElement}\r\n     */\r\n    this.labelNode_ =\r\n      typeof label === 'string' ? document.createTextNode(label) : label;\r\n\r\n    const labelActive =\r\n      options.labelActive !== undefined ? options.labelActive : '\\u00d7';\r\n\r\n    /**\r\n     * @private\r\n     * @type {Text|HTMLElement}\r\n     */\r\n    this.labelActiveNode_ =\r\n      typeof labelActive === 'string'\r\n        ? document.createTextNode(labelActive)\r\n        : labelActive;\r\n\r\n    const tipLabel = options.tipLabel ? options.tipLabel : 'Toggle full-screen';\r\n\r\n    /**\r\n     * @private\r\n     * @type {HTMLElement}\r\n     */\r\n    this.button_ = document.createElement('button');\r\n    this.button_.title = tipLabel;\r\n    this.button_.setAttribute('type', 'button');\r\n    this.button_.appendChild(this.labelNode_);\r\n    this.button_.addEventListener(\r\n      EventType.CLICK,\r\n      this.handleClick_.bind(this),\r\n      false,\r\n    );\r\n    this.setClassName_(this.button_, this.isInFullscreen_);\r\n\r\n    this.element.className = `${this.cssClassName_} ${CLASS_UNSELECTABLE} ${CLASS_CONTROL}`;\r\n    this.element.appendChild(this.button_);\r\n  }\r\n\r\n  /**\r\n   * @param {MouseEvent} event The event to handle\r\n   * @private\r\n   */\r\n  handleClick_(event) {\r\n    event.preventDefault();\r\n    this.handleFullScreen_();\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  handleFullScreen_() {\r\n    const map = this.getMap();\r\n    if (!map) {\r\n      return;\r\n    }\r\n    const doc = map.getOwnerDocument();\r\n    if (!isFullScreenSupported(doc)) {\r\n      return;\r\n    }\r\n    if (isFullScreen(doc)) {\r\n      exitFullScreen(doc);\r\n    } else {\r\n      let element;\r\n      if (this.source_) {\r\n        element =\r\n          typeof this.source_ === 'string'\r\n            ? doc.getElementById(this.source_)\r\n            : this.source_;\r\n      } else {\r\n        element = map.getTargetElement();\r\n      }\r\n      if (this.keys_) {\r\n        requestFullScreenWithKeys(element);\r\n      } else {\r\n        requestFullScreen(element);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  handleFullScreenChange_() {\r\n    const map = this.getMap();\r\n    if (!map) {\r\n      return;\r\n    }\r\n    const wasInFullscreen = this.isInFullscreen_;\r\n    this.isInFullscreen_ = isFullScreen(map.getOwnerDocument());\r\n    if (wasInFullscreen !== this.isInFullscreen_) {\r\n      this.setClassName_(this.button_, this.isInFullscreen_);\r\n      if (this.isInFullscreen_) {\r\n        replaceNode(this.labelActiveNode_, this.labelNode_);\r\n        this.dispatchEvent(FullScreenEventType.ENTERFULLSCREEN);\r\n      } else {\r\n        replaceNode(this.labelNode_, this.labelActiveNode_);\r\n        this.dispatchEvent(FullScreenEventType.LEAVEFULLSCREEN);\r\n      }\r\n      map.updateSize();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {HTMLElement} element Target element\r\n   * @param {boolean} fullscreen True if fullscreen class name should be active\r\n   * @private\r\n   */\r\n  setClassName_(element, fullscreen) {\r\n    if (fullscreen) {\r\n      element.classList.remove(...this.inactiveClassName_);\r\n      element.classList.add(...this.activeClassName_);\r\n    } else {\r\n      element.classList.remove(...this.activeClassName_);\r\n      element.classList.add(...this.inactiveClassName_);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove the control from its current map and attach it to the new map.\r\n   * Pass `null` to just remove the control from the current map.\r\n   * Subclasses may set up event handlers to get notified about changes to\r\n   * the map here.\r\n   * @param {import(\"../Map.js\").default|null} map Map.\r\n   * @api\r\n   * @override\r\n   */\r\n  setMap(map) {\r\n    const oldMap = this.getMap();\r\n    if (oldMap) {\r\n      oldMap.removeChangeListener(\r\n        MapProperty.TARGET,\r\n        this.boundHandleMapTargetChange_,\r\n      );\r\n    }\r\n\r\n    super.setMap(map);\r\n\r\n    this.handleMapTargetChange_();\r\n    if (map) {\r\n      map.addChangeListener(\r\n        MapProperty.TARGET,\r\n        this.boundHandleMapTargetChange_,\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  handleMapTargetChange_() {\r\n    const listeners = this.documentListeners_;\r\n    for (let i = 0, ii = listeners.length; i < ii; ++i) {\r\n      unlistenByKey(listeners[i]);\r\n    }\r\n    listeners.length = 0;\r\n\r\n    const map = this.getMap();\r\n    if (map) {\r\n      const doc = map.getOwnerDocument();\r\n      if (isFullScreenSupported(doc)) {\r\n        this.element.classList.remove(CLASS_UNSUPPORTED);\r\n      } else {\r\n        this.element.classList.add(CLASS_UNSUPPORTED);\r\n      }\r\n\r\n      for (let i = 0, ii = events.length; i < ii; ++i) {\r\n        listeners.push(\r\n          listen(doc, events[i], this.handleFullScreenChange_, this),\r\n        );\r\n      }\r\n      this.handleFullScreenChange_();\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Document} doc The root document to check.\r\n * @return {boolean} Fullscreen is supported by the current platform.\r\n */\r\nfunction isFullScreenSupported(doc) {\r\n  const body = doc.body;\r\n  return !!(\r\n    body['webkitRequestFullscreen'] ||\r\n    (body.requestFullscreen && doc.fullscreenEnabled)\r\n  );\r\n}\r\n\r\n/**\r\n * @param {Document} doc The root document to check.\r\n * @return {boolean} Element is currently in fullscreen.\r\n */\r\nfunction isFullScreen(doc) {\r\n  return !!(doc['webkitIsFullScreen'] || doc.fullscreenElement);\r\n}\r\n\r\n/**\r\n * Request to fullscreen an element.\r\n * @param {HTMLElement} element Element to request fullscreen\r\n */\r\nfunction requestFullScreen(element) {\r\n  if (element.requestFullscreen) {\r\n    element.requestFullscreen();\r\n  } else if (element['webkitRequestFullscreen']) {\r\n    element['webkitRequestFullscreen']();\r\n  }\r\n}\r\n\r\n/**\r\n * Request to fullscreen an element with keyboard input.\r\n * @param {HTMLElement} element Element to request fullscreen\r\n */\r\nfunction requestFullScreenWithKeys(element) {\r\n  if (element['webkitRequestFullscreen']) {\r\n    element['webkitRequestFullscreen']();\r\n  } else {\r\n    requestFullScreen(element);\r\n  }\r\n}\r\n\r\n/**\r\n * Exit fullscreen.\r\n * @param {Document} doc The document to exit fullscren from\r\n */\r\nfunction exitFullScreen(doc) {\r\n  if (doc.exitFullscreen) {\r\n    doc.exitFullscreen();\r\n  } else if (doc['webkitExitFullscreen']) {\r\n    doc['webkitExitFullscreen']();\r\n  }\r\n}\r\n\r\nexport default FullScreen;\r\n", "/**\r\n * @module ol/control/MousePosition\r\n */\r\n\r\nimport {wrapX} from '../coordinate.js';\r\nimport {listen} from '../events.js';\r\nimport EventType from '../pointer/EventType.js';\r\nimport {\r\n  get as getProjection,\r\n  getTransformFromProjections,\r\n  getUserProjection,\r\n  identityTransform,\r\n} from '../proj.js';\r\nimport Control from './Control.js';\r\n\r\n/**\r\n * @type {string}\r\n */\r\nconst PROJECTION = 'projection';\r\n\r\n/**\r\n * @type {string}\r\n */\r\nconst COORDINATE_FORMAT = 'coordinateFormat';\r\n\r\n/***\r\n * @template Return\r\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\r\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\r\n *     'change:coordinateFormat'|'change:projection', import(\"../Object\").ObjectEvent, Return> &\r\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\r\n *     'change:coordinateFormat'|'change:projection', Return>} MousePositionOnSignature\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {string} [className='ol-mouse-position'] CSS class name.\r\n * @property {import(\"../coordinate.js\").CoordinateFormat} [coordinateFormat] Coordinate format.\r\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\r\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when the\r\n * control should be re-rendered. This is called in a `requestAnimationFrame`\r\n * callback.\r\n * @property {HTMLElement|string} [target] Specify a target if you want the\r\n * control to be rendered outside of the map's viewport.\r\n * @property {string} [placeholder] Markup to show when the mouse position is not\r\n * available (e.g. when the pointer leaves the map viewport).  By default, a non-breaking space is rendered\r\n * initially and the last position is retained when the mouse leaves the viewport.\r\n * When a string is provided (e.g. `'no position'` or `''` for an empty string) it is used as a\r\n * placeholder.\r\n * @property {boolean} [wrapX=true] Wrap the world horizontally on the projection's antimeridian, if it\r\n * is a global projection.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * A control to show the 2D coordinates of the mouse cursor. By default, these\r\n * are in the view projection, but can be in any supported projection.\r\n * By default the control is shown in the top right corner of the map, but this\r\n * can be changed by using the css selector `.ol-mouse-position`.\r\n *\r\n * On touch devices, which usually do not have a mouse cursor, the coordinates\r\n * of the currently touched position are shown.\r\n *\r\n * @api\r\n */\r\nclass MousePosition extends Control {\r\n  /**\r\n   * @param {Options} [options] Mouse position options.\r\n   */\r\n  constructor(options) {\r\n    options = options ? options : {};\r\n\r\n    const element = document.createElement('div');\r\n    element.className =\r\n      options.className !== undefined ? options.className : 'ol-mouse-position';\r\n\r\n    super({\r\n      element: element,\r\n      render: options.render,\r\n      target: options.target,\r\n    });\r\n\r\n    /***\r\n     * @type {MousePositionOnSignature<import(\"../events\").EventsKey>}\r\n     */\r\n    this.on;\r\n\r\n    /***\r\n     * @type {MousePositionOnSignature<import(\"../events\").EventsKey>}\r\n     */\r\n    this.once;\r\n\r\n    /***\r\n     * @type {MousePositionOnSignature<void>}\r\n     */\r\n    this.un;\r\n\r\n    this.addChangeListener(PROJECTION, this.handleProjectionChanged_);\r\n\r\n    if (options.coordinateFormat) {\r\n      this.setCoordinateFormat(options.coordinateFormat);\r\n    }\r\n    if (options.projection) {\r\n      this.setProjection(options.projection);\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.renderOnMouseOut_ = options.placeholder !== undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.placeholder_ = this.renderOnMouseOut_ ? options.placeholder : '&#160;';\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.renderedHTML_ = element.innerHTML;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?import(\"../proj/Projection.js\").default}\r\n     */\r\n    this.mapProjection_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?import(\"../proj.js\").TransformFunction}\r\n     */\r\n    this.transform_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.wrapX_ = options.wrapX === false ? false : true;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  handleProjectionChanged_() {\r\n    this.transform_ = null;\r\n  }\r\n\r\n  /**\r\n   * Return the coordinate format type used to render the current position or\r\n   * undefined.\r\n   * @return {import(\"../coordinate.js\").CoordinateFormat|undefined} The format to render the current\r\n   *     position in.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getCoordinateFormat() {\r\n    return /** @type {import(\"../coordinate.js\").CoordinateFormat|undefined} */ (\r\n      this.get(COORDINATE_FORMAT)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return the projection that is used to report the mouse position.\r\n   * @return {import(\"../proj/Projection.js\").default|undefined} The projection to report mouse\r\n   *     position in.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getProjection() {\r\n    return /** @type {import(\"../proj/Projection.js\").default|undefined} */ (\r\n      this.get(PROJECTION)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {MouseEvent} event Browser event.\r\n   * @protected\r\n   */\r\n  handleMouseMove(event) {\r\n    const map = this.getMap();\r\n    this.updateHTML_(map.getEventPixel(event));\r\n  }\r\n\r\n  /**\r\n   * @param {Event} event Browser event.\r\n   * @protected\r\n   */\r\n  handleMouseOut(event) {\r\n    this.updateHTML_(null);\r\n  }\r\n\r\n  /**\r\n   * Remove the control from its current map and attach it to the new map.\r\n   * Pass `null` to just remove the control from the current map.\r\n   * Subclasses may set up event handlers to get notified about changes to\r\n   * the map here.\r\n   * @param {import(\"../Map.js\").default|null} map Map.\r\n   * @api\r\n   * @override\r\n   */\r\n  setMap(map) {\r\n    super.setMap(map);\r\n    if (map) {\r\n      const viewport = map.getViewport();\r\n      this.listenerKeys.push(\r\n        listen(viewport, EventType.POINTERMOVE, this.handleMouseMove, this),\r\n      );\r\n      if (this.renderOnMouseOut_) {\r\n        this.listenerKeys.push(\r\n          listen(viewport, EventType.POINTEROUT, this.handleMouseOut, this),\r\n        );\r\n      }\r\n      this.updateHTML_(null);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the coordinate format type used to render the current position.\r\n   * @param {import(\"../coordinate.js\").CoordinateFormat} format The format to render the current\r\n   *     position in.\r\n   * @observable\r\n   * @api\r\n   */\r\n  setCoordinateFormat(format) {\r\n    this.set(COORDINATE_FORMAT, format);\r\n  }\r\n\r\n  /**\r\n   * Set the projection that is used to report the mouse position.\r\n   * @param {import(\"../proj.js\").ProjectionLike} projection The projection to report mouse\r\n   *     position in.\r\n   * @observable\r\n   * @api\r\n   */\r\n  setProjection(projection) {\r\n    this.set(PROJECTION, getProjection(projection));\r\n  }\r\n\r\n  /**\r\n   * @param {?import(\"../pixel.js\").Pixel} pixel Pixel.\r\n   * @private\r\n   */\r\n  updateHTML_(pixel) {\r\n    let html = this.placeholder_;\r\n    if (pixel && this.mapProjection_) {\r\n      if (!this.transform_) {\r\n        const projection = this.getProjection();\r\n        if (projection) {\r\n          this.transform_ = getTransformFromProjections(\r\n            this.mapProjection_,\r\n            projection,\r\n          );\r\n        } else {\r\n          this.transform_ = identityTransform;\r\n        }\r\n      }\r\n      const map = this.getMap();\r\n      const coordinate = map.getCoordinateFromPixelInternal(pixel);\r\n      if (coordinate) {\r\n        const userProjection = getUserProjection();\r\n        if (userProjection) {\r\n          this.transform_ = getTransformFromProjections(\r\n            this.mapProjection_,\r\n            userProjection,\r\n          );\r\n        }\r\n        this.transform_(coordinate, coordinate);\r\n        if (this.wrapX_) {\r\n          const projection =\r\n            userProjection || this.getProjection() || this.mapProjection_;\r\n          wrapX(coordinate, projection);\r\n        }\r\n        const coordinateFormat = this.getCoordinateFormat();\r\n        if (coordinateFormat) {\r\n          html = coordinateFormat(coordinate);\r\n        } else {\r\n          html = coordinate.toString();\r\n        }\r\n      }\r\n    }\r\n    if (!this.renderedHTML_ || html !== this.renderedHTML_) {\r\n      this.element.innerHTML = html;\r\n      this.renderedHTML_ = html;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update the projection. Rendering of the coordinates is done in\r\n   * `handleMouseMove` and `handleMouseUp`.\r\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\r\n   * @override\r\n   */\r\n  render(mapEvent) {\r\n    const frameState = mapEvent.frameState;\r\n    if (!frameState) {\r\n      this.mapProjection_ = null;\r\n    } else {\r\n      if (this.mapProjection_ != frameState.viewState.projection) {\r\n        this.mapProjection_ = frameState.viewState.projection;\r\n        this.transform_ = null;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default MousePosition;\r\n", "/**\r\n * @module ol/control/OverviewMap\r\n */\r\nimport Collection from '../Collection.js';\r\nimport Map from '../Map.js';\r\nimport MapEventType from '../MapEventType.js';\r\nimport MapProperty from '../MapProperty.js';\r\nimport ObjectEventType from '../ObjectEventType.js';\r\nimport Overlay from '../Overlay.js';\r\nimport View from '../View.js';\r\nimport ViewProperty from '../ViewProperty.js';\r\nimport {CLASS_COLLAPSED, CLASS_CONTROL, CLASS_UNSELECTABLE} from '../css.js';\r\nimport {replaceNode} from '../dom.js';\r\nimport EventType from '../events/EventType.js';\r\nimport {listen, listenOnce} from '../events.js';\r\nimport {\r\n  containsExtent,\r\n  equals as equalsExtent,\r\n  getBottomRight,\r\n  getTopLeft,\r\n  scaleFromCenter,\r\n} from '../extent.js';\r\nimport {fromExtent as polygonFromExtent} from '../geom/Polygon.js';\r\nimport Control from './Control.js';\r\n\r\n/**\r\n * Maximum width and/or height extent ratio that determines when the overview\r\n * map should be zoomed out.\r\n * @type {number}\r\n */\r\nconst MAX_RATIO = 0.75;\r\n\r\n/**\r\n * Minimum width and/or height extent ratio that determines when the overview\r\n * map should be zoomed in.\r\n * @type {number}\r\n */\r\nconst MIN_RATIO = 0.1;\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {string} [className='ol-overviewmap'] CSS class name.\r\n * @property {boolean} [collapsed=true] Whether the control should start collapsed or not (expanded).\r\n * @property {string|HTMLElement} [collapseLabel='‹'] Text label to use for the\r\n * expanded overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.\r\n * @property {boolean} [collapsible=true] Whether the control can be collapsed or not.\r\n * @property {string|HTMLElement} [label='›'] Text label to use for the collapsed\r\n * overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.\r\n * @property {Array<import(\"../layer/Base.js\").default>|import(\"../Collection.js\").default<import(\"../layer/Base.js\").default>} [layers]\r\n * Layers for the overview map.\r\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when the control\r\n * should be re-rendered. This is called in a `requestAnimationFrame` callback.\r\n * @property {boolean} [rotateWithView=false] Whether the control view should rotate with the main map view.\r\n * @property {HTMLElement|string} [target] Specify a target if you want the control\r\n * to be rendered outside of the map's viewport.\r\n * @property {string} [tipLabel='Overview map'] Text label to use for the button tip.\r\n * @property {View} [view] Custom view for the overview map (should use same projection as main map). If not provided,\r\n * a default view with the same projection as the main map will be used.\r\n */\r\n\r\n/**\r\n * Create a new control with a map acting as an overview map for another\r\n * defined map.\r\n *\r\n * @api\r\n */\r\nclass OverviewMap extends Control {\r\n  /**\r\n   * @param {Options} [options] OverviewMap options.\r\n   */\r\n  constructor(options) {\r\n    options = options ? options : {};\r\n\r\n    super({\r\n      element: document.createElement('div'),\r\n      render: options.render,\r\n      target: options.target,\r\n    });\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    this.boundHandleRotationChanged_ = this.handleRotationChanged_.bind(this);\r\n\r\n    /**\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.collapsed_ =\r\n      options.collapsed !== undefined ? options.collapsed : true;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.collapsible_ =\r\n      options.collapsible !== undefined ? options.collapsible : true;\r\n\r\n    if (!this.collapsible_) {\r\n      this.collapsed_ = false;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.rotateWithView_ =\r\n      options.rotateWithView !== undefined ? options.rotateWithView : false;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../extent.js\").Extent|undefined}\r\n     */\r\n    this.viewExtent_ = undefined;\r\n\r\n    const className =\r\n      options.className !== undefined ? options.className : 'ol-overviewmap';\r\n\r\n    const tipLabel =\r\n      options.tipLabel !== undefined ? options.tipLabel : 'Overview map';\r\n\r\n    const collapseLabel =\r\n      options.collapseLabel !== undefined ? options.collapseLabel : '\\u2039';\r\n\r\n    if (typeof collapseLabel === 'string') {\r\n      /**\r\n       * @private\r\n       * @type {HTMLElement}\r\n       */\r\n      this.collapseLabel_ = document.createElement('span');\r\n      this.collapseLabel_.textContent = collapseLabel;\r\n    } else {\r\n      this.collapseLabel_ = collapseLabel;\r\n    }\r\n\r\n    const label = options.label !== undefined ? options.label : '\\u203A';\r\n\r\n    if (typeof label === 'string') {\r\n      /**\r\n       * @private\r\n       * @type {HTMLElement}\r\n       */\r\n      this.label_ = document.createElement('span');\r\n      this.label_.textContent = label;\r\n    } else {\r\n      this.label_ = label;\r\n    }\r\n\r\n    const activeLabel =\r\n      this.collapsible_ && !this.collapsed_ ? this.collapseLabel_ : this.label_;\r\n    const button = document.createElement('button');\r\n    button.setAttribute('type', 'button');\r\n    button.title = tipLabel;\r\n    button.appendChild(activeLabel);\r\n\r\n    button.addEventListener(\r\n      EventType.CLICK,\r\n      this.handleClick_.bind(this),\r\n      false,\r\n    );\r\n\r\n    /**\r\n     * @type {HTMLElement}\r\n     * @private\r\n     */\r\n    this.ovmapDiv_ = document.createElement('div');\r\n    this.ovmapDiv_.className = 'ol-overviewmap-map';\r\n\r\n    /**\r\n     * Explicitly given view to be used instead of a view derived from the main map.\r\n     * @type {View}\r\n     * @private\r\n     */\r\n    this.view_ = options.view;\r\n\r\n    const ovmap = new Map({\r\n      view: options.view,\r\n      controls: new Collection(),\r\n      interactions: new Collection(),\r\n    });\r\n\r\n    /**\r\n     * @type {Map}\r\n     * @private\r\n     */\r\n    this.ovmap_ = ovmap;\r\n\r\n    if (options.layers) {\r\n      options.layers.forEach(function (layer) {\r\n        ovmap.addLayer(layer);\r\n      });\r\n    }\r\n\r\n    const box = document.createElement('div');\r\n    box.className = 'ol-overviewmap-box';\r\n    box.style.boxSizing = 'border-box';\r\n\r\n    /**\r\n     * @type {import(\"../Overlay.js\").default}\r\n     * @private\r\n     */\r\n    this.boxOverlay_ = new Overlay({\r\n      position: [0, 0],\r\n      positioning: 'center-center',\r\n      element: box,\r\n    });\r\n    this.ovmap_.addOverlay(this.boxOverlay_);\r\n\r\n    const cssClasses =\r\n      className +\r\n      ' ' +\r\n      CLASS_UNSELECTABLE +\r\n      ' ' +\r\n      CLASS_CONTROL +\r\n      (this.collapsed_ && this.collapsible_ ? ' ' + CLASS_COLLAPSED : '') +\r\n      (this.collapsible_ ? '' : ' ol-uncollapsible');\r\n    const element = this.element;\r\n    element.className = cssClasses;\r\n    element.appendChild(this.ovmapDiv_);\r\n    element.appendChild(button);\r\n\r\n    /* Interactive map */\r\n\r\n    const overlay = this.boxOverlay_;\r\n    const overlayBox = this.boxOverlay_.getElement();\r\n\r\n    /* Functions definition */\r\n\r\n    const computeDesiredMousePosition = (mousePosition) => {\r\n      return {\r\n        clientX: mousePosition.clientX,\r\n        clientY: mousePosition.clientY,\r\n      };\r\n    };\r\n\r\n    const move = function (event) {\r\n      const position = /** @type {?} */ (computeDesiredMousePosition(event));\r\n      const coordinates = ovmap.getEventCoordinate(\r\n        /** @type {MouseEvent} */ (position),\r\n      );\r\n\r\n      overlay.setPosition(coordinates);\r\n    };\r\n\r\n    const endMoving = (event) => {\r\n      const coordinates = ovmap.getEventCoordinateInternal(event);\r\n\r\n      const map = this.getMap();\r\n\r\n      map.getView().setCenterInternal(coordinates);\r\n\r\n      const ownerDocument = map.getOwnerDocument();\r\n      ownerDocument.removeEventListener('pointermove', move);\r\n      ownerDocument.removeEventListener('pointerup', endMoving);\r\n    };\r\n\r\n    /* Binding */\r\n\r\n    this.ovmapDiv_.addEventListener('pointerdown', (event) => {\r\n      const ownerDocument = this.getMap().getOwnerDocument();\r\n      if (event.target === overlayBox) {\r\n        ownerDocument.addEventListener('pointermove', move);\r\n      }\r\n      ownerDocument.addEventListener('pointerup', endMoving);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Remove the control from its current map and attach it to the new map.\r\n   * Pass `null` to just remove the control from the current map.\r\n   * Subclasses may set up event handlers to get notified about changes to\r\n   * the map here.\r\n   * @param {import(\"../Map.js\").default|null} map Map.\r\n   * @api\r\n   * @override\r\n   */\r\n  setMap(map) {\r\n    const oldMap = this.getMap();\r\n    if (map === oldMap) {\r\n      return;\r\n    }\r\n    if (oldMap) {\r\n      const oldView = oldMap.getView();\r\n      if (oldView) {\r\n        this.unbindView_(oldView);\r\n      }\r\n      this.ovmap_.setTarget(null);\r\n    }\r\n    super.setMap(map);\r\n\r\n    if (map) {\r\n      this.ovmap_.setTarget(this.ovmapDiv_);\r\n      this.listenerKeys.push(\r\n        listen(\r\n          map,\r\n          ObjectEventType.PROPERTYCHANGE,\r\n          this.handleMapPropertyChange_,\r\n          this,\r\n        ),\r\n      );\r\n\r\n      const view = map.getView();\r\n      if (view) {\r\n        this.bindView_(view);\r\n      }\r\n\r\n      if (!this.ovmap_.isRendered()) {\r\n        this.updateBoxAfterOvmapIsRendered_();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle map property changes.  This only deals with changes to the map's view.\r\n   * @param {import(\"../Object.js\").ObjectEvent} event The propertychange event.\r\n   * @private\r\n   */\r\n  handleMapPropertyChange_(event) {\r\n    if (event.key === MapProperty.VIEW) {\r\n      const oldView = /** @type {import(\"../View.js\").default} */ (\r\n        event.oldValue\r\n      );\r\n      if (oldView) {\r\n        this.unbindView_(oldView);\r\n      }\r\n      const newView = this.getMap().getView();\r\n      this.bindView_(newView);\r\n    } else if (\r\n      !this.ovmap_.isRendered() &&\r\n      (event.key === MapProperty.TARGET || event.key === MapProperty.SIZE)\r\n    ) {\r\n      this.ovmap_.updateSize();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Register listeners for view property changes.\r\n   * @param {import(\"../View.js\").default} view The view.\r\n   * @private\r\n   */\r\n  bindView_(view) {\r\n    if (!this.view_) {\r\n      // Unless an explicit view definition was given, derive default from whatever main map uses.\r\n      const newView = new View({\r\n        projection: view.getProjection(),\r\n      });\r\n      this.ovmap_.setView(newView);\r\n    }\r\n\r\n    view.addChangeListener(\r\n      ViewProperty.ROTATION,\r\n      this.boundHandleRotationChanged_,\r\n    );\r\n    // Sync once with the new view\r\n    this.handleRotationChanged_();\r\n\r\n    if (view.isDef()) {\r\n      this.ovmap_.updateSize();\r\n      this.resetExtent_();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unregister listeners for view property changes.\r\n   * @param {import(\"../View.js\").default} view The view.\r\n   * @private\r\n   */\r\n  unbindView_(view) {\r\n    view.removeChangeListener(\r\n      ViewProperty.ROTATION,\r\n      this.boundHandleRotationChanged_,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Handle rotation changes to the main map.\r\n   * @private\r\n   */\r\n  handleRotationChanged_() {\r\n    if (this.rotateWithView_) {\r\n      this.ovmap_.getView().setRotation(this.getMap().getView().getRotation());\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reset the overview map extent if the box size (width or\r\n   * height) is less than the size of the overview map size times minRatio\r\n   * or is greater than the size of the overview size times maxRatio.\r\n   *\r\n   * If the map extent was not reset, the box size can fits in the defined\r\n   * ratio sizes. This method then checks if is contained inside the overview\r\n   * map current extent. If not, recenter the overview map to the current\r\n   * main map center location.\r\n   * @private\r\n   */\r\n  validateExtent_() {\r\n    const map = this.getMap();\r\n    const ovmap = this.ovmap_;\r\n\r\n    if (!map.isRendered() || !ovmap.isRendered()) {\r\n      return;\r\n    }\r\n\r\n    const mapSize = /** @type {import(\"../size.js\").Size} */ (map.getSize());\r\n\r\n    const view = map.getView();\r\n    const extent = view.calculateExtentInternal(mapSize);\r\n\r\n    if (this.viewExtent_ && equalsExtent(extent, this.viewExtent_)) {\r\n      // repeats of the same extent may indicate constraint conflicts leading to an endless cycle\r\n      return;\r\n    }\r\n    this.viewExtent_ = extent;\r\n\r\n    const ovmapSize = /** @type {import(\"../size.js\").Size} */ (\r\n      ovmap.getSize()\r\n    );\r\n\r\n    const ovview = ovmap.getView();\r\n    const ovextent = ovview.calculateExtentInternal(ovmapSize);\r\n\r\n    const topLeftPixel = ovmap.getPixelFromCoordinateInternal(\r\n      getTopLeft(extent),\r\n    );\r\n    const bottomRightPixel = ovmap.getPixelFromCoordinateInternal(\r\n      getBottomRight(extent),\r\n    );\r\n\r\n    const boxWidth = Math.abs(topLeftPixel[0] - bottomRightPixel[0]);\r\n    const boxHeight = Math.abs(topLeftPixel[1] - bottomRightPixel[1]);\r\n\r\n    const ovmapWidth = ovmapSize[0];\r\n    const ovmapHeight = ovmapSize[1];\r\n\r\n    if (\r\n      boxWidth < ovmapWidth * MIN_RATIO ||\r\n      boxHeight < ovmapHeight * MIN_RATIO ||\r\n      boxWidth > ovmapWidth * MAX_RATIO ||\r\n      boxHeight > ovmapHeight * MAX_RATIO\r\n    ) {\r\n      this.resetExtent_();\r\n    } else if (!containsExtent(ovextent, extent)) {\r\n      this.recenter_();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reset the overview map extent to half calculated min and max ratio times\r\n   * the extent of the main map.\r\n   * @private\r\n   */\r\n  resetExtent_() {\r\n    if (MAX_RATIO === 0 || MIN_RATIO === 0) {\r\n      return;\r\n    }\r\n\r\n    const map = this.getMap();\r\n    const ovmap = this.ovmap_;\r\n\r\n    const mapSize = /** @type {import(\"../size.js\").Size} */ (map.getSize());\r\n\r\n    const view = map.getView();\r\n    const extent = view.calculateExtentInternal(mapSize);\r\n\r\n    const ovview = ovmap.getView();\r\n\r\n    // get how many times the current map overview could hold different\r\n    // box sizes using the min and max ratio, pick the step in the middle used\r\n    // to calculate the extent from the main map to set it to the overview map,\r\n    const steps = Math.log(MAX_RATIO / MIN_RATIO) / Math.LN2;\r\n    const ratio = 1 / (Math.pow(2, steps / 2) * MIN_RATIO);\r\n    scaleFromCenter(extent, ratio);\r\n    ovview.fitInternal(polygonFromExtent(extent));\r\n  }\r\n\r\n  /**\r\n   * Set the center of the overview map to the map center without changing its\r\n   * resolution.\r\n   * @private\r\n   */\r\n  recenter_() {\r\n    const map = this.getMap();\r\n    const ovmap = this.ovmap_;\r\n\r\n    const view = map.getView();\r\n\r\n    const ovview = ovmap.getView();\r\n\r\n    ovview.setCenterInternal(view.getCenterInternal());\r\n  }\r\n\r\n  /**\r\n   * Update the box using the main map extent\r\n   * @private\r\n   */\r\n  updateBox_() {\r\n    const map = this.getMap();\r\n    const ovmap = this.ovmap_;\r\n\r\n    if (!map.isRendered() || !ovmap.isRendered()) {\r\n      return;\r\n    }\r\n\r\n    const mapSize = /** @type {import(\"../size.js\").Size} */ (map.getSize());\r\n\r\n    const view = map.getView();\r\n\r\n    const ovview = ovmap.getView();\r\n\r\n    const rotation = this.rotateWithView_ ? 0 : -view.getRotation();\r\n\r\n    const overlay = this.boxOverlay_;\r\n    const box = this.boxOverlay_.getElement();\r\n    const center = view.getCenter();\r\n    const resolution = view.getResolution();\r\n    const ovresolution = ovview.getResolution();\r\n    const width = (mapSize[0] * resolution) / ovresolution;\r\n    const height = (mapSize[1] * resolution) / ovresolution;\r\n\r\n    // set position using center coordinates\r\n    overlay.setPosition(center);\r\n\r\n    // set box size calculated from map extent size and overview map resolution\r\n    if (box) {\r\n      box.style.width = width + 'px';\r\n      box.style.height = height + 'px';\r\n      const transform = 'rotate(' + rotation + 'rad)';\r\n      box.style.transform = transform;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  updateBoxAfterOvmapIsRendered_() {\r\n    if (this.ovmapPostrenderKey_) {\r\n      return;\r\n    }\r\n    this.ovmapPostrenderKey_ = listenOnce(\r\n      this.ovmap_,\r\n      MapEventType.POSTRENDER,\r\n      (event) => {\r\n        delete this.ovmapPostrenderKey_;\r\n        this.updateBox_();\r\n      },\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {MouseEvent} event The event to handle\r\n   * @private\r\n   */\r\n  handleClick_(event) {\r\n    event.preventDefault();\r\n    this.handleToggle_();\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  handleToggle_() {\r\n    this.element.classList.toggle(CLASS_COLLAPSED);\r\n    if (this.collapsed_) {\r\n      replaceNode(this.collapseLabel_, this.label_);\r\n    } else {\r\n      replaceNode(this.label_, this.collapseLabel_);\r\n    }\r\n    this.collapsed_ = !this.collapsed_;\r\n\r\n    // manage overview map if it had not been rendered before and control\r\n    // is expanded\r\n    const ovmap = this.ovmap_;\r\n    if (!this.collapsed_) {\r\n      if (ovmap.isRendered()) {\r\n        this.viewExtent_ = undefined;\r\n        ovmap.render();\r\n        return;\r\n      }\r\n      ovmap.updateSize();\r\n      this.resetExtent_();\r\n      this.updateBoxAfterOvmapIsRendered_();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Return `true` if the overview map is collapsible, `false` otherwise.\r\n   * @return {boolean} True if the widget is collapsible.\r\n   * @api\r\n   */\r\n  getCollapsible() {\r\n    return this.collapsible_;\r\n  }\r\n\r\n  /**\r\n   * Set whether the overview map should be collapsible.\r\n   * @param {boolean} collapsible True if the widget is collapsible.\r\n   * @api\r\n   */\r\n  setCollapsible(collapsible) {\r\n    if (this.collapsible_ === collapsible) {\r\n      return;\r\n    }\r\n    this.collapsible_ = collapsible;\r\n    this.element.classList.toggle('ol-uncollapsible');\r\n    if (!collapsible && this.collapsed_) {\r\n      this.handleToggle_();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Collapse or expand the overview map according to the passed parameter. Will\r\n   * not do anything if the overview map isn't collapsible or if the current\r\n   * collapsed state is already the one requested.\r\n   * @param {boolean} collapsed True if the widget is collapsed.\r\n   * @api\r\n   */\r\n  setCollapsed(collapsed) {\r\n    if (!this.collapsible_ || this.collapsed_ === collapsed) {\r\n      return;\r\n    }\r\n    this.handleToggle_();\r\n  }\r\n\r\n  /**\r\n   * Determine if the overview map is collapsed.\r\n   * @return {boolean} The overview map is collapsed.\r\n   * @api\r\n   */\r\n  getCollapsed() {\r\n    return this.collapsed_;\r\n  }\r\n\r\n  /**\r\n   * Return `true` if the overview map view can rotate, `false` otherwise.\r\n   * @return {boolean} True if the control view can rotate.\r\n   * @api\r\n   */\r\n  getRotateWithView() {\r\n    return this.rotateWithView_;\r\n  }\r\n\r\n  /**\r\n   * Set whether the overview map view should rotate with the main map view.\r\n   * @param {boolean} rotateWithView True if the control view should rotate.\r\n   * @api\r\n   */\r\n  setRotateWithView(rotateWithView) {\r\n    if (this.rotateWithView_ === rotateWithView) {\r\n      return;\r\n    }\r\n    this.rotateWithView_ = rotateWithView;\r\n    if (this.getMap().getView().getRotation() !== 0) {\r\n      if (this.rotateWithView_) {\r\n        this.handleRotationChanged_();\r\n      } else {\r\n        this.ovmap_.getView().setRotation(0);\r\n      }\r\n      this.viewExtent_ = undefined;\r\n      this.validateExtent_();\r\n      this.updateBox_();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Return the overview map.\r\n   * @return {import(\"../Map.js\").default} Overview map.\r\n   * @api\r\n   */\r\n  getOverviewMap() {\r\n    return this.ovmap_;\r\n  }\r\n\r\n  /**\r\n   * Update the overview map element.\r\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\r\n   * @override\r\n   */\r\n  render(mapEvent) {\r\n    this.validateExtent_();\r\n    this.updateBox_();\r\n  }\r\n}\r\n\r\nexport default OverviewMap;\r\n", "/**\r\n * @module ol/control/ScaleLine\r\n */\r\nimport {CLASS_UNSELECTABLE} from '../css.js';\r\nimport {METERS_PER_UNIT, getPointResolution} from '../proj.js';\r\nimport Control from './Control.js';\r\n\r\n/**\r\n * @type {string}\r\n */\r\nconst UNITS_PROP = 'units';\r\n\r\n/**\r\n * @typedef {'degrees' | 'imperial' | 'nautical' | 'metric' | 'us'} Units\r\n * Units for the scale line.\r\n */\r\n\r\n/**\r\n * @const\r\n * @type {Array<number>}\r\n */\r\nconst LEADING_DIGITS = [1, 2, 5];\r\n\r\n/**\r\n * @const\r\n * @type {number}\r\n */\r\nconst DEFAULT_DPI = 25.4 / 0.28;\r\n\r\n/***\r\n * @template Return\r\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\r\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\r\n *     'change:units', import(\"../Object\").ObjectEvent, Return> &\r\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types\r\n *     |'change:units', Return>} ScaleLineOnSignature\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {string} [className] CSS class name. The default is `ol-scale-bar` when configured with\r\n * `bar: true`. Otherwise the default is `ol-scale-line`.\r\n * @property {number} [minWidth=64] Minimum width in pixels at the OGC default dpi. The width will be\r\n * adjusted to match the dpi used.\r\n * @property {number} [maxWidth] Maximum width in pixels at the OGC default dpi. The width will be\r\n * adjusted to match the dpi used.\r\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when the control\r\n * should be re-rendered. This is called in a `requestAnimationFrame` callback.\r\n * @property {HTMLElement|string} [target] Specify a target if you want the control\r\n * to be rendered outside of the map's viewport.\r\n * @property {Units} [units='metric'] Units.\r\n * @property {boolean} [bar=false] Render scalebars instead of a line.\r\n * @property {number} [steps=4] Number of steps the scalebar should use. Use even numbers\r\n * for best results. Only applies when `bar` is `true`.\r\n * @property {boolean} [text=false] Render the text scale above of the scalebar. Only applies\r\n * when `bar` is `true`.\r\n * @property {number|undefined} [dpi=undefined] dpi of output device such as printer. Only applies\r\n * when `bar` is `true`. If undefined the OGC default screen pixel size of 0.28mm will be assumed.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * A control displaying rough y-axis distances, calculated for the center of the\r\n * viewport. For conformal projections (e.g. EPSG:3857, the default view\r\n * projection in OpenLayers), the scale is valid for all directions.\r\n * No scale line will be shown when the y-axis distance of a pixel at the\r\n * viewport center cannot be calculated in the view projection.\r\n * By default the scale line will show in the bottom left portion of the map,\r\n * but this can be changed by using the css selector `.ol-scale-line`.\r\n * When specifying `bar` as `true`, a scalebar will be rendered instead\r\n * of a scaleline.\r\n * For cartesian measurements of the scaleline, you need to set the\r\n * `getPointResolution` method of your projection to simply return the input\r\n * value, e.g. `projection.setGetPointResolution(r => r);`\r\n *\r\n * @api\r\n */\r\nclass ScaleLine extends Control {\r\n  /**\r\n   * @param {Options} [options] Scale line options.\r\n   */\r\n  constructor(options) {\r\n    options = options ? options : {};\r\n\r\n    const element = document.createElement('div');\r\n    element.style.pointerEvents = 'none';\r\n\r\n    super({\r\n      element: element,\r\n      render: options.render,\r\n      target: options.target,\r\n    });\r\n\r\n    /***\r\n     * @type {ScaleLineOnSignature<import(\"../events\").EventsKey>}\r\n     */\r\n    this.on;\r\n\r\n    /***\r\n     * @type {ScaleLineOnSignature<import(\"../events\").EventsKey>}\r\n     */\r\n    this.once;\r\n\r\n    /***\r\n     * @type {ScaleLineOnSignature<void>}\r\n     */\r\n    this.un;\r\n\r\n    const className =\r\n      options.className !== undefined\r\n        ? options.className\r\n        : options.bar\r\n          ? 'ol-scale-bar'\r\n          : 'ol-scale-line';\r\n\r\n    /**\r\n     * @private\r\n     * @type {HTMLElement}\r\n     */\r\n    this.innerElement_ = document.createElement('div');\r\n    this.innerElement_.className = className + '-inner';\r\n\r\n    this.element.className = className + ' ' + CLASS_UNSELECTABLE;\r\n    this.element.appendChild(this.innerElement_);\r\n\r\n    /**\r\n     * @private\r\n     * @type {?import(\"../View.js\").State}\r\n     */\r\n    this.viewState_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.minWidth_ = options.minWidth !== undefined ? options.minWidth : 64;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.maxWidth_ = options.maxWidth;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.renderedVisible_ = false;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.renderedWidth_ = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.renderedHTML_ = '';\r\n\r\n    this.addChangeListener(UNITS_PROP, this.handleUnitsChanged_);\r\n\r\n    this.setUnits(options.units || 'metric');\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.scaleBar_ = options.bar || false;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.scaleBarSteps_ = options.steps || 4;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.scaleBarText_ = options.text || false;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.dpi_ = options.dpi || undefined;\r\n  }\r\n\r\n  /**\r\n   * Return the units to use in the scale line.\r\n   * @return {Units} The units\r\n   * to use in the scale line.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getUnits() {\r\n    return this.get(UNITS_PROP);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  handleUnitsChanged_() {\r\n    this.updateElement_();\r\n  }\r\n\r\n  /**\r\n   * Set the units to use in the scale line.\r\n   * @param {Units} units The units to use in the scale line.\r\n   * @observable\r\n   * @api\r\n   */\r\n  setUnits(units) {\r\n    this.set(UNITS_PROP, units);\r\n  }\r\n\r\n  /**\r\n   * Specify the dpi of output device such as printer.\r\n   * @param {number|undefined} dpi The dpi of output device.\r\n   * @api\r\n   */\r\n  setDpi(dpi) {\r\n    this.dpi_ = dpi;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  updateElement_() {\r\n    const viewState = this.viewState_;\r\n\r\n    if (!viewState) {\r\n      if (this.renderedVisible_) {\r\n        this.element.style.display = 'none';\r\n        this.renderedVisible_ = false;\r\n      }\r\n      return;\r\n    }\r\n\r\n    const center = viewState.center;\r\n    const projection = viewState.projection;\r\n    const units = this.getUnits();\r\n    const pointResolutionUnits = units == 'degrees' ? 'degrees' : 'm';\r\n    let pointResolution = getPointResolution(\r\n      projection,\r\n      viewState.resolution,\r\n      center,\r\n      pointResolutionUnits,\r\n    );\r\n\r\n    const minWidth =\r\n      (this.minWidth_ * (this.dpi_ || DEFAULT_DPI)) / DEFAULT_DPI;\r\n\r\n    const maxWidth =\r\n      this.maxWidth_ !== undefined\r\n        ? (this.maxWidth_ * (this.dpi_ || DEFAULT_DPI)) / DEFAULT_DPI\r\n        : undefined;\r\n\r\n    let nominalCount = minWidth * pointResolution;\r\n    let suffix = '';\r\n    if (units == 'degrees') {\r\n      const metersPerDegree = METERS_PER_UNIT.degrees;\r\n      nominalCount *= metersPerDegree;\r\n      if (nominalCount < metersPerDegree / 60) {\r\n        suffix = '\\u2033'; // seconds\r\n        pointResolution *= 3600;\r\n      } else if (nominalCount < metersPerDegree) {\r\n        suffix = '\\u2032'; // minutes\r\n        pointResolution *= 60;\r\n      } else {\r\n        suffix = '\\u00b0'; // degrees\r\n      }\r\n    } else if (units == 'imperial') {\r\n      if (nominalCount < 0.9144) {\r\n        suffix = 'in';\r\n        pointResolution /= 0.0254;\r\n      } else if (nominalCount < 1609.344) {\r\n        suffix = 'ft';\r\n        pointResolution /= 0.3048;\r\n      } else {\r\n        suffix = 'mi';\r\n        pointResolution /= 1609.344;\r\n      }\r\n    } else if (units == 'nautical') {\r\n      pointResolution /= 1852;\r\n      suffix = 'NM';\r\n    } else if (units == 'metric') {\r\n      if (nominalCount < 1e-6) {\r\n        suffix = 'nm';\r\n        pointResolution *= 1e9;\r\n      } else if (nominalCount < 0.001) {\r\n        suffix = 'μm';\r\n        pointResolution *= 1000000;\r\n      } else if (nominalCount < 1) {\r\n        suffix = 'mm';\r\n        pointResolution *= 1000;\r\n      } else if (nominalCount < 1000) {\r\n        suffix = 'm';\r\n      } else {\r\n        suffix = 'km';\r\n        pointResolution /= 1000;\r\n      }\r\n    } else if (units == 'us') {\r\n      if (nominalCount < 0.9144) {\r\n        suffix = 'in';\r\n        pointResolution *= 39.37;\r\n      } else if (nominalCount < 1609.344) {\r\n        suffix = 'ft';\r\n        pointResolution /= 0.30480061;\r\n      } else {\r\n        suffix = 'mi';\r\n        pointResolution /= 1609.3472;\r\n      }\r\n    } else {\r\n      throw new Error('Invalid units');\r\n    }\r\n\r\n    let i = 3 * Math.floor(Math.log(minWidth * pointResolution) / Math.log(10));\r\n    let count, width, decimalCount;\r\n    let previousCount = 0;\r\n    let previousWidth, previousDecimalCount;\r\n    while (true) {\r\n      decimalCount = Math.floor(i / 3);\r\n      const decimal = Math.pow(10, decimalCount);\r\n      count = LEADING_DIGITS[((i % 3) + 3) % 3] * decimal;\r\n      width = Math.round(count / pointResolution);\r\n      if (isNaN(width)) {\r\n        this.element.style.display = 'none';\r\n        this.renderedVisible_ = false;\r\n        return;\r\n      }\r\n      if (maxWidth !== undefined && width >= maxWidth) {\r\n        count = previousCount;\r\n        width = previousWidth;\r\n        decimalCount = previousDecimalCount;\r\n        break;\r\n      } else if (width >= minWidth) {\r\n        break;\r\n      }\r\n      previousCount = count;\r\n      previousWidth = width;\r\n      previousDecimalCount = decimalCount;\r\n      ++i;\r\n    }\r\n    const html = this.scaleBar_\r\n      ? this.createScaleBar(width, count, suffix)\r\n      : count.toFixed(decimalCount < 0 ? -decimalCount : 0) + ' ' + suffix;\r\n\r\n    if (this.renderedHTML_ != html) {\r\n      this.innerElement_.innerHTML = html;\r\n      this.renderedHTML_ = html;\r\n    }\r\n\r\n    if (this.renderedWidth_ != width) {\r\n      this.innerElement_.style.width = width + 'px';\r\n      this.renderedWidth_ = width;\r\n    }\r\n\r\n    if (!this.renderedVisible_) {\r\n      this.element.style.display = '';\r\n      this.renderedVisible_ = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {number} width The current width of the scalebar.\r\n   * @param {number} scale The current scale.\r\n   * @param {string} suffix The suffix to append to the scale text.\r\n   * @return {string} The stringified HTML of the scalebar.\r\n   */\r\n  createScaleBar(width, scale, suffix) {\r\n    const resolutionScale = this.getScaleForResolution();\r\n    const mapScale =\r\n      resolutionScale < 1\r\n        ? Math.round(1 / resolutionScale).toLocaleString() + ' : 1'\r\n        : '1 : ' + Math.round(resolutionScale).toLocaleString();\r\n    const steps = this.scaleBarSteps_;\r\n    const stepWidth = width / steps;\r\n    const scaleSteps = [this.createMarker('absolute')];\r\n    for (let i = 0; i < steps; ++i) {\r\n      const cls =\r\n        i % 2 === 0 ? 'ol-scale-singlebar-odd' : 'ol-scale-singlebar-even';\r\n      scaleSteps.push(\r\n        '<div>' +\r\n          '<div ' +\r\n          `class=\"ol-scale-singlebar ${cls}\" ` +\r\n          `style=\"width: ${stepWidth}px;\"` +\r\n          '>' +\r\n          '</div>' +\r\n          this.createMarker('relative') +\r\n          // render text every second step, except when only 2 steps\r\n          (i % 2 === 0 || steps === 2\r\n            ? this.createStepText(i, width, false, scale, suffix)\r\n            : '') +\r\n          '</div>',\r\n      );\r\n    }\r\n    // render text at the end\r\n    scaleSteps.push(this.createStepText(steps, width, true, scale, suffix));\r\n\r\n    const scaleBarText = this.scaleBarText_\r\n      ? `<div class=\"ol-scale-text\" style=\"width: ${width}px;\">` +\r\n        mapScale +\r\n        '</div>'\r\n      : '';\r\n    return scaleBarText + scaleSteps.join('');\r\n  }\r\n\r\n  /**\r\n   * Creates a marker at given position\r\n   * @param {'absolute'|'relative'} position The position, absolute or relative\r\n   * @return {string} The stringified div containing the marker\r\n   */\r\n  createMarker(position) {\r\n    const top = position === 'absolute' ? 3 : -10;\r\n    return (\r\n      '<div ' +\r\n      'class=\"ol-scale-step-marker\" ' +\r\n      `style=\"position: ${position}; top: ${top}px;\"` +\r\n      '></div>'\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Creates the label for a marker marker at given position\r\n   * @param {number} i The iterator\r\n   * @param {number} width The width the scalebar will currently use\r\n   * @param {boolean} isLast Flag indicating if we add the last step text\r\n   * @param {number} scale The current scale for the whole scalebar\r\n   * @param {string} suffix The suffix for the scale\r\n   * @return {string} The stringified div containing the step text\r\n   */\r\n  createStepText(i, width, isLast, scale, suffix) {\r\n    const length =\r\n      i === 0 ? 0 : Math.round((scale / this.scaleBarSteps_) * i * 100) / 100;\r\n    const lengthString = length + (i === 0 ? '' : ' ' + suffix);\r\n    const margin = i === 0 ? -3 : (width / this.scaleBarSteps_) * -1;\r\n    const minWidth = i === 0 ? 0 : (width / this.scaleBarSteps_) * 2;\r\n    return (\r\n      '<div ' +\r\n      'class=\"ol-scale-step-text\" ' +\r\n      'style=\"' +\r\n      `margin-left: ${margin}px;` +\r\n      `text-align: ${i === 0 ? 'left' : 'center'};` +\r\n      `min-width: ${minWidth}px;` +\r\n      `left: ${isLast ? width + 'px' : 'unset'};` +\r\n      '\">' +\r\n      lengthString +\r\n      '</div>'\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the appropriate scale for the given resolution and units.\r\n   * @return {number} The appropriate scale.\r\n   */\r\n  getScaleForResolution() {\r\n    const resolution = getPointResolution(\r\n      this.viewState_.projection,\r\n      this.viewState_.resolution,\r\n      this.viewState_.center,\r\n      'm',\r\n    );\r\n    const dpi = this.dpi_ || DEFAULT_DPI;\r\n    const inchesPerMeter = 1000 / 25.4;\r\n    return resolution * inchesPerMeter * dpi;\r\n  }\r\n\r\n  /**\r\n   * Update the scale line element.\r\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\r\n   * @override\r\n   */\r\n  render(mapEvent) {\r\n    const frameState = mapEvent.frameState;\r\n    if (!frameState) {\r\n      this.viewState_ = null;\r\n    } else {\r\n      this.viewState_ = frameState.viewState;\r\n    }\r\n    this.updateElement_();\r\n  }\r\n}\r\n\r\nexport default ScaleLine;\r\n", "/**\r\n * @module ol/control/ZoomSlider\r\n */\r\n\r\nimport {CLASS_CONTROL, CLASS_UNSELECTABLE} from '../css.js';\r\nimport {easeOut} from '../easing.js';\r\nimport {stopPropagation} from '../events/Event.js';\r\nimport EventType from '../events/EventType.js';\r\nimport {listen, unlistenByKey} from '../events.js';\r\nimport {clamp} from '../math.js';\r\nimport PointerEventType from '../pointer/EventType.js';\r\nimport Control from './Control.js';\r\n\r\n/**\r\n * The enum for available directions.\r\n *\r\n * @enum {number}\r\n */\r\nconst Direction = {\r\n  VERTICAL: 0,\r\n  HORIZONTAL: 1,\r\n};\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {string} [className='ol-zoomslider'] CSS class name.\r\n * @property {number} [duration=200] Animation duration in milliseconds.\r\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when the control\r\n * should be re-rendered. This is called in a `requestAnimationFrame` callback.\r\n * @property {HTMLElement|string} [target] Specify a target if you want the control to be\r\n * rendered outside of the map's viewport.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * A slider type of control for zooming.\r\n *\r\n * Example:\r\n *\r\n *     map.addControl(new ZoomSlider());\r\n *\r\n * @api\r\n */\r\nclass ZoomSlider extends Control {\r\n  /**\r\n   * @param {Options} [options] Zoom slider options.\r\n   */\r\n  constructor(options) {\r\n    options = options ? options : {};\r\n\r\n    super({\r\n      target: options.target,\r\n      element: document.createElement('div'),\r\n      render: options.render,\r\n    });\r\n\r\n    /**\r\n     * @type {!Array<import(\"../events.js\").EventsKey>}\r\n     * @private\r\n     */\r\n    this.dragListenerKeys_ = [];\r\n\r\n    /**\r\n     * Will hold the current resolution of the view.\r\n     *\r\n     * @type {number|undefined}\r\n     * @private\r\n     */\r\n    this.currentResolution_ = undefined;\r\n\r\n    /**\r\n     * The direction of the slider. Will be determined from actual display of the\r\n     * container and defaults to Direction.VERTICAL.\r\n     *\r\n     * @type {Direction}\r\n     * @private\r\n     */\r\n    this.direction_ = Direction.VERTICAL;\r\n\r\n    /**\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.dragging_;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.heightLimit_ = 0;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.widthLimit_ = 0;\r\n\r\n    /**\r\n     * @type {number|undefined}\r\n     * @private\r\n     */\r\n    this.startX_;\r\n\r\n    /**\r\n     * @type {number|undefined}\r\n     * @private\r\n     */\r\n    this.startY_;\r\n\r\n    /**\r\n     * The calculated thumb size (border box plus margins).  Set when initSlider_\r\n     * is called.\r\n     * @type {import(\"../size.js\").Size}\r\n     * @private\r\n     */\r\n    this.thumbSize_ = null;\r\n\r\n    /**\r\n     * Whether the slider is initialized.\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.sliderInitialized_ = false;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.duration_ = options.duration !== undefined ? options.duration : 200;\r\n\r\n    const className =\r\n      options.className !== undefined ? options.className : 'ol-zoomslider';\r\n    const thumbElement = document.createElement('button');\r\n    thumbElement.setAttribute('type', 'button');\r\n    thumbElement.className = className + '-thumb ' + CLASS_UNSELECTABLE;\r\n    const containerElement = this.element;\r\n    containerElement.className =\r\n      className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;\r\n    containerElement.appendChild(thumbElement);\r\n\r\n    containerElement.addEventListener(\r\n      PointerEventType.POINTERDOWN,\r\n      this.handleDraggerStart_.bind(this),\r\n      false,\r\n    );\r\n    containerElement.addEventListener(\r\n      PointerEventType.POINTERMOVE,\r\n      this.handleDraggerDrag_.bind(this),\r\n      false,\r\n    );\r\n    containerElement.addEventListener(\r\n      PointerEventType.POINTERUP,\r\n      this.handleDraggerEnd_.bind(this),\r\n      false,\r\n    );\r\n\r\n    containerElement.addEventListener(\r\n      EventType.CLICK,\r\n      this.handleContainerClick_.bind(this),\r\n      false,\r\n    );\r\n    thumbElement.addEventListener(EventType.CLICK, stopPropagation, false);\r\n  }\r\n\r\n  /**\r\n   * Remove the control from its current map and attach it to the new map.\r\n   * Pass `null` to just remove the control from the current map.\r\n   * Subclasses may set up event handlers to get notified about changes to\r\n   * the map here.\r\n   * @param {import(\"../Map.js\").default|null} map Map.\r\n   * @api\r\n   * @override\r\n   */\r\n  setMap(map) {\r\n    super.setMap(map);\r\n    if (map) {\r\n      map.render();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initializes the slider element. This will determine and set this controls\r\n   * direction_ and also constrain the dragging of the thumb to always be within\r\n   * the bounds of the container.\r\n   *\r\n   * @return {boolean} Initialization successful\r\n   * @private\r\n   */\r\n  initSlider_() {\r\n    const container = this.element;\r\n    let containerWidth = container.offsetWidth;\r\n    let containerHeight = container.offsetHeight;\r\n    if (containerWidth === 0 && containerHeight === 0) {\r\n      return (this.sliderInitialized_ = false);\r\n    }\r\n\r\n    const containerStyle = getComputedStyle(container);\r\n    containerWidth -=\r\n      parseFloat(containerStyle['paddingRight']) +\r\n      parseFloat(containerStyle['paddingLeft']);\r\n    containerHeight -=\r\n      parseFloat(containerStyle['paddingTop']) +\r\n      parseFloat(containerStyle['paddingBottom']);\r\n    const thumb = /** @type {HTMLElement} */ (container.firstElementChild);\r\n    const thumbStyle = getComputedStyle(thumb);\r\n    const thumbWidth =\r\n      thumb.offsetWidth +\r\n      parseFloat(thumbStyle['marginRight']) +\r\n      parseFloat(thumbStyle['marginLeft']);\r\n    const thumbHeight =\r\n      thumb.offsetHeight +\r\n      parseFloat(thumbStyle['marginTop']) +\r\n      parseFloat(thumbStyle['marginBottom']);\r\n    this.thumbSize_ = [thumbWidth, thumbHeight];\r\n\r\n    if (containerWidth > containerHeight) {\r\n      this.direction_ = Direction.HORIZONTAL;\r\n      this.widthLimit_ = containerWidth - thumbWidth;\r\n    } else {\r\n      this.direction_ = Direction.VERTICAL;\r\n      this.heightLimit_ = containerHeight - thumbHeight;\r\n    }\r\n    return (this.sliderInitialized_ = true);\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} event The browser event to handle.\r\n   * @private\r\n   */\r\n  handleContainerClick_(event) {\r\n    const view = this.getMap().getView();\r\n\r\n    const relativePosition = this.getRelativePosition_(\r\n      event.offsetX - this.thumbSize_[0] / 2,\r\n      event.offsetY - this.thumbSize_[1] / 2,\r\n    );\r\n\r\n    const resolution = this.getResolutionForPosition_(relativePosition);\r\n    const zoom = view.getConstrainedZoom(view.getZoomForResolution(resolution));\r\n\r\n    view.animateInternal({\r\n      zoom: zoom,\r\n      duration: this.duration_,\r\n      easing: easeOut,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Handle dragger start events.\r\n   * @param {PointerEvent} event The drag event.\r\n   * @private\r\n   */\r\n  handleDraggerStart_(event) {\r\n    if (!this.dragging_ && event.target === this.element.firstElementChild) {\r\n      const element = /** @type {HTMLElement} */ (\r\n        this.element.firstElementChild\r\n      );\r\n      this.getMap().getView().beginInteraction();\r\n      this.startX_ = event.clientX - parseFloat(element.style.left);\r\n      this.startY_ = event.clientY - parseFloat(element.style.top);\r\n      this.dragging_ = true;\r\n\r\n      if (this.dragListenerKeys_.length === 0) {\r\n        const drag = this.handleDraggerDrag_;\r\n        const end = this.handleDraggerEnd_;\r\n        const doc = this.getMap().getOwnerDocument();\r\n        this.dragListenerKeys_.push(\r\n          listen(doc, PointerEventType.POINTERMOVE, drag, this),\r\n          listen(doc, PointerEventType.POINTERUP, end, this),\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle dragger drag events.\r\n   *\r\n   * @param {PointerEvent} event The drag event.\r\n   * @private\r\n   */\r\n  handleDraggerDrag_(event) {\r\n    if (this.dragging_) {\r\n      const deltaX = event.clientX - this.startX_;\r\n      const deltaY = event.clientY - this.startY_;\r\n      const relativePosition = this.getRelativePosition_(deltaX, deltaY);\r\n      this.currentResolution_ =\r\n        this.getResolutionForPosition_(relativePosition);\r\n      this.getMap().getView().setResolution(this.currentResolution_);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle dragger end events.\r\n   * @param {PointerEvent} event The drag event.\r\n   * @private\r\n   */\r\n  handleDraggerEnd_(event) {\r\n    if (this.dragging_) {\r\n      const view = this.getMap().getView();\r\n      view.endInteraction();\r\n\r\n      this.dragging_ = false;\r\n      this.startX_ = undefined;\r\n      this.startY_ = undefined;\r\n      this.dragListenerKeys_.forEach(unlistenByKey);\r\n      this.dragListenerKeys_.length = 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Positions the thumb inside its container according to the given resolution.\r\n   *\r\n   * @param {number} res The res.\r\n   * @private\r\n   */\r\n  setThumbPosition_(res) {\r\n    const position = this.getPositionForResolution_(res);\r\n    const thumb = /** @type {HTMLElement} */ (this.element.firstElementChild);\r\n\r\n    if (this.direction_ == Direction.HORIZONTAL) {\r\n      thumb.style.left = this.widthLimit_ * position + 'px';\r\n    } else {\r\n      thumb.style.top = this.heightLimit_ * position + 'px';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculates the relative position of the thumb given x and y offsets.  The\r\n   * relative position scales from 0 to 1.  The x and y offsets are assumed to be\r\n   * in pixel units within the dragger limits.\r\n   *\r\n   * @param {number} x Pixel position relative to the left of the slider.\r\n   * @param {number} y Pixel position relative to the top of the slider.\r\n   * @return {number} The relative position of the thumb.\r\n   * @private\r\n   */\r\n  getRelativePosition_(x, y) {\r\n    let amount;\r\n    if (this.direction_ === Direction.HORIZONTAL) {\r\n      amount = x / this.widthLimit_;\r\n    } else {\r\n      amount = y / this.heightLimit_;\r\n    }\r\n    return clamp(amount, 0, 1);\r\n  }\r\n\r\n  /**\r\n   * Calculates the corresponding resolution of the thumb given its relative\r\n   * position (where 0 is the minimum and 1 is the maximum).\r\n   *\r\n   * @param {number} position The relative position of the thumb.\r\n   * @return {number} The corresponding resolution.\r\n   * @private\r\n   */\r\n  getResolutionForPosition_(position) {\r\n    const fn = this.getMap().getView().getResolutionForValueFunction();\r\n    return fn(1 - position);\r\n  }\r\n\r\n  /**\r\n   * Determines the relative position of the slider for the given resolution.  A\r\n   * relative position of 0 corresponds to the minimum view resolution.  A\r\n   * relative position of 1 corresponds to the maximum view resolution.\r\n   *\r\n   * @param {number} res The resolution.\r\n   * @return {number} The relative position value (between 0 and 1).\r\n   * @private\r\n   */\r\n  getPositionForResolution_(res) {\r\n    const fn = this.getMap().getView().getValueForResolutionFunction();\r\n    return clamp(1 - fn(res), 0, 1);\r\n  }\r\n\r\n  /**\r\n   * Update the zoomslider element.\r\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\r\n   * @override\r\n   */\r\n  render(mapEvent) {\r\n    if (!mapEvent.frameState) {\r\n      return;\r\n    }\r\n    if (!this.sliderInitialized_ && !this.initSlider_()) {\r\n      return;\r\n    }\r\n    const res = mapEvent.frameState.viewState.resolution;\r\n    this.currentResolution_ = res;\r\n    this.setThumbPosition_(res);\r\n  }\r\n}\r\n\r\nexport default ZoomSlider;\r\n", "/**\r\n * @module ol/control/ZoomToExtent\r\n */\r\nimport {CLASS_CONTROL, CLASS_UNSELECTABLE} from '../css.js';\r\nimport EventType from '../events/EventType.js';\r\nimport {fromExtent as polygonFromExtent} from '../geom/Polygon.js';\r\nimport {fromUserExtent} from '../proj.js';\r\nimport Control from './Control.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {string} [className='ol-zoom-extent'] Class name.\r\n * @property {HTMLElement|string} [target] Specify a target if you want the control\r\n * to be rendered outside of the map's viewport.\r\n * @property {string|HTMLElement} [label='E'] Text label to use for the button.\r\n * Instead of text, also an element (e.g. a `span` element) can be used.\r\n * @property {string} [tipLabel='Fit to extent'] Text label to use for the button tip.\r\n * @property {import(\"../extent.js\").Extent} [extent] The extent to zoom to. If undefined the validity\r\n * extent of the view projection is used.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * A button control which, when pressed, changes the map view to a specific\r\n * extent. To style this control use the css selector `.ol-zoom-extent`.\r\n *\r\n * @api\r\n */\r\nclass ZoomToExtent extends Control {\r\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    options = options ? options : {};\r\n\r\n    super({\r\n      element: document.createElement('div'),\r\n      target: options.target,\r\n    });\r\n\r\n    /**\r\n     * @type {?import(\"../extent.js\").Extent|null}\r\n     * @protected\r\n     */\r\n    this.extent = options.extent ? options.extent : null;\r\n\r\n    const className =\r\n      options.className !== undefined ? options.className : 'ol-zoom-extent';\r\n\r\n    const label = options.label !== undefined ? options.label : 'E';\r\n    const tipLabel =\r\n      options.tipLabel !== undefined ? options.tipLabel : 'Fit to extent';\r\n    const button = document.createElement('button');\r\n    button.setAttribute('type', 'button');\r\n    button.title = tipLabel;\r\n    button.appendChild(\r\n      typeof label === 'string' ? document.createTextNode(label) : label,\r\n    );\r\n\r\n    button.addEventListener(\r\n      EventType.CLICK,\r\n      this.handleClick_.bind(this),\r\n      false,\r\n    );\r\n\r\n    const cssClasses =\r\n      className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;\r\n    const element = this.element;\r\n    element.className = cssClasses;\r\n    element.appendChild(button);\r\n  }\r\n\r\n  /**\r\n   * @param {MouseEvent} event The event to handle\r\n   * @private\r\n   */\r\n  handleClick_(event) {\r\n    event.preventDefault();\r\n    this.handleZoomToExtent();\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   */\r\n  handleZoomToExtent() {\r\n    const map = this.getMap();\r\n    const view = map.getView();\r\n    const extent = !this.extent\r\n      ? view.getProjection().getExtent()\r\n      : fromUserExtent(this.extent, view.getProjection());\r\n    view.fitInternal(polygonFromExtent(extent));\r\n  }\r\n}\r\n\r\nexport default ZoomToExtent;\r\n"],
  "mappings": "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",
  "names": ["EventType_default", "EventType_default"]
}
