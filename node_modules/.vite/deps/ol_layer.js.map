{
  "version": 3,
  "sources": ["../../ol/layer.js", "../../ol/layer/Heatmap.js", "../../ol/renderer/webgl/PointsLayer.js", "../../ol/render/webgl/constants.js", "../../ol/render/webgl/utils.js", "../../ol/webgl/Buffer.js", "../../ol/webgl.js", "../../ol/webgl/Helper.js", "../../ol/webgl/ContextEventType.js", "../../ol/webgl/PostProcessingPass.js", "../../ol/webgl/RenderTarget.js", "../../ol/worker/webgl.js", "../../ol/renderer/webgl/Layer.js", "../../ol/renderer/webgl/worldUtil.js", "../../ol/renderer/webgl/TileLayer.js", "../../ol/webgl/BaseTileRepresentation.js", "../../ol/webgl/TileTexture.js", "../../ol/renderer/webgl/TileLayerBase.js", "../../ol/webgl/PaletteTexture.js", "../../ol/expr/gpu.js", "../../ol/style/flat.js", "../../ol/webgl/ShaderBuilder.js", "../../ol/renderer/canvas/VectorImageLayer.js", "../../ol/layer/VectorImage.js", "../../ol/layer/VectorTile.js", "../../ol/renderer/canvas/VectorTileLayer.js", "../../ol/webgl/styleparser.js", "../../ol/layer/WebGLPoints.js", "../../ol/layer/WebGLTile.js", "../../ol/renderer/webgl/VectorLayer.js", "../../ol/render/webgl/MixedGeometryBatch.js", "../../ol/render/webgl/renderinstructions.js", "../../ol/render/webgl/VectorStyleRenderer.js", "../../ol/layer/WebGLVector.js"],
  "sourcesContent": ["/**\r\n * @module ol/layer\r\n */\r\n\r\nexport {default as Graticule} from './layer/Graticule.js';\r\nexport {default as Group} from './layer/Group.js';\r\nexport {default as Heatmap} from './layer/Heatmap.js';\r\nexport {default as Image} from './layer/Image.js';\r\nexport {default as Layer} from './layer/Layer.js';\r\nexport {default as Tile} from './layer/Tile.js';\r\nexport {default as Vector} from './layer/Vector.js';\r\nexport {default as VectorImage} from './layer/VectorImage.js';\r\nexport {default as VectorTile} from './layer/VectorTile.js';\r\nexport {default as WebGLPoints} from './layer/WebGLPoints.js';\r\nexport {default as WebGLTile} from './layer/WebGLTile.js';\r\nexport {default as WebGLVector} from './layer/WebGLVector.js';\r\n", "/**\r\n * @module ol/layer/Heatmap\r\n */\r\nimport {createCanvasContext2D} from '../dom.js';\r\nimport {clamp} from '../math.js';\r\nimport WebGLPointsLayerRenderer from '../renderer/webgl/PointsLayer.js';\r\nimport {ShaderBuilder} from '../webgl/ShaderBuilder.js';\r\nimport BaseVector from './BaseVector.js';\r\n\r\n/**\r\n * @template {import(\"../Feature.js\").FeatureLike} [FeatureType=import(\"../Feature.js\").default]\r\n * @template {import(\"../source/Vector.js\").default<FeatureType>} [VectorSourceType=import(\"../source/Vector.js\").default<FeatureType>]\r\n * @typedef {Object} Options\r\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\r\n * @property {number} [opacity=1] Opacity (0, 1).\r\n * @property {boolean} [visible=true] Visibility.\r\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\r\n * rendered outside of this extent.\r\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\r\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\r\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\r\n * method was used.\r\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\r\n * visible.\r\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\r\n * be visible.\r\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\r\n * visible.\r\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\r\n * be visible.\r\n * @property {Array<string>} [gradient=['#00f', '#0ff', '#0f0', '#ff0', '#f00']] The color gradient\r\n * of the heatmap, specified as an array of CSS color strings.\r\n * @property {number} [radius=8] Radius size in pixels.\r\n * @property {number} [blur=15] Blur size in pixels.\r\n * @property {string|function(import(\"../Feature.js\").default):number} [weight='weight'] The feature\r\n * attribute to use for the weight or a function that returns a weight from a feature. Weight values\r\n * should range from 0 to 1 (and values outside will be clamped to that range).\r\n * @property {VectorSourceType} [source] Point source.\r\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\r\n */\r\n\r\n/**\r\n * @enum {string}\r\n * @private\r\n */\r\nconst Property = {\r\n  BLUR: 'blur',\r\n  GRADIENT: 'gradient',\r\n  RADIUS: 'radius',\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Array<string>}\r\n */\r\nconst DEFAULT_GRADIENT = ['#00f', '#0ff', '#0f0', '#ff0', '#f00'];\r\n\r\n/**\r\n * @classdesc\r\n * Layer for rendering vector data as a heatmap.\r\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\r\n * property on the layer object; for example, setting `title: 'My Title'` in the\r\n * options means that `title` is observable, and has get/set accessors.\r\n *\r\n * @fires import(\"../render/Event.js\").RenderEvent#prerender\r\n * @fires import(\"../render/Event.js\").RenderEvent#postrender\r\n * @template {import(\"../Feature.js\").FeatureLike} [FeatureType=import(\"../Feature.js\").default]\r\n * @template {import(\"../source/Vector.js\").default<FeatureType>} [VectorSourceType=import(\"../source/Vector.js\").default<FeatureType>]\r\n * @extends {BaseVector<FeatureType, VectorSourceType, WebGLPointsLayerRenderer>}\r\n * @api\r\n */\r\nclass Heatmap extends BaseVector {\r\n  /**\r\n   * @param {Options<FeatureType, VectorSourceType>} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    options = options ? options : {};\r\n\r\n    const baseOptions = Object.assign({}, options);\r\n\r\n    delete baseOptions.gradient;\r\n    delete baseOptions.radius;\r\n    delete baseOptions.blur;\r\n    delete baseOptions.weight;\r\n    super(baseOptions);\r\n\r\n    /**\r\n     * @private\r\n     * @type {HTMLCanvasElement}\r\n     */\r\n    this.gradient_ = null;\r\n\r\n    this.addChangeListener(Property.GRADIENT, this.handleGradientChanged_);\r\n\r\n    this.setGradient(options.gradient ? options.gradient : DEFAULT_GRADIENT);\r\n\r\n    this.setBlur(options.blur !== undefined ? options.blur : 15);\r\n\r\n    this.setRadius(options.radius !== undefined ? options.radius : 8);\r\n\r\n    const weight = options.weight ? options.weight : 'weight';\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    this.weightFunction_ =\r\n      typeof weight === 'string'\r\n        ? /**\r\n           * @param {import('../Feature.js').default} feature Feature\r\n           * @return {any} weight\r\n           */\r\n          (feature) => feature.get(weight)\r\n        : weight;\r\n\r\n    // For performance reasons, don't sort the features before rendering.\r\n    // The render order is not relevant for a heatmap representation.\r\n    this.setRenderOrder(null);\r\n  }\r\n\r\n  /**\r\n   * Return the blur size in pixels.\r\n   * @return {number} Blur size in pixels.\r\n   * @api\r\n   * @observable\r\n   */\r\n  getBlur() {\r\n    return /** @type {number} */ (this.get(Property.BLUR));\r\n  }\r\n\r\n  /**\r\n   * Return the gradient colors as array of strings.\r\n   * @return {Array<string>} Colors.\r\n   * @api\r\n   * @observable\r\n   */\r\n  getGradient() {\r\n    return /** @type {Array<string>} */ (this.get(Property.GRADIENT));\r\n  }\r\n\r\n  /**\r\n   * Return the size of the radius in pixels.\r\n   * @return {number} Radius size in pixel.\r\n   * @api\r\n   * @observable\r\n   */\r\n  getRadius() {\r\n    return /** @type {number} */ (this.get(Property.RADIUS));\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  handleGradientChanged_() {\r\n    this.gradient_ = createGradient(this.getGradient());\r\n  }\r\n\r\n  /**\r\n   * Set the blur size in pixels.\r\n   * @param {number} blur Blur size in pixels.\r\n   * @api\r\n   * @observable\r\n   */\r\n  setBlur(blur) {\r\n    this.set(Property.BLUR, blur);\r\n  }\r\n\r\n  /**\r\n   * Set the gradient colors as array of strings.\r\n   * @param {Array<string>} colors Gradient.\r\n   * @api\r\n   * @observable\r\n   */\r\n  setGradient(colors) {\r\n    this.set(Property.GRADIENT, colors);\r\n  }\r\n\r\n  /**\r\n   * Set the size of the radius in pixels.\r\n   * @param {number} radius Radius size in pixel.\r\n   * @api\r\n   * @observable\r\n   */\r\n  setRadius(radius) {\r\n    this.set(Property.RADIUS, radius);\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  createRenderer() {\r\n    const builder = new ShaderBuilder()\r\n      .addAttribute('float a_weight')\r\n      .addVarying('v_weight', 'float', 'a_weight')\r\n      .addUniform('float u_size')\r\n      .addUniform('float u_blurSlope')\r\n      .setSymbolSizeExpression('vec2(u_size)')\r\n      .setSymbolColorExpression(\r\n        'vec4(smoothstep(0., 1., (1. - length(coordsPx * 2. / v_quadSizePx)) * u_blurSlope) * v_weight)',\r\n      );\r\n\r\n    return new WebGLPointsLayerRenderer(this, {\r\n      className: this.getClassName(),\r\n      attributes: [\r\n        {\r\n          name: 'weight',\r\n          callback: (feature) => {\r\n            const weight = this.weightFunction_(feature);\r\n            return weight !== undefined ? clamp(weight, 0, 1) : 1;\r\n          },\r\n        },\r\n      ],\r\n      uniforms: {\r\n        u_size: () => {\r\n          return (this.get(Property.RADIUS) + this.get(Property.BLUR)) * 2;\r\n        },\r\n        u_blurSlope: () => {\r\n          return (\r\n            this.get(Property.RADIUS) / Math.max(1, this.get(Property.BLUR))\r\n          );\r\n        },\r\n      },\r\n      hitDetectionEnabled: true,\r\n      vertexShader: builder.getSymbolVertexShader(),\r\n      fragmentShader: builder.getSymbolFragmentShader(),\r\n      postProcesses: [\r\n        {\r\n          fragmentShader: `\r\n            precision mediump float;\r\n\r\n            uniform sampler2D u_image;\r\n            uniform sampler2D u_gradientTexture;\r\n            uniform float u_opacity;\r\n\r\n            varying vec2 v_texCoord;\r\n\r\n            void main() {\r\n              vec4 color = texture2D(u_image, v_texCoord);\r\n              gl_FragColor.a = color.a * u_opacity;\r\n              gl_FragColor.rgb = texture2D(u_gradientTexture, vec2(0.5, color.a)).rgb;\r\n              gl_FragColor.rgb *= gl_FragColor.a;\r\n            }`,\r\n          uniforms: {\r\n            u_gradientTexture: () => this.gradient_,\r\n            u_opacity: () => this.getOpacity(),\r\n          },\r\n        },\r\n      ],\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  renderDeclutter() {}\r\n}\r\n\r\n/**\r\n * @param {Array<string>} colors A list of colored.\r\n * @return {HTMLCanvasElement} canvas with gradient texture.\r\n */\r\nfunction createGradient(colors) {\r\n  const width = 1;\r\n  const height = 256;\r\n  const context = createCanvasContext2D(width, height);\r\n\r\n  const gradient = context.createLinearGradient(0, 0, width, height);\r\n  const step = 1 / (colors.length - 1);\r\n  for (let i = 0, ii = colors.length; i < ii; ++i) {\r\n    gradient.addColorStop(i * step, colors[i]);\r\n  }\r\n\r\n  context.fillStyle = gradient;\r\n  context.fillRect(0, 0, width, height);\r\n\r\n  return context.canvas;\r\n}\r\n\r\nexport default Heatmap;\r\n", "/**\r\n * @module ol/renderer/webgl/PointsLayer\r\n */\r\nimport ViewHint from '../../ViewHint.js';\r\nimport {assert} from '../../asserts.js';\r\nimport {listen, unlistenByKey} from '../../events.js';\r\nimport {buffer, createEmpty, equals} from '../../extent.js';\r\nimport BaseVector from '../../layer/BaseVector.js';\r\nimport {fromUserCoordinate, getUserProjection} from '../../proj.js';\r\nimport {WebGLWorkerMessageType} from '../../render/webgl/constants.js';\r\nimport {colorDecodeId, colorEncodeId} from '../../render/webgl/utils.js';\r\nimport VectorEventType from '../../source/VectorEventType.js';\r\nimport {\r\n  apply as applyTransform,\r\n  create as createTransform,\r\n  makeInverse as makeInverseTransform,\r\n  multiply as multiplyTransform,\r\n  translate as translateTransform,\r\n} from '../../transform.js';\r\nimport {getUid} from '../../util.js';\r\nimport WebGLArrayBuffer from '../../webgl/Buffer.js';\r\nimport {AttributeType, DefaultUniform} from '../../webgl/Helper.js';\r\nimport WebGLRenderTarget from '../../webgl/RenderTarget.js';\r\nimport {ARRAY_BUFFER, DYNAMIC_DRAW, ELEMENT_ARRAY_BUFFER} from '../../webgl.js';\r\nimport {create as createWebGLWorker} from '../../worker/webgl.js';\r\nimport WebGLLayerRenderer from './Layer.js';\r\nimport {getWorldParameters} from './worldUtil.js';\r\n\r\n/** @typedef {import(\"../../geom/Point.js\").default} Point */\r\n/** @typedef {import(\"../../Feature\").default<Point>} PointFeature */\r\n\r\n/**\r\n * @typedef {Object} CustomAttribute A description of a custom attribute to be passed on to the GPU, with a value different\r\n * for each feature.\r\n * @property {string} name Attribute name.\r\n * @property {function(PointFeature, Object<string, *>):number} callback This callback computes the numerical value of the\r\n * attribute for a given feature (properties are available as 2nd arg for quicker access).\r\n */\r\n\r\n/**\r\n * @typedef {Object} FeatureCacheItem Object that holds a reference to a feature, its geometry and properties. Used to optimize\r\n * rebuildBuffers by accessing these objects quicker.\r\n * @property {PointFeature} feature Feature\r\n * @property {Object<string, *>} properties Feature properties\r\n * @property {import(\"../../coordinate.js\").Coordinate} flatCoordinates Point coordinates\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {string} [className='ol-layer'] A CSS class name to set to the canvas element.\r\n * @property {Array<CustomAttribute>} [attributes] These attributes will be read from the features in the source and then\r\n * passed to the GPU. The `name` property of each attribute will serve as its identifier:\r\n *  In the vertex shader as an `attribute` by prefixing it with `a_`\r\n *  In the fragment shader as a `varying` by prefixing it with `v_`\r\n * Please note that these can only be numerical values.\r\n * @property {string} vertexShader Vertex shader source, mandatory.\r\n * @property {string} fragmentShader Fragment shader source, mandatory.\r\n * @property {boolean} [hitDetectionEnabled] Whether shader is hit detection aware.\r\n * @property {Object<string,import(\"../../webgl/Helper\").UniformValue>} [uniforms] Uniform definitions for the post process steps\r\n * Please note that `u_texture` is reserved for the main texture slot and `u_opacity` is reserved for the layer opacity.\r\n * @property {Array<import(\"./Layer\").PostProcessesOptions>} [postProcesses] Post-processes definitions\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * WebGL vector renderer optimized for points.\r\n * All features will be rendered as quads (two triangles forming a square). New data will be flushed to the GPU\r\n * every time the vector source changes.\r\n *\r\n * You need to provide vertex and fragment shaders for rendering. This can be done using\r\n * {@link module:ol/webgl/ShaderBuilder~ShaderBuilder} utilities. These shaders shall expect a `a_position` attribute\r\n * containing the screen-space projected center of the quad, as well as a `a_index` attribute\r\n * whose value (0, 1, 2 or 3) indicates which quad vertex is currently getting processed (see structure below).\r\n *\r\n * To include variable attributes in the shaders, you need to declare them using the `attributes` property of\r\n * the options object like so:\r\n * ```js\r\n * new WebGLPointsLayerRenderer(layer, {\r\n *   attributes: [\r\n *     {\r\n *       name: 'size',\r\n *       callback: function(feature) {\r\n *         // compute something with the feature\r\n *       }\r\n *     },\r\n *     {\r\n *       name: 'weight',\r\n *       callback: function(feature) {\r\n *         // compute something with the feature\r\n *       }\r\n *     },\r\n *   ],\r\n *   vertexShader:\r\n *     // shader using attribute a_weight and a_size\r\n *   fragmentShader:\r\n *     // shader using varying v_weight and v_size\r\n * ```\r\n *\r\n * To enable hit detection, you must as well provide dedicated shaders using the `hitVertexShader`\r\n * and `hitFragmentShader` properties. These shall expect the `a_hitColor` attribute to contain\r\n * the final color that will have to be output for hit detection to work.\r\n *\r\n * The following uniform is used for the main texture: `u_texture`.\r\n * The following uniform is used for the layer opacity: `u_opacity`.\r\n *\r\n * Please note that the main shader output should have premultiplied alpha, otherwise visual anomalies may occur.\r\n *\r\n * Points are rendered as quads with the following structure:\r\n *\r\n * ```\r\n *   (u0, v1)      (u1, v1)\r\n *  [3]----------[2]\r\n *   |`           |\r\n *   |  `         |\r\n *   |    `       |\r\n *   |      `     |\r\n *   |        `   |\r\n *   |          ` |\r\n *  [0]----------[1]\r\n *   (u0, v0)      (u1, v0)\r\n *  ```\r\n *\r\n * This uses {@link module:ol/webgl/Helper~WebGLHelper} internally.\r\n *\r\n * @api\r\n */\r\nclass WebGLPointsLayerRenderer extends WebGLLayerRenderer {\r\n  /**\r\n   * @param {import(\"../../layer/Layer.js\").default} layer Layer.\r\n   * @param {Options} options Options.\r\n   */\r\n  constructor(layer, options) {\r\n    const uniforms = options.uniforms || {};\r\n    const projectionMatrixTransform = createTransform();\r\n    uniforms[DefaultUniform.PROJECTION_MATRIX] = projectionMatrixTransform;\r\n\r\n    super(layer, {\r\n      uniforms: uniforms,\r\n      postProcesses: options.postProcesses,\r\n    });\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    this.sourceRevision_ = -1;\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    this.verticesBuffer_ = new WebGLArrayBuffer(ARRAY_BUFFER, DYNAMIC_DRAW);\r\n    /**\r\n     * @private\r\n     */\r\n    this.indicesBuffer_ = new WebGLArrayBuffer(\r\n      ELEMENT_ARRAY_BUFFER,\r\n      DYNAMIC_DRAW,\r\n    );\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    this.vertexShader_ = options.vertexShader;\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    this.fragmentShader_ = options.fragmentShader;\r\n\r\n    /**\r\n     * @type {WebGLProgram}\r\n     * @private\r\n     */\r\n    this.program_;\r\n\r\n    /**\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.hitDetectionEnabled_ = options.hitDetectionEnabled ?? true;\r\n\r\n    const customAttributes = options.attributes\r\n      ? options.attributes.map(function (attribute) {\r\n          return {\r\n            name: 'a_' + attribute.name,\r\n            size: 1,\r\n            type: AttributeType.FLOAT,\r\n          };\r\n        })\r\n      : [];\r\n\r\n    /**\r\n     * A list of attributes used by the renderer. By default only the position and\r\n     * index of the vertex (0 to 3) are required.\r\n     * @type {Array<import('../../webgl/Helper.js').AttributeDescription>}\r\n     */\r\n    this.attributes = [\r\n      {\r\n        name: 'a_position',\r\n        size: 2,\r\n        type: AttributeType.FLOAT,\r\n      },\r\n      {\r\n        name: 'a_index',\r\n        size: 1,\r\n        type: AttributeType.FLOAT,\r\n      },\r\n    ];\r\n\r\n    if (this.hitDetectionEnabled_) {\r\n      this.attributes.push({\r\n        name: 'a_hitColor',\r\n        size: 4,\r\n        type: AttributeType.FLOAT,\r\n      });\r\n      this.attributes.push({\r\n        name: 'a_featureUid',\r\n        size: 1,\r\n        type: AttributeType.FLOAT,\r\n      });\r\n    }\r\n    this.attributes.push(...customAttributes);\r\n\r\n    this.customAttributes = options.attributes ? options.attributes : [];\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    this.previousExtent_ = createEmpty();\r\n\r\n    /**\r\n     * This transform is updated on every frame and is the composition of:\r\n     * - invert of the world->screen transform that was used when rebuilding buffers (see `this.renderTransform_`)\r\n     * - current world->screen transform\r\n     * @type {import(\"../../transform.js\").Transform}\r\n     * @private\r\n     */\r\n    this.currentTransform_ = projectionMatrixTransform;\r\n\r\n    /**\r\n     * This transform is updated when buffers are rebuilt and converts world space coordinates to screen space\r\n     * @type {import(\"../../transform.js\").Transform}\r\n     * @private\r\n     */\r\n    this.renderTransform_ = createTransform();\r\n\r\n    /**\r\n     * @type {import(\"../../transform.js\").Transform}\r\n     * @private\r\n     */\r\n    this.invertRenderTransform_ = createTransform();\r\n\r\n    /**\r\n     * @type {Float32Array}\r\n     * @private\r\n     */\r\n    this.renderInstructions_ = new Float32Array(0);\r\n\r\n    /**\r\n     * @type {WebGLRenderTarget}\r\n     * @private\r\n     */\r\n    this.hitRenderTarget_;\r\n\r\n    /**\r\n     * Keep track of latest message sent to worker\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.lastSentId = 0;\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    this.worker_ = createWebGLWorker();\r\n\r\n    this.worker_.addEventListener(\r\n      'message',\r\n      /**\r\n       * @param {*} event Event.\r\n       */\r\n      (event) => {\r\n        const received = event.data;\r\n        if (received.type === WebGLWorkerMessageType.GENERATE_POINT_BUFFERS) {\r\n          const projectionTransform = received.projectionTransform;\r\n          this.verticesBuffer_.fromArrayBuffer(received.vertexBuffer);\r\n          this.helper.flushBufferData(this.verticesBuffer_);\r\n          this.indicesBuffer_.fromArrayBuffer(received.indexBuffer);\r\n          this.helper.flushBufferData(this.indicesBuffer_);\r\n\r\n          this.renderTransform_ = projectionTransform;\r\n          makeInverseTransform(\r\n            this.invertRenderTransform_,\r\n            this.renderTransform_,\r\n          );\r\n          this.renderInstructions_ = new Float32Array(\r\n            event.data.renderInstructions,\r\n          );\r\n          if (received.id === this.lastSentId) {\r\n            this.ready = true;\r\n          }\r\n          this.getLayer().changed();\r\n        }\r\n      },\r\n    );\r\n\r\n    /**\r\n     * This object will be updated when the source changes. Key is uid.\r\n     * @type {Object<string, FeatureCacheItem>}\r\n     * @private\r\n     */\r\n    this.featureCache_ = {};\r\n\r\n    /**\r\n     * Amount of features in the cache.\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.featureCount_ = 0;\r\n\r\n    const source = /** @type {import(\"../../source/Vector.js\").default} */ (\r\n      this.getLayer().getSource()\r\n    );\r\n    /**\r\n     * @private\r\n     */\r\n    this.sourceListenKeys_ = [\r\n      listen(\r\n        source,\r\n        VectorEventType.ADDFEATURE,\r\n        this.handleSourceFeatureAdded_,\r\n        this,\r\n      ),\r\n      listen(\r\n        source,\r\n        VectorEventType.CHANGEFEATURE,\r\n        this.handleSourceFeatureChanged_,\r\n        this,\r\n      ),\r\n      listen(\r\n        source,\r\n        VectorEventType.REMOVEFEATURE,\r\n        this.handleSourceFeatureDelete_,\r\n        this,\r\n      ),\r\n      listen(\r\n        source,\r\n        VectorEventType.CLEAR,\r\n        this.handleSourceFeatureClear_,\r\n        this,\r\n      ),\r\n    ];\r\n    source.forEachFeature((feature) => {\r\n      const geometry = feature.getGeometry();\r\n      if (geometry && geometry.getType() === 'Point') {\r\n        this.featureCache_[getUid(feature)] = {\r\n          feature: /** @type {PointFeature} */ (feature),\r\n          properties: feature.getProperties(),\r\n          flatCoordinates: /** @type {Point} */ (geometry).getFlatCoordinates(),\r\n        };\r\n        this.featureCount_++;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  afterHelperCreated() {\r\n    this.program_ = this.helper.getProgram(\r\n      this.fragmentShader_,\r\n      this.vertexShader_,\r\n    );\r\n\r\n    if (this.hitDetectionEnabled_) {\r\n      this.hitRenderTarget_ = new WebGLRenderTarget(this.helper);\r\n    }\r\n\r\n    // upload buffers again if any\r\n    if (this.verticesBuffer_.getArray()) {\r\n      this.helper.flushBufferData(this.verticesBuffer_);\r\n    }\r\n    if (this.indicesBuffer_.getArray()) {\r\n      this.helper.flushBufferData(this.indicesBuffer_);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../source/Vector.js\").VectorSourceEvent} event Event.\r\n   * @private\r\n   */\r\n  handleSourceFeatureAdded_(event) {\r\n    const feature = event.feature;\r\n    const geometry = feature.getGeometry();\r\n    if (geometry && geometry.getType() === 'Point') {\r\n      this.featureCache_[getUid(feature)] = {\r\n        feature: /** @type {PointFeature} */ (feature),\r\n        properties: feature.getProperties(),\r\n        flatCoordinates: /** @type {Point} */ (geometry).getFlatCoordinates(),\r\n      };\r\n      this.featureCount_++;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../source/Vector.js\").VectorSourceEvent} event Event.\r\n   * @private\r\n   */\r\n  handleSourceFeatureChanged_(event) {\r\n    const feature = event.feature;\r\n    const featureUid = getUid(feature);\r\n    const item = this.featureCache_[featureUid];\r\n    const geometry = feature.getGeometry();\r\n    if (item) {\r\n      if (geometry && geometry.getType() === 'Point') {\r\n        item.properties = feature.getProperties();\r\n        item.flatCoordinates = /** @type {Point} */ (\r\n          geometry\r\n        ).getFlatCoordinates();\r\n      } else {\r\n        delete this.featureCache_[featureUid];\r\n        this.featureCount_--;\r\n      }\r\n    } else {\r\n      if (geometry && geometry.getType() === 'Point') {\r\n        this.featureCache_[featureUid] = {\r\n          feature: /** @type {PointFeature} */ (feature),\r\n          properties: feature.getProperties(),\r\n          flatCoordinates: /** @type {Point} */ (geometry).getFlatCoordinates(),\r\n        };\r\n        this.featureCount_++;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../source/Vector.js\").VectorSourceEvent} event Event.\r\n   * @private\r\n   */\r\n  handleSourceFeatureDelete_(event) {\r\n    const feature = event.feature;\r\n    const featureUid = getUid(feature);\r\n    if (featureUid in this.featureCache_) {\r\n      delete this.featureCache_[featureUid];\r\n      this.featureCount_--;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  handleSourceFeatureClear_() {\r\n    this.featureCache_ = {};\r\n    this.featureCount_ = 0;\r\n  }\r\n\r\n  /**\r\n   * Render the layer.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @return {HTMLElement} The rendered element.\r\n   * @override\r\n   */\r\n  renderFrame(frameState) {\r\n    const gl = this.helper.getGL();\r\n    this.preRender(gl, frameState);\r\n    const [startWorld, endWorld, worldWidth] = getWorldParameters(\r\n      frameState,\r\n      this.getLayer(),\r\n    );\r\n\r\n    // draw the normal canvas\r\n    this.renderWorlds(frameState, false, startWorld, endWorld, worldWidth);\r\n    this.helper.finalizeDraw(\r\n      frameState,\r\n      this.dispatchPreComposeEvent,\r\n      this.dispatchPostComposeEvent,\r\n    );\r\n\r\n    if (this.hitDetectionEnabled_) {\r\n      // draw the hit buffer\r\n      this.renderWorlds(frameState, true, startWorld, endWorld, worldWidth);\r\n      this.hitRenderTarget_.clearCachedData();\r\n    }\r\n\r\n    this.postRender(gl, frameState);\r\n\r\n    const canvas = this.helper.getCanvas();\r\n    return canvas;\r\n  }\r\n\r\n  /**\r\n   * Determine whether renderFrame should be called.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @return {boolean} Layer is ready to be rendered.\r\n   * @override\r\n   */\r\n  prepareFrameInternal(frameState) {\r\n    const layer = this.getLayer();\r\n    const vectorSource = layer.getSource();\r\n    const viewState = frameState.viewState;\r\n    const viewNotMoving =\r\n      !frameState.viewHints[ViewHint.ANIMATING] &&\r\n      !frameState.viewHints[ViewHint.INTERACTING];\r\n    const extentChanged = !equals(this.previousExtent_, frameState.extent);\r\n    const sourceChanged = this.sourceRevision_ < vectorSource.getRevision();\r\n\r\n    if (sourceChanged) {\r\n      this.sourceRevision_ = vectorSource.getRevision();\r\n    }\r\n\r\n    if (viewNotMoving && (extentChanged || sourceChanged)) {\r\n      const projection = viewState.projection;\r\n      const resolution = viewState.resolution;\r\n\r\n      const renderBuffer =\r\n        layer instanceof BaseVector ? layer.getRenderBuffer() : 0;\r\n      const extent = buffer(frameState.extent, renderBuffer * resolution);\r\n      vectorSource.loadFeatures(extent, resolution, projection);\r\n\r\n      this.rebuildBuffers_(frameState);\r\n      this.previousExtent_ = frameState.extent.slice();\r\n    }\r\n\r\n    this.helper.useProgram(this.program_, frameState);\r\n    this.helper.prepareDraw(frameState);\r\n\r\n    // write new data\r\n    this.helper.bindBuffer(this.verticesBuffer_);\r\n    this.helper.bindBuffer(this.indicesBuffer_);\r\n    this.helper.enableAttributes(this.attributes);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Rebuild internal webgl buffers based on current view extent; costly, should not be called too much\r\n   * @param {import(\"../../Map\").FrameState} frameState Frame state.\r\n   * @private\r\n   */\r\n  rebuildBuffers_(frameState) {\r\n    // saves the projection transform for the current frame state\r\n    const projectionTransform = createTransform();\r\n    this.helper.makeProjectionTransform(frameState, projectionTransform);\r\n\r\n    const userProjection = getUserProjection();\r\n\r\n    const baseInstructionLength = this.hitDetectionEnabled_ ? 7 : 2; // see below\r\n    const singleInstructionLength =\r\n      baseInstructionLength + this.customAttributes.length;\r\n    const totalSize = singleInstructionLength * this.featureCount_;\r\n    const renderInstructions =\r\n      this.renderInstructions_ && this.renderInstructions_.length === totalSize\r\n        ? this.renderInstructions_\r\n        : new Float32Array(totalSize);\r\n    this.renderInstructions_ = null;\r\n\r\n    // loop over features to fill the buffer\r\n    /** @type {import('../../coordinate.js').Coordinate} */\r\n    let tmpCoords = [];\r\n    /** @type {Array<number>} */\r\n    const tmpColor = [];\r\n    let idx = -1;\r\n    const projection = frameState.viewState.projection;\r\n    for (const featureUid in this.featureCache_) {\r\n      const featureCache = this.featureCache_[featureUid];\r\n      if (userProjection) {\r\n        tmpCoords = fromUserCoordinate(\r\n          featureCache.flatCoordinates,\r\n          projection,\r\n        );\r\n      } else {\r\n        tmpCoords[0] = featureCache.flatCoordinates[0];\r\n        tmpCoords[1] = featureCache.flatCoordinates[1];\r\n      }\r\n      applyTransform(projectionTransform, tmpCoords);\r\n\r\n      renderInstructions[++idx] = tmpCoords[0];\r\n      renderInstructions[++idx] = tmpCoords[1];\r\n\r\n      // for hit detection, the feature uid is saved in the opacity value\r\n      // and the index of the opacity value is encoded in the color values\r\n      if (this.hitDetectionEnabled_) {\r\n        const hitColor = colorEncodeId(idx + 5, tmpColor);\r\n        renderInstructions[++idx] = hitColor[0];\r\n        renderInstructions[++idx] = hitColor[1];\r\n        renderInstructions[++idx] = hitColor[2];\r\n        renderInstructions[++idx] = hitColor[3];\r\n        renderInstructions[++idx] = Number(featureUid);\r\n      }\r\n\r\n      // pushing custom attributes\r\n      for (let j = 0; j < this.customAttributes.length; j++) {\r\n        const value = this.customAttributes[j].callback(\r\n          featureCache.feature,\r\n          featureCache.properties,\r\n        );\r\n        renderInstructions[++idx] = value;\r\n      }\r\n    }\r\n\r\n    /** @type {import('../../render/webgl/constants.js').WebGLWorkerGenerateBuffersMessage} */\r\n    const message = {\r\n      id: ++this.lastSentId,\r\n      type: WebGLWorkerMessageType.GENERATE_POINT_BUFFERS,\r\n      renderInstructions: renderInstructions.buffer,\r\n      customAttributesSize: singleInstructionLength - 2,\r\n    };\r\n    // additional properties will be sent back as-is by the worker\r\n    message['projectionTransform'] = projectionTransform;\r\n    this.ready = false;\r\n    this.worker_.postMessage(message, [renderInstructions.buffer]);\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @param {number} hitTolerance Hit tolerance in pixels.\r\n   * @param {import(\"../vector.js\").FeatureCallback<T>} callback Feature callback.\r\n   * @param {Array<import(\"../Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\r\n   * @return {T|undefined} Callback result.\r\n   * @template T\r\n   * @override\r\n   */\r\n  forEachFeatureAtCoordinate(\r\n    coordinate,\r\n    frameState,\r\n    hitTolerance,\r\n    callback,\r\n    matches,\r\n  ) {\r\n    assert(\r\n      this.hitDetectionEnabled_,\r\n      '`forEachFeatureAtCoordinate` cannot be used on a WebGL layer if the hit detection logic has been disabled using the `disableHitDetection: true` option.',\r\n    );\r\n    if (!this.renderInstructions_ || !this.hitDetectionEnabled_) {\r\n      return undefined;\r\n    }\r\n\r\n    const pixel = applyTransform(\r\n      frameState.coordinateToPixelTransform,\r\n      coordinate.slice(),\r\n    );\r\n\r\n    const data = this.hitRenderTarget_.readPixel(pixel[0] / 2, pixel[1] / 2);\r\n    const color = [data[0] / 255, data[1] / 255, data[2] / 255, data[3] / 255];\r\n    const index = colorDecodeId(color);\r\n    const opacity = this.renderInstructions_[index];\r\n    const uid = Math.floor(opacity).toString();\r\n\r\n    const source = this.getLayer().getSource();\r\n    const feature = source.getFeatureByUid(uid);\r\n    if (feature) {\r\n      return callback(feature, this.getLayer(), null);\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Render the world, either to the main framebuffer or to the hit framebuffer\r\n   * @param {import(\"../../Map.js\").FrameState} frameState current frame state\r\n   * @param {boolean} forHitDetection whether the rendering is for hit detection\r\n   * @param {number} startWorld the world to render in the first iteration\r\n   * @param {number} endWorld the last world to render\r\n   * @param {number} worldWidth the width of the worlds being rendered\r\n   */\r\n  renderWorlds(frameState, forHitDetection, startWorld, endWorld, worldWidth) {\r\n    let world = startWorld;\r\n\r\n    this.helper.useProgram(this.program_, frameState);\r\n\r\n    if (forHitDetection) {\r\n      this.hitRenderTarget_.setSize([\r\n        Math.floor(frameState.size[0] / 2),\r\n        Math.floor(frameState.size[1] / 2),\r\n      ]);\r\n      this.helper.prepareDrawToRenderTarget(\r\n        frameState,\r\n        this.hitRenderTarget_,\r\n        true,\r\n      );\r\n    }\r\n\r\n    this.helper.bindBuffer(this.verticesBuffer_);\r\n    this.helper.bindBuffer(this.indicesBuffer_);\r\n    this.helper.enableAttributes(this.attributes);\r\n\r\n    do {\r\n      this.helper.makeProjectionTransform(frameState, this.currentTransform_);\r\n      translateTransform(this.currentTransform_, world * worldWidth, 0);\r\n      multiplyTransform(this.currentTransform_, this.invertRenderTransform_);\r\n      this.helper.applyUniforms(frameState);\r\n      this.helper.applyHitDetectionUniform(forHitDetection);\r\n      const renderCount = this.indicesBuffer_.getSize();\r\n      this.helper.drawElements(0, renderCount);\r\n    } while (++world < endWorld);\r\n  }\r\n\r\n  /**\r\n   * Clean up.\r\n   * @override\r\n   */\r\n  disposeInternal() {\r\n    this.worker_.terminate();\r\n    this.sourceListenKeys_.forEach(function (key) {\r\n      unlistenByKey(key);\r\n    });\r\n    this.sourceListenKeys_ = null;\r\n    super.disposeInternal();\r\n  }\r\n\r\n  renderDeclutter() {}\r\n}\r\n\r\nexport default WebGLPointsLayerRenderer;\r\n", "/**\r\n * @module ol/render/webgl/constants\r\n */\r\n\r\n/**\r\n * @enum {string}\r\n */\r\nexport const WebGLWorkerMessageType = {\r\n  GENERATE_POLYGON_BUFFERS: 'GENERATE_POLYGON_BUFFERS',\r\n  GENERATE_POINT_BUFFERS: 'GENERATE_POINT_BUFFERS',\r\n  GENERATE_LINE_STRING_BUFFERS: 'GENERATE_LINE_STRING_BUFFERS',\r\n};\r\n\r\n/**\r\n * @typedef {Object} WebGLWorkerGenerateBuffersMessage\r\n * This message will trigger the generation of a vertex and an index buffer based on the given render instructions.\r\n * When the buffers are generated, the worked will send a message of the same type to the main thread, with\r\n * the generated buffers in it.\r\n * Note that any addition properties present in the message *will* be sent back to the main thread.\r\n * @property {number} id Message id; will be used both in request and response as a means of identification\r\n * @property {WebGLWorkerMessageType} type Message type\r\n * @property {ArrayBuffer} renderInstructions render instructions raw binary buffer.\r\n * @property {number} [customAttributesSize] Amount of hit detection + custom attributes count in the render instructions.\r\n * @property {ArrayBuffer} [vertexBuffer] Vertices array raw binary buffer (sent by the worker).\r\n * @property {ArrayBuffer} [indexBuffer] Indices array raw binary buffer (sent by the worker).\r\n * @property {import(\"../../transform\").Transform} [renderInstructionsTransform] Transformation matrix used to project the instructions coordinates\r\n */\r\n", "/**\r\n * @module ol/render/webgl/utils\r\n */\r\nimport earcut from 'earcut';\r\nimport {clamp} from '../../math.js';\r\nimport {apply as applyTransform} from '../../transform.js';\r\n\r\nexport const LINESTRING_ANGLE_COSINE_CUTOFF = 0.985;\r\n\r\n/** @type {Array<number>} */\r\nconst tmpArray_ = [];\r\n\r\n/**\r\n * An object holding positions both in an index and a vertex buffer.\r\n * @typedef {Object} BufferPositions\r\n * @property {number} vertexPosition Position in the vertex buffer\r\n * @property {number} indexPosition Position in the index buffer\r\n */\r\nconst bufferPositions_ = {vertexPosition: 0, indexPosition: 0};\r\n\r\n/**\r\n * @param {Float32Array} buffer Buffer\r\n * @param {number} pos Position\r\n * @param {number} x X\r\n * @param {number} y Y\r\n * @param {number} index Index\r\n */\r\nfunction writePointVertex(buffer, pos, x, y, index) {\r\n  buffer[pos + 0] = x;\r\n  buffer[pos + 1] = y;\r\n  buffer[pos + 2] = index;\r\n}\r\n\r\n/**\r\n * Pushes a quad (two triangles) based on a point geometry\r\n * @param {Float32Array} instructions Array of render instructions for points.\r\n * @param {number} elementIndex Index from which render instructions will be read.\r\n * @param {Float32Array} vertexBuffer Buffer in the form of a typed array.\r\n * @param {Uint32Array} indexBuffer Buffer in the form of a typed array.\r\n * @param {number} customAttributesSize Amount of custom attributes for each element.\r\n * @param {BufferPositions} [bufferPositions] Buffer write positions; if not specified, positions will be set at 0.\r\n * @return {BufferPositions} New buffer positions where to write next\r\n * @property {number} vertexPosition New position in the vertex buffer where future writes should start.\r\n * @property {number} indexPosition New position in the index buffer where future writes should start.\r\n * @private\r\n */\r\nexport function writePointFeatureToBuffers(\r\n  instructions,\r\n  elementIndex,\r\n  vertexBuffer,\r\n  indexBuffer,\r\n  customAttributesSize,\r\n  bufferPositions,\r\n) {\r\n  // This is for x, y and index\r\n  const baseVertexAttrsCount = 3;\r\n  const baseInstructionsCount = 2;\r\n  const stride = baseVertexAttrsCount + customAttributesSize;\r\n\r\n  const x = instructions[elementIndex + 0];\r\n  const y = instructions[elementIndex + 1];\r\n\r\n  // read custom numerical attributes on the feature\r\n  const customAttrs = tmpArray_;\r\n  customAttrs.length = customAttributesSize;\r\n  for (let i = 0; i < customAttrs.length; i++) {\r\n    customAttrs[i] = instructions[elementIndex + baseInstructionsCount + i];\r\n  }\r\n\r\n  let vPos = bufferPositions ? bufferPositions.vertexPosition : 0;\r\n  let iPos = bufferPositions ? bufferPositions.indexPosition : 0;\r\n  const baseIndex = vPos / stride;\r\n\r\n  // push vertices for each of the four quad corners (first standard then custom attributes)\r\n  writePointVertex(vertexBuffer, vPos, x, y, 0);\r\n  customAttrs.length &&\r\n    vertexBuffer.set(customAttrs, vPos + baseVertexAttrsCount);\r\n  vPos += stride;\r\n\r\n  writePointVertex(vertexBuffer, vPos, x, y, 1);\r\n  customAttrs.length &&\r\n    vertexBuffer.set(customAttrs, vPos + baseVertexAttrsCount);\r\n  vPos += stride;\r\n\r\n  writePointVertex(vertexBuffer, vPos, x, y, 2);\r\n  customAttrs.length &&\r\n    vertexBuffer.set(customAttrs, vPos + baseVertexAttrsCount);\r\n  vPos += stride;\r\n\r\n  writePointVertex(vertexBuffer, vPos, x, y, 3);\r\n  customAttrs.length &&\r\n    vertexBuffer.set(customAttrs, vPos + baseVertexAttrsCount);\r\n  vPos += stride;\r\n\r\n  indexBuffer[iPos++] = baseIndex;\r\n  indexBuffer[iPos++] = baseIndex + 1;\r\n  indexBuffer[iPos++] = baseIndex + 3;\r\n  indexBuffer[iPos++] = baseIndex + 1;\r\n  indexBuffer[iPos++] = baseIndex + 2;\r\n  indexBuffer[iPos++] = baseIndex + 3;\r\n\r\n  bufferPositions_.vertexPosition = vPos;\r\n  bufferPositions_.indexPosition = iPos;\r\n\r\n  return bufferPositions_;\r\n}\r\n\r\n/**\r\n * Pushes a single quad to form a line segment; also includes a computation for the join angles with previous and next\r\n * segment, in order to be able to offset the vertices correctly in the shader.\r\n * Join angles are between 0 and 2PI.\r\n * This also computes the length of the current segment and the sum of the join angle tangents in order\r\n * to store this information on each subsequent segment along the line. This is necessary to correctly render dashes\r\n * and symbols along the line.\r\n *\r\n *   pB (before)                          pA (after)\r\n *    X             negative             X\r\n *     \\             offset             /\r\n *      \\                              /\r\n *       \\   join              join   /\r\n *        \\ angle 0          angle 1 /\r\n *         \\←---                ←---/      positive\r\n *          \\   ←--          ←--   /        offset\r\n *           \\     ↑       ↓      /\r\n *            X────┴───────┴─────X\r\n *            p0                  p1\r\n *\r\n * @param {Float32Array} instructions Array of render instructions for lines.s\r\n * @param {number} segmentStartIndex Index of the segment start point from which render instructions will be read.\r\n * @param {number} segmentEndIndex Index of the segment end point from which render instructions will be read.\r\n * @param {number|null} beforeSegmentIndex Index of the point right before the segment (null if none, e.g this is a line start)\r\n * @param {number|null} afterSegmentIndex Index of the point right after the segment (null if none, e.g this is a line end)\r\n * @param {Array<number>} vertexArray Array containing vertices.\r\n * @param {Array<number>} indexArray Array containing indices.\r\n * @param {Array<number>} customAttributes Array of custom attributes value\r\n * @param {import('../../transform.js').Transform} toWorldTransform Transform matrix used to obtain world coordinates from instructions\r\n * @param {number} currentLength Cumulated length of segments processed so far\r\n * @param {number} currentAngleTangentSum Cumulated tangents of the join angles processed so far\r\n * @return {{length: number, angle: number}} Cumulated length with the newly processed segment (in world units), new sum of the join angle tangents\r\n * @private\r\n */\r\nexport function writeLineSegmentToBuffers(\r\n  instructions,\r\n  segmentStartIndex,\r\n  segmentEndIndex,\r\n  beforeSegmentIndex,\r\n  afterSegmentIndex,\r\n  vertexArray,\r\n  indexArray,\r\n  customAttributes,\r\n  toWorldTransform,\r\n  currentLength,\r\n  currentAngleTangentSum,\r\n) {\r\n  // compute the stride to determine how many vertices were already pushed\r\n  const baseVertexAttrsCount = 10; // base attributes: x0, y0, m0, x1, y1, m1, angle0, angle1, distance, params\r\n  const stride = baseVertexAttrsCount + customAttributes.length;\r\n  const baseIndex = vertexArray.length / stride;\r\n\r\n  // The segment is composed of two positions called P0[x0, y0] and P1[x1, y1]\r\n  // Depending on whether there are points before and after the segment, its final shape\r\n  // will be different\r\n  const p0 = [\r\n    instructions[segmentStartIndex + 0],\r\n    instructions[segmentStartIndex + 1],\r\n  ];\r\n  const p1 = [instructions[segmentEndIndex], instructions[segmentEndIndex + 1]];\r\n\r\n  const m0 = instructions[segmentStartIndex + 2];\r\n  const m1 = instructions[segmentEndIndex + 2];\r\n\r\n  // to compute join angles we need to reproject coordinates back in world units\r\n  const p0world = applyTransform(toWorldTransform, [...p0]);\r\n  const p1world = applyTransform(toWorldTransform, [...p1]);\r\n\r\n  /**\r\n   * Compute the angle between p0pA and p0pB\r\n   * @param {import(\"../../coordinate.js\").Coordinate} p0 Point 0\r\n   * @param {import(\"../../coordinate.js\").Coordinate} pA Point A\r\n   * @param {import(\"../../coordinate.js\").Coordinate} pB Point B\r\n   * @return {number} a value in [0, 2PI]\r\n   */\r\n  function angleBetween(p0, pA, pB) {\r\n    const lenA = Math.sqrt(\r\n      (pA[0] - p0[0]) * (pA[0] - p0[0]) + (pA[1] - p0[1]) * (pA[1] - p0[1]),\r\n    );\r\n    const tangentA = [(pA[0] - p0[0]) / lenA, (pA[1] - p0[1]) / lenA];\r\n    const orthoA = [-tangentA[1], tangentA[0]];\r\n    const lenB = Math.sqrt(\r\n      (pB[0] - p0[0]) * (pB[0] - p0[0]) + (pB[1] - p0[1]) * (pB[1] - p0[1]),\r\n    );\r\n    const tangentB = [(pB[0] - p0[0]) / lenB, (pB[1] - p0[1]) / lenB];\r\n\r\n    // this angle can be clockwise or anticlockwise; hence the computation afterwards\r\n    const angle =\r\n      lenA === 0 || lenB === 0\r\n        ? 0\r\n        : Math.acos(\r\n            clamp(tangentB[0] * tangentA[0] + tangentB[1] * tangentA[1], -1, 1),\r\n          );\r\n    const isClockwise = tangentB[0] * orthoA[0] + tangentB[1] * orthoA[1] > 0;\r\n    return !isClockwise ? Math.PI * 2 - angle : angle;\r\n  }\r\n\r\n  // a negative angle indicates a line cap\r\n  let angle0 = -1;\r\n  let angle1 = -1;\r\n  let newAngleTangentSum = currentAngleTangentSum;\r\n\r\n  const joinBefore = beforeSegmentIndex !== null;\r\n  const joinAfter = afterSegmentIndex !== null;\r\n\r\n  // add vertices and adapt offsets for P0 in case of join\r\n  if (joinBefore) {\r\n    // B for before\r\n    const pB = [\r\n      instructions[beforeSegmentIndex],\r\n      instructions[beforeSegmentIndex + 1],\r\n    ];\r\n    const pBworld = applyTransform(toWorldTransform, [...pB]);\r\n    angle0 = angleBetween(p0world, p1world, pBworld);\r\n\r\n    // only add to the sum if the angle isn't too close to 0 or 2PI\r\n    if (Math.cos(angle0) <= LINESTRING_ANGLE_COSINE_CUTOFF) {\r\n      newAngleTangentSum += Math.tan((angle0 - Math.PI) / 2);\r\n    }\r\n  }\r\n  // adapt offsets for P1 in case of join; add to angle sum\r\n  if (joinAfter) {\r\n    // A for after\r\n    const pA = [\r\n      instructions[afterSegmentIndex],\r\n      instructions[afterSegmentIndex + 1],\r\n    ];\r\n    const pAworld = applyTransform(toWorldTransform, [...pA]);\r\n    angle1 = angleBetween(p1world, p0world, pAworld);\r\n\r\n    // only add to the sum if the angle isn't too close to 0 or 2PI\r\n    if (Math.cos(angle1) <= LINESTRING_ANGLE_COSINE_CUTOFF) {\r\n      newAngleTangentSum += Math.tan((Math.PI - angle1) / 2);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} vertexIndex From 0 to 3, indicating position in the quad\r\n   * @param {number} angleSum Sum of the join angles encountered so far (used to compute distance offset\r\n   * @return {number} A float value containing both information\r\n   */\r\n  function computeParameters(vertexIndex, angleSum) {\r\n    if (angleSum === 0) {\r\n      return vertexIndex * 10000;\r\n    }\r\n    return Math.sign(angleSum) * (vertexIndex * 10000 + Math.abs(angleSum));\r\n  }\r\n\r\n  // add main segment triangles\r\n  vertexArray.push(\r\n    p0[0],\r\n    p0[1],\r\n    m0,\r\n    p1[0],\r\n    p1[1],\r\n    m1,\r\n    angle0,\r\n    angle1,\r\n    currentLength,\r\n    computeParameters(0, currentAngleTangentSum),\r\n  );\r\n  vertexArray.push(...customAttributes);\r\n\r\n  vertexArray.push(\r\n    p0[0],\r\n    p0[1],\r\n    m0,\r\n    p1[0],\r\n    p1[1],\r\n    m1,\r\n    angle0,\r\n    angle1,\r\n    currentLength,\r\n    computeParameters(1, currentAngleTangentSum),\r\n  );\r\n  vertexArray.push(...customAttributes);\r\n\r\n  vertexArray.push(\r\n    p0[0],\r\n    p0[1],\r\n    m0,\r\n    p1[0],\r\n    p1[1],\r\n    m1,\r\n    angle0,\r\n    angle1,\r\n    currentLength,\r\n    computeParameters(2, currentAngleTangentSum),\r\n  );\r\n  vertexArray.push(...customAttributes);\r\n\r\n  vertexArray.push(\r\n    p0[0],\r\n    p0[1],\r\n    m0,\r\n    p1[0],\r\n    p1[1],\r\n    m1,\r\n    angle0,\r\n    angle1,\r\n    currentLength,\r\n    computeParameters(3, currentAngleTangentSum),\r\n  );\r\n  vertexArray.push(...customAttributes);\r\n\r\n  indexArray.push(\r\n    baseIndex,\r\n    baseIndex + 1,\r\n    baseIndex + 2,\r\n    baseIndex + 1,\r\n    baseIndex + 3,\r\n    baseIndex + 2,\r\n  );\r\n\r\n  return {\r\n    length:\r\n      currentLength +\r\n      Math.sqrt(\r\n        (p1world[0] - p0world[0]) * (p1world[0] - p0world[0]) +\r\n          (p1world[1] - p0world[1]) * (p1world[1] - p0world[1]),\r\n      ),\r\n    angle: newAngleTangentSum,\r\n  };\r\n}\r\n\r\n/**\r\n * Pushes several triangles to form a polygon, including holes\r\n * @param {Float32Array} instructions Array of render instructions for lines.\r\n * @param {number} polygonStartIndex Index of the polygon start point from which render instructions will be read.\r\n * @param {Array<number>} vertexArray Array containing vertices.\r\n * @param {Array<number>} indexArray Array containing indices.\r\n * @param {number} customAttributesSize Amount of custom attributes for each element.\r\n * @return {number} Next polygon instructions index\r\n * @private\r\n */\r\nexport function writePolygonTrianglesToBuffers(\r\n  instructions,\r\n  polygonStartIndex,\r\n  vertexArray,\r\n  indexArray,\r\n  customAttributesSize,\r\n) {\r\n  const instructionsPerVertex = 2; // x, y\r\n  const attributesPerVertex = 2 + customAttributesSize;\r\n  let instructionsIndex = polygonStartIndex;\r\n  const customAttributes = instructions.slice(\r\n    instructionsIndex,\r\n    instructionsIndex + customAttributesSize,\r\n  );\r\n  instructionsIndex += customAttributesSize;\r\n  const ringsCount = instructions[instructionsIndex++];\r\n  let verticesCount = 0;\r\n  const holes = new Array(ringsCount - 1);\r\n  for (let i = 0; i < ringsCount; i++) {\r\n    verticesCount += instructions[instructionsIndex++];\r\n    if (i < ringsCount - 1) {\r\n      holes[i] = verticesCount;\r\n    }\r\n  }\r\n  const flatCoords = instructions.slice(\r\n    instructionsIndex,\r\n    instructionsIndex + verticesCount * instructionsPerVertex,\r\n  );\r\n\r\n  // pushing to vertices and indices!! this is where the magic happens\r\n  const result = earcut(flatCoords, holes, instructionsPerVertex);\r\n  for (let i = 0; i < result.length; i++) {\r\n    indexArray.push(result[i] + vertexArray.length / attributesPerVertex);\r\n  }\r\n  for (let i = 0; i < flatCoords.length; i += 2) {\r\n    vertexArray.push(flatCoords[i], flatCoords[i + 1], ...customAttributes);\r\n  }\r\n\r\n  return instructionsIndex + verticesCount * instructionsPerVertex;\r\n}\r\n\r\n/**\r\n * Returns a texture of 1x1 pixel, white\r\n * @private\r\n * @return {ImageData} Image data.\r\n */\r\nexport function getBlankImageData() {\r\n  const canvas = document.createElement('canvas');\r\n  const image = canvas.getContext('2d').createImageData(1, 1);\r\n  image.data[0] = 255;\r\n  image.data[1] = 255;\r\n  image.data[2] = 255;\r\n  image.data[3] = 255;\r\n  return image;\r\n}\r\n\r\n/**\r\n * Generates a color array based on a numerical id\r\n * Note: the range for each component is 0 to 1 with 256 steps\r\n * @param {number} id Id\r\n * @param {Array<number>} [array] Reusable array\r\n * @return {Array<number>} Color array containing the encoded id\r\n */\r\nexport function colorEncodeId(id, array) {\r\n  array = array || [];\r\n  const radix = 256;\r\n  const divide = radix - 1;\r\n  array[0] = Math.floor(id / radix / radix / radix) / divide;\r\n  array[1] = (Math.floor(id / radix / radix) % radix) / divide;\r\n  array[2] = (Math.floor(id / radix) % radix) / divide;\r\n  array[3] = (id % radix) / divide;\r\n  return array;\r\n}\r\n\r\n/**\r\n * Reads an id from a color-encoded array\r\n * Note: the expected range for each component is 0 to 1 with 256 steps.\r\n * @param {Array<number>} color Color array containing the encoded id\r\n * @return {number} Decoded id\r\n */\r\nexport function colorDecodeId(color) {\r\n  let id = 0;\r\n  const radix = 256;\r\n  const mult = radix - 1;\r\n  id += Math.round(color[0] * radix * radix * radix * mult);\r\n  id += Math.round(color[1] * radix * radix * mult);\r\n  id += Math.round(color[2] * radix * mult);\r\n  id += Math.round(color[3] * mult);\r\n  return id;\r\n}\r\n\r\n/**\r\n * @typedef {import('./VectorStyleRenderer.js').AsShaders} StyleAsShaders\r\n */\r\n/**\r\n * @typedef {import('./VectorStyleRenderer.js').AsRule} StyleAsRule\r\n */\r\n\r\n/**\r\n * Takes in either a Flat Style or an array of shaders (used as input for the webgl vector layer classes)\r\n * and breaks it down into separate styles to be used by the VectorStyleRenderer class.\r\n * @param {import('../../style/flat.js').FlatStyleLike | Array<StyleAsShaders> | StyleAsShaders} style Flat style or shaders\r\n * @return {Array<StyleAsShaders | StyleAsRule>} Separate styles as shaders or rules with a single flat style and a filter\r\n */\r\nexport function breakDownFlatStyle(style) {\r\n  // possible cases:\r\n  // - single shader\r\n  // - multiple shaders\r\n  // - single style\r\n  // - multiple styles\r\n  // - multiple rules\r\n  const asArray = Array.isArray(style) ? style : [style];\r\n\r\n  // if array of rules: break rules into separate styles, compute \"else\" filters\r\n  if ('style' in asArray[0]) {\r\n    /** @type {Array<StyleAsRule>} */\r\n    const styles = [];\r\n    const rules = /** @type {Array<import('../../style/flat.js').Rule>} */ (\r\n      asArray\r\n    );\r\n    const previousFilters = [];\r\n    for (const rule of rules) {\r\n      const ruleStyles = Array.isArray(rule.style) ? rule.style : [rule.style];\r\n      /** @type {import(\"../../expr/expression.js\").EncodedExpression} */\r\n      let currentFilter = rule.filter;\r\n      if (rule.else && previousFilters.length) {\r\n        currentFilter = [\r\n          'all',\r\n          ...previousFilters.map((filter) => ['!', filter]),\r\n        ];\r\n        if (rule.filter) {\r\n          currentFilter.push(rule.filter);\r\n        }\r\n        if (currentFilter.length < 3) {\r\n          currentFilter = currentFilter[1];\r\n        }\r\n      }\r\n      if (rule.filter) {\r\n        previousFilters.push(rule.filter);\r\n      }\r\n      /** @type {Array<StyleAsRule>} */\r\n      const stylesWithFilters = ruleStyles.map((style) => ({\r\n        style,\r\n        ...(currentFilter && {filter: currentFilter}),\r\n      }));\r\n      styles.push(...stylesWithFilters);\r\n    }\r\n    return styles;\r\n  }\r\n\r\n  // if array of shaders: return as is\r\n  if ('builder' in asArray[0]) {\r\n    return /** @type {Array<StyleAsShaders>} */ (asArray);\r\n  }\r\n\r\n  return asArray.map(\r\n    (style) =>\r\n      /** @type {StyleAsRule} */ ({\r\n        style,\r\n      }),\r\n  );\r\n}\r\n", "/**\r\n * @module ol/webgl/Buffer\r\n */\r\nimport {assert} from '../asserts.js';\r\nimport {\r\n  ARRAY_BUFFER,\r\n  DYNAMIC_DRAW,\r\n  ELEMENT_ARRAY_BUFFER,\r\n  STATIC_DRAW,\r\n  STREAM_DRAW,\r\n} from '../webgl.js';\r\n\r\n/**\r\n * Used to describe the intended usage for the data: `STATIC_DRAW`, `STREAM_DRAW`\r\n * or `DYNAMIC_DRAW`.\r\n * @enum {number}\r\n */\r\nexport const BufferUsage = {\r\n  STATIC_DRAW: STATIC_DRAW,\r\n  STREAM_DRAW: STREAM_DRAW,\r\n  DYNAMIC_DRAW: DYNAMIC_DRAW,\r\n};\r\n\r\n/**\r\n * @classdesc\r\n * Object used to store an array of data as well as usage information for that data.\r\n * Stores typed arrays internally, either Float32Array or Uint16/32Array depending on\r\n * the buffer type (ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER) and available extensions.\r\n *\r\n * To populate the array, you can either use:\r\n * A size using `#ofSize(buffer)`\r\n * An `ArrayBuffer` object using `#fromArrayBuffer(buffer)`\r\n * A plain array using `#fromArray(array)`\r\n *\r\n * Note:\r\n * See the documentation of [WebGLRenderingContext.bufferData](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferData)\r\n * for more info on buffer usage.\r\n */\r\nclass WebGLArrayBuffer {\r\n  /**\r\n   * @param {number} type Buffer type, either ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER.\r\n   * @param {number} [usage] Intended usage, either `STATIC_DRAW`, `STREAM_DRAW` or `DYNAMIC_DRAW`.\r\n   * Default is `STATIC_DRAW`.\r\n   */\r\n  constructor(type, usage) {\r\n    /**\r\n     * @private\r\n     * @type {Float32Array|Uint32Array|null}\r\n     */\r\n    this.array_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.type_ = type;\r\n\r\n    assert(\r\n      type === ARRAY_BUFFER || type === ELEMENT_ARRAY_BUFFER,\r\n      'A `WebGLArrayBuffer` must either be of type `ELEMENT_ARRAY_BUFFER` or `ARRAY_BUFFER`',\r\n    );\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.usage_ = usage !== undefined ? usage : BufferUsage.STATIC_DRAW;\r\n  }\r\n\r\n  /**\r\n   * Populates the buffer with an array of the given size (all values will be zeroes).\r\n   * @param {number} size Array size\r\n   * @return {WebGLArrayBuffer} This\r\n   */\r\n  ofSize(size) {\r\n    this.array_ = new (getArrayClassForType(this.type_))(size);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Populates the buffer with an array of the given size.\r\n   * @param {Array<number>} array Numerical array\r\n   * @return {WebGLArrayBuffer} This\r\n   */\r\n  fromArray(array) {\r\n    this.array_ = getArrayClassForType(this.type_).from(array);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Populates the buffer with a raw binary array buffer.\r\n   * @param {ArrayBuffer} buffer Raw binary buffer to populate the array with. Note that this buffer must have been\r\n   * initialized for the same typed array class.\r\n   * @return {WebGLArrayBuffer} This\r\n   */\r\n  fromArrayBuffer(buffer) {\r\n    this.array_ = new (getArrayClassForType(this.type_))(buffer);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @return {number} Buffer type.\r\n   */\r\n  getType() {\r\n    return this.type_;\r\n  }\r\n\r\n  /**\r\n   * Will return null if the buffer was not initialized\r\n   * @return {Float32Array|Uint32Array|null} Array.\r\n   */\r\n  getArray() {\r\n    return this.array_;\r\n  }\r\n\r\n  /**\r\n   * @param {Float32Array|Uint32Array} array Array.\r\n   */\r\n  setArray(array) {\r\n    const ArrayType = getArrayClassForType(this.type_);\r\n    if (!(array instanceof ArrayType)) {\r\n      throw new Error(`Expected ${ArrayType}`);\r\n    }\r\n    this.array_ = array;\r\n  }\r\n\r\n  /**\r\n   * @return {number} Usage.\r\n   */\r\n  getUsage() {\r\n    return this.usage_;\r\n  }\r\n\r\n  /**\r\n   * Will return 0 if the buffer is not initialized\r\n   * @return {number} Array size\r\n   */\r\n  getSize() {\r\n    return this.array_ ? this.array_.length : 0;\r\n  }\r\n}\r\n\r\n/**\r\n * Returns a typed array constructor based on the given buffer type\r\n * @param {number} type Buffer type, either ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER.\r\n * @return {Float32ArrayConstructor|Uint32ArrayConstructor} The typed array class to use for this buffer.\r\n */\r\nexport function getArrayClassForType(type) {\r\n  switch (type) {\r\n    case ARRAY_BUFFER:\r\n      return Float32Array;\r\n    case ELEMENT_ARRAY_BUFFER:\r\n      return Uint32Array;\r\n    default:\r\n      return Float32Array;\r\n  }\r\n}\r\n\r\nexport default WebGLArrayBuffer;\r\n", "/**\r\n * @module ol/webgl\r\n */\r\n\r\nimport {SAFARI_BUG_237906} from './has.js';\r\n\r\n/**\r\n * Constants taken from goog.webgl\r\n */\r\n\r\n/**\r\n * Used by {@link module:ol/webgl/Helper~WebGLHelper} for buffers containing vertices data, such as\r\n * position, color, texture coordinate, etc. These vertices are then referenced by an index buffer\r\n * to be drawn on screen (see {@link module:ol/webgl.ELEMENT_ARRAY_BUFFER}).\r\n * @const\r\n * @type {number}\r\n * @api\r\n */\r\nexport const ARRAY_BUFFER = 0x8892;\r\n\r\n/**\r\n * Used by {@link module:ol/webgl/Helper~WebGLHelper} for buffers containing indices data.\r\n * Index buffers are essentially lists of references to vertices defined in a vertex buffer\r\n * (see {@link module:ol/webgl.ARRAY_BUFFER}), and define the primitives (triangles) to be drawn.\r\n * @const\r\n * @type {number}\r\n * @api\r\n */\r\nexport const ELEMENT_ARRAY_BUFFER = 0x8893;\r\n\r\n/**\r\n * Used by {link module:ol/webgl/Buffer~WebGLArrayBuffer}.\r\n * @const\r\n * @type {number}\r\n * @api\r\n */\r\nexport const STREAM_DRAW = 0x88e0;\r\n\r\n/**\r\n * Used by {link module:ol/webgl/Buffer~WebGLArrayBuffer}.\r\n * @const\r\n * @type {number}\r\n * @api\r\n */\r\nexport const STATIC_DRAW = 0x88e4;\r\n\r\n/**\r\n * Used by {link module:ol/webgl/Buffer~WebGLArrayBuffer}.\r\n * @const\r\n * @type {number}\r\n * @api\r\n */\r\nexport const DYNAMIC_DRAW = 0x88e8;\r\n\r\n/**\r\n * @const\r\n * @type {number}\r\n */\r\nexport const UNSIGNED_BYTE = 0x1401;\r\n\r\n/**\r\n * @const\r\n * @type {number}\r\n */\r\nexport const UNSIGNED_SHORT = 0x1403;\r\n\r\n/**\r\n * @const\r\n * @type {number}\r\n */\r\nexport const UNSIGNED_INT = 0x1405;\r\n\r\n/**\r\n * @const\r\n * @type {number}\r\n */\r\nexport const FLOAT = 0x1406;\r\n\r\n/**\r\n  end of goog.webgl constants\r\n */\r\n\r\n/**\r\n * @const\r\n * @type {Array<string>}\r\n */\r\nconst CONTEXT_IDS = ['experimental-webgl', 'webgl', 'webkit-3d', 'moz-webgl'];\r\n\r\n/**\r\n * @param {HTMLCanvasElement} canvas Canvas.\r\n * @param {Object} [attributes] Attributes.\r\n * @return {WebGLRenderingContext|null} WebGL rendering context.\r\n */\r\nexport function getContext(canvas, attributes) {\r\n  attributes = Object.assign(\r\n    {\r\n      preserveDrawingBuffer: true,\r\n      antialias: SAFARI_BUG_237906 ? false : true, // https://bugs.webkit.org/show_bug.cgi?id=237906\r\n    },\r\n    attributes,\r\n  );\r\n  const ii = CONTEXT_IDS.length;\r\n  for (let i = 0; i < ii; ++i) {\r\n    try {\r\n      const context = canvas.getContext(CONTEXT_IDS[i], attributes);\r\n      if (context) {\r\n        return /** @type {!WebGLRenderingContext} */ (context);\r\n      }\r\n    } catch {\r\n      // pass\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n/**\r\n * @type {Array<string>|null}\r\n */\r\nlet supportedExtensions = null;\r\n\r\n/**\r\n * @return {Array<string>|null} List of supported WebGL extensions.\r\n */\r\nexport function getSupportedExtensions() {\r\n  if (!supportedExtensions) {\r\n    const canvas = document.createElement('canvas');\r\n    const gl = getContext(canvas);\r\n    if (gl) {\r\n      supportedExtensions = gl.getSupportedExtensions();\r\n    }\r\n  }\r\n  return supportedExtensions;\r\n}\r\n", "/**\r\n * @module ol/webgl/Helper\r\n */\r\nimport Disposable from '../Disposable.js';\r\nimport {clear} from '../obj.js';\r\nimport {\r\n  compose as composeTransform,\r\n  create as createTransform,\r\n} from '../transform.js';\r\nimport {getUid} from '../util.js';\r\nimport {create, fromTransform} from '../vec/mat4.js';\r\nimport ContextEventType from '../webgl/ContextEventType.js';\r\nimport {\r\n  FLOAT,\r\n  UNSIGNED_BYTE,\r\n  UNSIGNED_INT,\r\n  UNSIGNED_SHORT,\r\n  getContext,\r\n} from '../webgl.js';\r\nimport WebGLPostProcessingPass from './PostProcessingPass.js';\r\n\r\n/**\r\n * @typedef {Object} BufferCacheEntry\r\n * @property {import(\"./Buffer.js\").default} buffer Buffer.\r\n * @property {WebGLBuffer} webGlBuffer WebGlBuffer.\r\n */\r\n\r\n/**\r\n * Shader types, either `FRAGMENT_SHADER` or `VERTEX_SHADER`.\r\n * @enum {number}\r\n */\r\nexport const ShaderType = {\r\n  FRAGMENT_SHADER: 0x8b30,\r\n  VERTEX_SHADER: 0x8b31,\r\n};\r\n\r\n/**\r\n * Names of uniforms made available to all shaders.\r\n * Please note: changing these *will* break custom shaders!\r\n * @enum {string}\r\n */\r\nexport const DefaultUniform = {\r\n  PROJECTION_MATRIX: 'u_projectionMatrix',\r\n  SCREEN_TO_WORLD_MATRIX: 'u_screenToWorldMatrix',\r\n  TIME: 'u_time',\r\n  ZOOM: 'u_zoom',\r\n  RESOLUTION: 'u_resolution',\r\n  ROTATION: 'u_rotation',\r\n  VIEWPORT_SIZE_PX: 'u_viewportSizePx',\r\n  PIXEL_RATIO: 'u_pixelRatio',\r\n  HIT_DETECTION: 'u_hitDetection',\r\n};\r\n\r\n/**\r\n * Attribute types, either `UNSIGNED_BYTE`, `UNSIGNED_SHORT`, `UNSIGNED_INT` or `FLOAT`\r\n * Note: an attribute stored in a `Float32Array` should be of type `FLOAT`.\r\n * @enum {number}\r\n */\r\nexport const AttributeType = {\r\n  UNSIGNED_BYTE: UNSIGNED_BYTE,\r\n  UNSIGNED_SHORT: UNSIGNED_SHORT,\r\n  UNSIGNED_INT: UNSIGNED_INT,\r\n  FLOAT: FLOAT,\r\n};\r\n\r\n/**\r\n * Description of an attribute in a buffer\r\n * @typedef {Object} AttributeDescription\r\n * @property {string} name Attribute name to use in shaders\r\n * @property {number} size Number of components per attributes\r\n * @property {AttributeType} [type] Attribute type, i.e. number of bytes used to store the value. This is\r\n * determined by the class of typed array which the buffer uses (eg. `Float32Array` for a `FLOAT` attribute).\r\n * Default is `FLOAT`.\r\n */\r\n\r\n/**\r\n * @typedef {number|Array<number>|HTMLCanvasElement|HTMLImageElement|ImageData|WebGLTexture|import(\"../transform\").Transform} UniformLiteralValue\r\n */\r\n\r\n/**\r\n * Uniform value can be a number, array of numbers (2 to 4), canvas element or a callback returning\r\n * one of the previous types.\r\n * @typedef {UniformLiteralValue|function(import(\"../Map.js\").FrameState):UniformLiteralValue} UniformValue\r\n */\r\n\r\n/**\r\n * @typedef {Object} PostProcessesOptions\r\n * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than\r\n * the main canvas which will then be sampled up (useful for saving resource on blur steps).\r\n * @property {string} [vertexShader] Vertex shader source\r\n * @property {string} [fragmentShader] Fragment shader source\r\n * @property {Object<string,UniformValue>} [uniforms] Uniform definitions for the post process step\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {Object<string,UniformValue>} [uniforms] Uniform definitions; property names must match the uniform\r\n * names in the provided or default shaders.\r\n * @property {Array<PostProcessesOptions>} [postProcesses] Post-processes definitions\r\n * @property {string} [canvasCacheKey] The cache key for the canvas.\r\n */\r\n\r\n/**\r\n * @typedef {Object} UniformInternalDescription\r\n * @property {string} name Name\r\n * @property {UniformValue} [value] Value\r\n * @property {UniformValue} [prevValue] The previous value.\r\n * @property {WebGLTexture} [texture] Texture\r\n * @private\r\n */\r\n\r\n/**\r\n * @typedef {Object} CanvasCacheItem\r\n * @property {WebGLRenderingContext} context The context of this canvas.\r\n * @property {number} users The count of users of this canvas.\r\n */\r\n\r\n/**\r\n * @type {Object<string,CanvasCacheItem>}\r\n */\r\nconst canvasCache = {};\r\n\r\n/**\r\n * @param {string} key The cache key for the canvas.\r\n * @return {string} The shared cache key.\r\n */\r\nfunction getSharedCanvasCacheKey(key) {\r\n  return 'shared/' + key;\r\n}\r\n\r\nlet uniqueCanvasCacheKeyCount = 0;\r\n\r\n/**\r\n * @return {string} The unique cache key.\r\n */\r\nfunction getUniqueCanvasCacheKey() {\r\n  const key = 'unique/' + uniqueCanvasCacheKeyCount;\r\n  uniqueCanvasCacheKeyCount += 1;\r\n  return key;\r\n}\r\n\r\n/**\r\n * @param {string} key The cache key for the canvas.\r\n * @return {WebGLRenderingContext} The canvas.\r\n */\r\nfunction getOrCreateContext(key) {\r\n  let cacheItem = canvasCache[key];\r\n  if (!cacheItem) {\r\n    const canvas = document.createElement('canvas');\r\n    canvas.width = 1;\r\n    canvas.height = 1;\r\n    canvas.style.position = 'absolute';\r\n    canvas.style.left = '0';\r\n    const context = getContext(canvas);\r\n    cacheItem = {users: 0, context};\r\n    canvasCache[key] = cacheItem;\r\n  }\r\n\r\n  cacheItem.users += 1;\r\n  return cacheItem.context;\r\n}\r\n\r\n/**\r\n * @param {string} key The cache key for the canvas.\r\n */\r\nfunction releaseCanvas(key) {\r\n  const cacheItem = canvasCache[key];\r\n  if (!cacheItem) {\r\n    return;\r\n  }\r\n\r\n  cacheItem.users -= 1;\r\n  if (cacheItem.users > 0) {\r\n    return;\r\n  }\r\n\r\n  const gl = cacheItem.context;\r\n  const extension = gl.getExtension('WEBGL_lose_context');\r\n  if (extension) {\r\n    extension.loseContext();\r\n  }\r\n  const canvas = gl.canvas;\r\n  canvas.width = 1;\r\n  canvas.height = 1;\r\n\r\n  delete canvasCache[key];\r\n}\r\n\r\n/**\r\n * @classdesc\r\n * This class is intended to provide low-level functions related to WebGL rendering, so that accessing\r\n * directly the WebGL API should not be required anymore.\r\n *\r\n * Several operations are handled by the `WebGLHelper` class:\r\n *\r\n * ### Define custom shaders and uniforms\r\n *\r\n *   Shaders* are low-level programs executed on the GPU and written in GLSL. There are two types of shaders:\r\n *\r\n *   Vertex shaders are used to manipulate the position and attribute of *vertices* of rendered primitives (ie. corners of a square).\r\n *   Outputs are:\r\n *\r\n *   `gl_Position`: position of the vertex in screen space\r\n *\r\n *   Varyings usually prefixed with `v_` are passed on to the fragment shader\r\n *\r\n *   Fragment shaders are used to control the actual color of the pixels drawn on screen. Their only output is `gl_FragColor`.\r\n *\r\n *   Both shaders can take *uniforms* or *attributes* as input. Attributes are explained later. Uniforms are common, read-only values that\r\n *   can be changed at every frame and can be of type float, arrays of float or images.\r\n *\r\n *   Shaders must be compiled and assembled into a program like so:\r\n *   ```js\r\n *   // here we simply create two shaders and assemble them in a program which is then used\r\n *   // for subsequent rendering calls; note how a frameState is required to set up a program,\r\n *   // as several default uniforms are computed from it (projection matrix, zoom level, etc.)\r\n *   const vertexShader = new WebGLVertex(VERTEX_SHADER);\r\n *   const fragmentShader = new WebGLFragment(FRAGMENT_SHADER);\r\n *   const program = this.context.getProgram(fragmentShader, vertexShader);\r\n *   helper.useProgram(this.program, frameState);\r\n *   ```\r\n *\r\n *   Uniforms are defined using the `uniforms` option and can either be explicit values or callbacks taking the frame state as argument.\r\n *   You can also change their value along the way like so:\r\n *   ```js\r\n *   helper.setUniformFloatValue('u_value', valueAsNumber);\r\n *   ```\r\n *\r\n * ### Defining post processing passes\r\n *\r\n *   Post processing* describes the act of rendering primitives to a texture, and then rendering this texture to the final canvas\r\n *   while applying special effects in screen space.\r\n *   Typical uses are: blurring, color manipulation, depth of field, filtering...\r\n *\r\n *   The `WebGLHelper` class offers the possibility to define post processes at creation time using the `postProcesses` option.\r\n *   A post process step accepts the following options:\r\n *\r\n *   `fragmentShader` and `vertexShader`: text literals in GLSL language that will be compiled and used in the post processing step.\r\n *   `uniforms`: uniforms can be defined for the post processing steps just like for the main render.\r\n *   `scaleRatio`: allows using an intermediate texture smaller or higher than the final canvas in the post processing step.\r\n *     This is typically used in blur steps to reduce the performance overhead by using an already downsampled texture as input.\r\n *\r\n *   The {@link module:ol/webgl/PostProcessingPass~WebGLPostProcessingPass} class is used internally, refer to its documentation for more info.\r\n *\r\n * ### Binding WebGL buffers and flushing data into them\r\n *\r\n *   Data that must be passed to the GPU has to be transferred using {@link module:ol/webgl/Buffer~WebGLArrayBuffer} objects.\r\n *   A buffer has to be created only once, but must be bound every time the buffer content will be used for rendering.\r\n *   This is done using {@link bindBuffer}.\r\n *   When the buffer's array content has changed, the new data has to be flushed to the GPU memory; this is done using\r\n *   {@link flushBufferData}. Note: this operation is expensive and should be done as infrequently as possible.\r\n *\r\n *   When binding an array buffer, a `target` parameter must be given: it should be either {@link module:ol/webgl.ARRAY_BUFFER}\r\n *   (if the buffer contains vertices data) or {@link module:ol/webgl.ELEMENT_ARRAY_BUFFER} (if the buffer contains indices data).\r\n *\r\n *   Examples below:\r\n *   ```js\r\n *   // at initialization phase\r\n *   const verticesBuffer = new WebGLArrayBuffer([], DYNAMIC_DRAW);\r\n *   const indicesBuffer = new WebGLArrayBuffer([], DYNAMIC_DRAW);\r\n *\r\n *   // when array values have changed\r\n *   helper.flushBufferData(ARRAY_BUFFER, this.verticesBuffer);\r\n *   helper.flushBufferData(ELEMENT_ARRAY_BUFFER, this.indicesBuffer);\r\n *\r\n *   // at rendering phase\r\n *   helper.bindBuffer(ARRAY_BUFFER, this.verticesBuffer);\r\n *   helper.bindBuffer(ELEMENT_ARRAY_BUFFER, this.indicesBuffer);\r\n *   ```\r\n *\r\n * ### Specifying attributes\r\n *\r\n *   The GPU only receives the data as arrays of numbers. These numbers must be handled differently depending on what it describes (position, texture coordinate...).\r\n *   Attributes are used to specify these uses. Specify the attribute names with\r\n *   {@link module:ol/webgl/Helper~WebGLHelper#enableAttributes} (see code snippet below).\r\n *\r\n *   Please note that you will have to specify the type and offset of the attributes in the data array. You can refer to the documentation of [WebGLRenderingContext.vertexAttribPointer](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer) for more explanation.\r\n *   ```js\r\n *   // here we indicate that the data array has the following structure:\r\n *   // [posX, posY, offsetX, offsetY, texCoordU, texCoordV, posX, posY, ...]\r\n *   helper.enableAttributes([\r\n *     {\r\n *        name: 'a_position',\r\n *        size: 2\r\n *     },\r\n *     {\r\n *       name: 'a_offset',\r\n *       size: 2\r\n *     },\r\n *     {\r\n *       name: 'a_texCoord',\r\n *       size: 2\r\n *     }\r\n *   ])\r\n *   ```\r\n *\r\n * ### Rendering primitives\r\n *\r\n *   Once all the steps above have been achieved, rendering primitives to the screen is done using {@link prepareDraw}, {@link drawElements} and {@link finalizeDraw}.\r\n *   ```js\r\n *   // frame preparation step\r\n *   helper.prepareDraw(frameState);\r\n *\r\n *   // call this for every data array that has to be rendered on screen\r\n *   helper.drawElements(0, this.indicesBuffer.getArray().length);\r\n *\r\n *   // finalize the rendering by applying post processes\r\n *   helper.finalizeDraw(frameState);\r\n *   ```\r\n *\r\n * For an example usage of this class, refer to {@link module:ol/renderer/webgl/PointsLayer~WebGLPointsLayerRenderer}.\r\n */\r\nclass WebGLHelper extends Disposable {\r\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    super();\r\n    options = options || {};\r\n\r\n    /** @private */\r\n    this.boundHandleWebGLContextLost_ = this.handleWebGLContextLost.bind(this);\r\n\r\n    /** @private */\r\n    this.boundHandleWebGLContextRestored_ =\r\n      this.handleWebGLContextRestored.bind(this);\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.canvasCacheKey_ = options.canvasCacheKey\r\n      ? getSharedCanvasCacheKey(options.canvasCacheKey)\r\n      : getUniqueCanvasCacheKey();\r\n\r\n    /**\r\n     * @private\r\n     * @type {WebGLRenderingContext}\r\n     */\r\n    this.gl_ = getOrCreateContext(this.canvasCacheKey_);\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Object<string, BufferCacheEntry>}\r\n     */\r\n    this.bufferCache_ = {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {Object<string, Object>}\r\n     */\r\n    this.extensionCache_ = {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {WebGLProgram}\r\n     */\r\n    this.currentProgram_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.needsToBeRecreated_ = false;\r\n\r\n    const canvas = this.gl_.canvas;\r\n\r\n    canvas.addEventListener(\r\n      ContextEventType.LOST,\r\n      this.boundHandleWebGLContextLost_,\r\n    );\r\n    canvas.addEventListener(\r\n      ContextEventType.RESTORED,\r\n      this.boundHandleWebGLContextRestored_,\r\n    );\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../transform.js\").Transform}\r\n     */\r\n    this.offsetRotateMatrix_ = createTransform();\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../transform.js\").Transform}\r\n     */\r\n    this.offsetScaleMatrix_ = createTransform();\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */\r\n    this.tmpMat4_ = create();\r\n\r\n    /**\r\n     * @private\r\n     * @type {Object<string, Object<string, WebGLUniformLocation>>}\r\n     */\r\n    this.uniformLocationsByProgram_ = {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {Object<string, Object<string, number>>}\r\n     */\r\n    this.attribLocationsByProgram_ = {};\r\n\r\n    /**\r\n     * Holds info about custom uniforms used in the post processing pass.\r\n     * If the uniform is a texture, the WebGL Texture object will be stored here.\r\n     * @type {Array<UniformInternalDescription>}\r\n     * @private\r\n     */\r\n    this.uniforms_ = [];\r\n    if (options.uniforms) {\r\n      this.setUniforms(options.uniforms);\r\n    }\r\n\r\n    /**\r\n     * An array of PostProcessingPass objects is kept in this variable, built from the steps provided in the\r\n     * options. If no post process was given, a default one is used (so as not to have to make an exception to\r\n     * the frame buffer logic).\r\n     * @type {Array<WebGLPostProcessingPass>}\r\n     * @private\r\n     */\r\n    this.postProcessPasses_ = options.postProcesses\r\n      ? options.postProcesses.map(\r\n          (options) =>\r\n            new WebGLPostProcessingPass({\r\n              webGlContext: this.gl_,\r\n              scaleRatio: options.scaleRatio,\r\n              vertexShader: options.vertexShader,\r\n              fragmentShader: options.fragmentShader,\r\n              uniforms: options.uniforms,\r\n            }),\r\n        )\r\n      : [new WebGLPostProcessingPass({webGlContext: this.gl_})];\r\n\r\n    /**\r\n     * @type {string|null}\r\n     * @private\r\n     */\r\n    this.shaderCompileErrors_ = null;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.startTime_ = Date.now();\r\n  }\r\n\r\n  /**\r\n   * @param {Object<string, UniformValue>} uniforms Uniform definitions.\r\n   */\r\n  setUniforms(uniforms) {\r\n    this.uniforms_ = [];\r\n    this.addUniforms(uniforms);\r\n  }\r\n\r\n  /**\r\n   * @param {Object<string, UniformValue>} uniforms Uniform definitions.\r\n   */\r\n  addUniforms(uniforms) {\r\n    for (const name in uniforms) {\r\n      this.uniforms_.push({\r\n        name: name,\r\n        value: uniforms[name],\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {string} canvasCacheKey The canvas cache key.\r\n   * @return {boolean} The provided key matches the one this helper was constructed with.\r\n   */\r\n  canvasCacheKeyMatches(canvasCacheKey) {\r\n    return this.canvasCacheKey_ === getSharedCanvasCacheKey(canvasCacheKey);\r\n  }\r\n\r\n  /**\r\n   * Get a WebGL extension.  If the extension is not supported, null is returned.\r\n   * Extensions are cached after they are enabled for the first time.\r\n   * @param {string} name The extension name.\r\n   * @return {Object|null} The extension or null if not supported.\r\n   */\r\n  getExtension(name) {\r\n    if (name in this.extensionCache_) {\r\n      return this.extensionCache_[name];\r\n    }\r\n    const extension = this.gl_.getExtension(name);\r\n    this.extensionCache_[name] = extension;\r\n    return extension;\r\n  }\r\n\r\n  /**\r\n   * Just bind the buffer if it's in the cache. Otherwise create\r\n   * the WebGL buffer, bind it, populate it, and add an entry to\r\n   * the cache.\r\n   * @param {import(\"./Buffer\").default} buffer Buffer.\r\n   */\r\n  bindBuffer(buffer) {\r\n    const gl = this.gl_;\r\n    const bufferKey = getUid(buffer);\r\n    let bufferCache = this.bufferCache_[bufferKey];\r\n    if (!bufferCache) {\r\n      const webGlBuffer = gl.createBuffer();\r\n      bufferCache = {\r\n        buffer: buffer,\r\n        webGlBuffer: webGlBuffer,\r\n      };\r\n      this.bufferCache_[bufferKey] = bufferCache;\r\n    }\r\n    gl.bindBuffer(buffer.getType(), bufferCache.webGlBuffer);\r\n  }\r\n\r\n  /**\r\n   * Update the data contained in the buffer array; this is required for the\r\n   * new data to be rendered\r\n   * @param {import(\"./Buffer\").default} buffer Buffer.\r\n   */\r\n  flushBufferData(buffer) {\r\n    const gl = this.gl_;\r\n    this.bindBuffer(buffer);\r\n    gl.bufferData(buffer.getType(), buffer.getArray(), buffer.getUsage());\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"./Buffer.js\").default} buf Buffer.\r\n   */\r\n  deleteBuffer(buf) {\r\n    const bufferKey = getUid(buf);\r\n    // Note: gl.deleteBuffer is not called here since we let WebGL garbage collect it automatically\r\n    delete this.bufferCache_[bufferKey];\r\n  }\r\n\r\n  /**\r\n   * Clean up.\r\n   * @override\r\n   */\r\n  disposeInternal() {\r\n    const canvas = this.gl_.canvas;\r\n    canvas.removeEventListener(\r\n      ContextEventType.LOST,\r\n      this.boundHandleWebGLContextLost_,\r\n    );\r\n    canvas.removeEventListener(\r\n      ContextEventType.RESTORED,\r\n      this.boundHandleWebGLContextRestored_,\r\n    );\r\n\r\n    releaseCanvas(this.canvasCacheKey_);\r\n\r\n    delete this.gl_;\r\n  }\r\n\r\n  /**\r\n   * Clear the buffer & set the viewport to draw.\r\n   * Post process passes will be initialized here, the first one being bound as a render target for\r\n   * subsequent draw calls.\r\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\r\n   * @param {boolean} [disableAlphaBlend] If true, no alpha blending will happen.\r\n   * @param {boolean} [enableDepth] If true, enables depth testing.\r\n   */\r\n  prepareDraw(frameState, disableAlphaBlend, enableDepth) {\r\n    const gl = this.gl_;\r\n    const canvas = this.getCanvas();\r\n    const size = frameState.size;\r\n    const pixelRatio = frameState.pixelRatio;\r\n\r\n    if (\r\n      canvas.width !== size[0] * pixelRatio ||\r\n      canvas.height !== size[1] * pixelRatio\r\n    ) {\r\n      canvas.width = size[0] * pixelRatio;\r\n      canvas.height = size[1] * pixelRatio;\r\n      canvas.style.width = size[0] + 'px';\r\n      canvas.style.height = size[1] + 'px';\r\n    }\r\n\r\n    // loop backwards in post processes list\r\n    for (let i = this.postProcessPasses_.length - 1; i >= 0; i--) {\r\n      this.postProcessPasses_[i].init(frameState);\r\n    }\r\n\r\n    gl.bindTexture(gl.TEXTURE_2D, null);\r\n\r\n    gl.clearColor(0.0, 0.0, 0.0, 0.0);\r\n    gl.depthRange(0.0, 1.0);\r\n    gl.clearDepth(1.0);\r\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n    gl.enable(gl.BLEND);\r\n    gl.blendFunc(gl.ONE, disableAlphaBlend ? gl.ZERO : gl.ONE_MINUS_SRC_ALPHA);\r\n    if (enableDepth) {\r\n      gl.enable(gl.DEPTH_TEST);\r\n      gl.depthFunc(gl.LEQUAL);\r\n    } else {\r\n      gl.disable(gl.DEPTH_TEST);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {WebGLFramebuffer|null} frameBuffer The frame buffer.\r\n   * @param {WebGLTexture} [texture] The texture.\r\n   */\r\n  bindFrameBuffer(frameBuffer, texture) {\r\n    const gl = this.getGL();\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\r\n    if (texture) {\r\n      gl.framebufferTexture2D(\r\n        gl.FRAMEBUFFER,\r\n        gl.COLOR_ATTACHMENT0,\r\n        gl.TEXTURE_2D,\r\n        texture,\r\n        0,\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Bind the frame buffer from the initial render.\r\n   */\r\n  bindInitialFrameBuffer() {\r\n    const gl = this.getGL();\r\n    const frameBuffer = this.postProcessPasses_[0].getFrameBuffer();\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\r\n    const texture = this.postProcessPasses_[0].getRenderTargetTexture();\r\n    gl.framebufferTexture2D(\r\n      gl.FRAMEBUFFER,\r\n      gl.COLOR_ATTACHMENT0,\r\n      gl.TEXTURE_2D,\r\n      texture,\r\n      0,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Prepare a program to use a texture.\r\n   * @param {WebGLTexture} texture The texture.\r\n   * @param {number} slot The texture slot.\r\n   * @param {string} uniformName The corresponding uniform name.\r\n   */\r\n  bindTexture(texture, slot, uniformName) {\r\n    const gl = this.gl_;\r\n    gl.activeTexture(gl.TEXTURE0 + slot);\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.uniform1i(this.getUniformLocation(uniformName), slot);\r\n  }\r\n\r\n  /**\r\n   * Set up an attribute array buffer for use in the vertex shader.\r\n   * @param {import(\"./Buffer\").default} buffer The buffer.\r\n   * @param {string} attributeName The attribute name.\r\n   * @param {number} size The number of components per attribute vertex.\r\n   */\r\n  bindAttribute(buffer, attributeName, size) {\r\n    const gl = this.getGL();\r\n    this.bindBuffer(buffer);\r\n    const index = this.getAttributeLocation(attributeName);\r\n    gl.enableVertexAttribArray(index);\r\n    gl.vertexAttribPointer(index, size, gl.FLOAT, false, 0, 0);\r\n  }\r\n\r\n  /**\r\n   * Clear the render target & bind it for future draw operations.\r\n   * This is similar to `prepareDraw`, only post processes will not be applied.\r\n   * Note: the whole viewport will be drawn to the render target, regardless of its size.\r\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\r\n   * @param {import(\"./RenderTarget.js\").default} renderTarget Render target to draw to\r\n   * @param {boolean} [disableAlphaBlend] If true, no alpha blending will happen.\r\n   * @param {boolean} [enableDepth] If true, enables depth testing.\r\n   */\r\n  prepareDrawToRenderTarget(\r\n    frameState,\r\n    renderTarget,\r\n    disableAlphaBlend,\r\n    enableDepth,\r\n  ) {\r\n    const gl = this.gl_;\r\n    const size = renderTarget.getSize();\r\n\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, renderTarget.getFramebuffer());\r\n    gl.bindRenderbuffer(gl.RENDERBUFFER, renderTarget.getDepthbuffer());\r\n    gl.viewport(0, 0, size[0], size[1]);\r\n    gl.bindTexture(gl.TEXTURE_2D, renderTarget.getTexture());\r\n    gl.clearColor(0.0, 0.0, 0.0, 0.0);\r\n    gl.depthRange(0.0, 1.0);\r\n    gl.clearDepth(1.0);\r\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n    gl.enable(gl.BLEND);\r\n    gl.blendFunc(gl.ONE, disableAlphaBlend ? gl.ZERO : gl.ONE_MINUS_SRC_ALPHA);\r\n    if (enableDepth) {\r\n      gl.enable(gl.DEPTH_TEST);\r\n      gl.depthFunc(gl.LEQUAL);\r\n    } else {\r\n      gl.disable(gl.DEPTH_TEST);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Execute a draw call based on the currently bound program, texture, buffers, attributes.\r\n   * @param {number} start Start index.\r\n   * @param {number} end End index.\r\n   */\r\n  drawElements(start, end) {\r\n    const gl = this.gl_;\r\n    this.getExtension('OES_element_index_uint');\r\n\r\n    const elementType = gl.UNSIGNED_INT;\r\n    const elementSize = 4;\r\n\r\n    const numItems = end - start;\r\n    const offsetInBytes = start * elementSize;\r\n    gl.drawElements(gl.TRIANGLES, numItems, elementType, offsetInBytes);\r\n  }\r\n\r\n  /**\r\n   * Apply the successive post process passes which will eventually render to the actual canvas.\r\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\r\n   * @param {function(WebGLRenderingContext, import(\"../Map.js\").FrameState):void} [preCompose] Called before composing.\r\n   * @param {function(WebGLRenderingContext, import(\"../Map.js\").FrameState):void} [postCompose] Called before composing.\r\n   */\r\n  finalizeDraw(frameState, preCompose, postCompose) {\r\n    // apply post processes using the next one as target\r\n    for (let i = 0, ii = this.postProcessPasses_.length; i < ii; i++) {\r\n      if (i === ii - 1) {\r\n        this.postProcessPasses_[i].apply(\r\n          frameState,\r\n          null,\r\n          preCompose,\r\n          postCompose,\r\n        );\r\n      } else {\r\n        this.postProcessPasses_[i].apply(\r\n          frameState,\r\n          this.postProcessPasses_[i + 1],\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @return {HTMLCanvasElement} Canvas.\r\n   */\r\n  getCanvas() {\r\n    return /** @type {HTMLCanvasElement} */ (this.gl_.canvas);\r\n  }\r\n\r\n  /**\r\n   * Get the WebGL rendering context\r\n   * @return {WebGLRenderingContext} The rendering context.\r\n   */\r\n  getGL() {\r\n    return this.gl_;\r\n  }\r\n\r\n  /**\r\n   * Sets the default matrix uniforms for a given frame state. This is called internally in `prepareDraw`.\r\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\r\n   */\r\n  applyFrameState(frameState) {\r\n    const size = frameState.size;\r\n    const rotation = frameState.viewState.rotation;\r\n    const pixelRatio = frameState.pixelRatio;\r\n\r\n    this.setUniformFloatValue(\r\n      DefaultUniform.TIME,\r\n      (Date.now() - this.startTime_) * 0.001,\r\n    );\r\n    this.setUniformFloatValue(DefaultUniform.ZOOM, frameState.viewState.zoom);\r\n    this.setUniformFloatValue(\r\n      DefaultUniform.RESOLUTION,\r\n      frameState.viewState.resolution,\r\n    );\r\n    this.setUniformFloatValue(DefaultUniform.PIXEL_RATIO, pixelRatio);\r\n    this.setUniformFloatVec2(DefaultUniform.VIEWPORT_SIZE_PX, [\r\n      size[0],\r\n      size[1],\r\n    ]);\r\n    this.setUniformFloatValue(DefaultUniform.ROTATION, rotation);\r\n  }\r\n\r\n  /**\r\n   * Sets the `u_hitDetection` uniform.\r\n   * @param {boolean} enabled Whether to enable the hit detection code path\r\n   */\r\n  applyHitDetectionUniform(enabled) {\r\n    const loc = this.getUniformLocation(DefaultUniform.HIT_DETECTION);\r\n    this.getGL().uniform1i(loc, enabled ? 1 : 0);\r\n\r\n    // hit detection uses a fixed pixel ratio\r\n    if (enabled) {\r\n      this.setUniformFloatValue(DefaultUniform.PIXEL_RATIO, 0.5);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the custom uniforms based on what was given in the constructor. This is called internally in `prepareDraw`.\r\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\r\n   */\r\n  applyUniforms(frameState) {\r\n    const gl = this.gl_;\r\n\r\n    let value;\r\n    let textureSlot = 0;\r\n    this.uniforms_.forEach((uniform) => {\r\n      value =\r\n        typeof uniform.value === 'function'\r\n          ? uniform.value(frameState)\r\n          : uniform.value;\r\n\r\n      // apply value based on type\r\n      if (\r\n        value instanceof HTMLCanvasElement ||\r\n        value instanceof HTMLImageElement ||\r\n        value instanceof ImageData ||\r\n        value instanceof WebGLTexture\r\n      ) {\r\n        // create a texture & put data\r\n        if (value instanceof WebGLTexture && !uniform.texture) {\r\n          uniform.prevValue = undefined;\r\n          uniform.texture = value;\r\n        } else if (!uniform.texture) {\r\n          uniform.prevValue = undefined;\r\n          uniform.texture = gl.createTexture();\r\n        }\r\n        this.bindTexture(uniform.texture, textureSlot, uniform.name);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n\r\n        const imageReady =\r\n          !(value instanceof HTMLImageElement) ||\r\n          /** @type {HTMLImageElement} */ (value).complete;\r\n        if (\r\n          !(value instanceof WebGLTexture) &&\r\n          imageReady &&\r\n          uniform.prevValue !== value\r\n        ) {\r\n          uniform.prevValue = value;\r\n          gl.texImage2D(\r\n            gl.TEXTURE_2D,\r\n            0,\r\n            gl.RGBA,\r\n            gl.RGBA,\r\n            gl.UNSIGNED_BYTE,\r\n            value,\r\n          );\r\n        }\r\n        textureSlot++;\r\n      } else if (Array.isArray(value) && value.length === 6) {\r\n        this.setUniformMatrixValue(\r\n          uniform.name,\r\n          fromTransform(this.tmpMat4_, value),\r\n        );\r\n      } else if (Array.isArray(value) && value.length <= 4) {\r\n        switch (value.length) {\r\n          case 2:\r\n            gl.uniform2f(\r\n              this.getUniformLocation(uniform.name),\r\n              value[0],\r\n              value[1],\r\n            );\r\n            return;\r\n          case 3:\r\n            gl.uniform3f(\r\n              this.getUniformLocation(uniform.name),\r\n              value[0],\r\n              value[1],\r\n              value[2],\r\n            );\r\n            return;\r\n          case 4:\r\n            gl.uniform4f(\r\n              this.getUniformLocation(uniform.name),\r\n              value[0],\r\n              value[1],\r\n              value[2],\r\n              value[3],\r\n            );\r\n            return;\r\n          default:\r\n            return;\r\n        }\r\n      } else if (typeof value === 'number') {\r\n        gl.uniform1f(this.getUniformLocation(uniform.name), value);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Set up a program for use. The program will be set as the current one. Then, the uniforms used\r\n   * in the program will be set based on the current frame state and the helper configuration.\r\n   * @param {WebGLProgram} program Program.\r\n   * @param {import(\"../Map.js\").FrameState} [frameState] Frame state.\r\n   */\r\n  useProgram(program, frameState) {\r\n    const gl = this.gl_;\r\n    gl.useProgram(program);\r\n    this.currentProgram_ = program;\r\n    if (frameState) {\r\n      this.applyFrameState(frameState);\r\n      this.applyUniforms(frameState);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Will attempt to compile a vertex or fragment shader based on source\r\n   * On error, the shader will be returned but\r\n   * `gl.getShaderParameter(shader, gl.COMPILE_STATUS)` will return `true`\r\n   * Use `gl.getShaderInfoLog(shader)` to have details\r\n   * @param {string} source Shader source\r\n   * @param {ShaderType} type VERTEX_SHADER or FRAGMENT_SHADER\r\n   * @return {WebGLShader} Shader object\r\n   */\r\n  compileShader(source, type) {\r\n    const gl = this.gl_;\r\n    const shader = gl.createShader(type);\r\n    gl.shaderSource(shader, source);\r\n    gl.compileShader(shader);\r\n    return shader;\r\n  }\r\n\r\n  /**\r\n   * Create a program for a vertex and fragment shader.  Throws if shader compilation fails.\r\n   * @param {string} fragmentShaderSource Fragment shader source.\r\n   * @param {string} vertexShaderSource Vertex shader source.\r\n   * @return {WebGLProgram} Program\r\n   */\r\n  getProgram(fragmentShaderSource, vertexShaderSource) {\r\n    const gl = this.gl_;\r\n\r\n    const fragmentShader = this.compileShader(\r\n      fragmentShaderSource,\r\n      gl.FRAGMENT_SHADER,\r\n    );\r\n\r\n    const vertexShader = this.compileShader(\r\n      vertexShaderSource,\r\n      gl.VERTEX_SHADER,\r\n    );\r\n\r\n    const program = gl.createProgram();\r\n    gl.attachShader(program, fragmentShader);\r\n    gl.attachShader(program, vertexShader);\r\n    gl.linkProgram(program);\r\n\r\n    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\r\n      const message = `Fragment shader compilation failed: ${gl.getShaderInfoLog(\r\n        fragmentShader,\r\n      )}`;\r\n      throw new Error(message);\r\n    }\r\n    gl.deleteShader(fragmentShader);\r\n\r\n    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\r\n      const message = `Vertex shader compilation failed: ${gl.getShaderInfoLog(\r\n        vertexShader,\r\n      )}`;\r\n      throw new Error(message);\r\n    }\r\n    gl.deleteShader(vertexShader);\r\n\r\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n      const message = `GL program linking failed: ${gl.getProgramInfoLog(\r\n        program,\r\n      )}`;\r\n      throw new Error(message);\r\n    }\r\n\r\n    return program;\r\n  }\r\n\r\n  /**\r\n   * Will get the location from the shader or the cache\r\n   * @param {string} name Uniform name\r\n   * @return {WebGLUniformLocation} uniformLocation\r\n   */\r\n  getUniformLocation(name) {\r\n    const programUid = getUid(this.currentProgram_);\r\n    if (this.uniformLocationsByProgram_[programUid] === undefined) {\r\n      this.uniformLocationsByProgram_[programUid] = {};\r\n    }\r\n    if (this.uniformLocationsByProgram_[programUid][name] === undefined) {\r\n      this.uniformLocationsByProgram_[programUid][name] =\r\n        this.gl_.getUniformLocation(this.currentProgram_, name);\r\n    }\r\n    return this.uniformLocationsByProgram_[programUid][name];\r\n  }\r\n\r\n  /**\r\n   * Will get the location from the shader or the cache\r\n   * @param {string} name Attribute name\r\n   * @return {number} attribLocation\r\n   */\r\n  getAttributeLocation(name) {\r\n    const programUid = getUid(this.currentProgram_);\r\n    if (this.attribLocationsByProgram_[programUid] === undefined) {\r\n      this.attribLocationsByProgram_[programUid] = {};\r\n    }\r\n    if (this.attribLocationsByProgram_[programUid][name] === undefined) {\r\n      this.attribLocationsByProgram_[programUid][name] =\r\n        this.gl_.getAttribLocation(this.currentProgram_, name);\r\n    }\r\n    return this.attribLocationsByProgram_[programUid][name];\r\n  }\r\n\r\n  /**\r\n   * Sets the given transform to apply the rotation/translation/scaling of the given frame state.\r\n   * The resulting transform can be used to convert world space coordinates to view coordinates in the [-1, 1] range.\r\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\r\n   * @param {import(\"../transform\").Transform} transform Transform to update.\r\n   * @return {import(\"../transform\").Transform} The updated transform object.\r\n   */\r\n  makeProjectionTransform(frameState, transform) {\r\n    const size = frameState.size;\r\n    const rotation = frameState.viewState.rotation;\r\n    const resolution = frameState.viewState.resolution;\r\n    const center = frameState.viewState.center;\r\n    composeTransform(\r\n      transform,\r\n      0,\r\n      0,\r\n      2 / (resolution * size[0]),\r\n      2 / (resolution * size[1]),\r\n      -rotation,\r\n      -center[0],\r\n      -center[1],\r\n    );\r\n    return transform;\r\n  }\r\n\r\n  /**\r\n   * Give a value for a standard float uniform\r\n   * @param {string} uniform Uniform name\r\n   * @param {number} value Value\r\n   */\r\n  setUniformFloatValue(uniform, value) {\r\n    this.gl_.uniform1f(this.getUniformLocation(uniform), value);\r\n  }\r\n\r\n  /**\r\n   * Give a value for a vec2 uniform\r\n   * @param {string} uniform Uniform name\r\n   * @param {Array<number>} value Array of length 4.\r\n   */\r\n  setUniformFloatVec2(uniform, value) {\r\n    this.gl_.uniform2fv(this.getUniformLocation(uniform), value);\r\n  }\r\n\r\n  /**\r\n   * Give a value for a vec4 uniform\r\n   * @param {string} uniform Uniform name\r\n   * @param {Array<number>} value Array of length 4.\r\n   */\r\n  setUniformFloatVec4(uniform, value) {\r\n    this.gl_.uniform4fv(this.getUniformLocation(uniform), value);\r\n  }\r\n\r\n  /**\r\n   * Give a value for a standard matrix4 uniform\r\n   * @param {string} uniform Uniform name\r\n   * @param {Array<number>} value Matrix value\r\n   */\r\n  setUniformMatrixValue(uniform, value) {\r\n    this.gl_.uniformMatrix4fv(this.getUniformLocation(uniform), false, value);\r\n  }\r\n\r\n  /**\r\n   * Will set the currently bound buffer to an attribute of the shader program. Used by `#enableAttributes`\r\n   * internally.\r\n   * @param {string} attribName Attribute name\r\n   * @param {number} size Number of components per attributes\r\n   * @param {number} type UNSIGNED_INT, UNSIGNED_BYTE, UNSIGNED_SHORT or FLOAT\r\n   * @param {number} stride Stride in bytes (0 means attribs are packed)\r\n   * @param {number} offset Offset in bytes\r\n   * @private\r\n   */\r\n  enableAttributeArray_(attribName, size, type, stride, offset) {\r\n    const location = this.getAttributeLocation(attribName);\r\n    // the attribute has not been found in the shaders or is not used; do not enable it\r\n    if (location < 0) {\r\n      return;\r\n    }\r\n    this.gl_.enableVertexAttribArray(location);\r\n    this.gl_.vertexAttribPointer(location, size, type, false, stride, offset);\r\n  }\r\n\r\n  /**\r\n   * Will enable the following attributes to be read from the currently bound buffer,\r\n   * i.e. tell the GPU where to read the different attributes in the buffer. An error in the\r\n   * size/type/order of attributes will most likely break the rendering and throw a WebGL exception.\r\n   * @param {Array<AttributeDescription>} attributes Ordered list of attributes to read from the buffer\r\n   */\r\n  enableAttributes(attributes) {\r\n    const stride = computeAttributesStride(attributes);\r\n    let offset = 0;\r\n    for (let i = 0; i < attributes.length; i++) {\r\n      const attr = attributes[i];\r\n      this.enableAttributeArray_(\r\n        attr.name,\r\n        attr.size,\r\n        attr.type || FLOAT,\r\n        stride,\r\n        offset,\r\n      );\r\n      offset += attr.size * getByteSizeFromType(attr.type);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * WebGL context was lost\r\n   * @param {WebGLContextEvent} event The context loss event.\r\n   * @private\r\n   */\r\n  handleWebGLContextLost(event) {\r\n    clear(this.bufferCache_);\r\n    this.currentProgram_ = null;\r\n\r\n    event.preventDefault();\r\n  }\r\n\r\n  /**\r\n   * WebGL context was restored\r\n   * @private\r\n   */\r\n  handleWebGLContextRestored() {\r\n    this.needsToBeRecreated_ = true;\r\n  }\r\n\r\n  /**\r\n   * Returns whether this helper needs to be recreated, as the context was lost and then restored.\r\n   * @return {boolean} Whether this helper needs to be recreated.\r\n   */\r\n  needsToBeRecreated() {\r\n    return this.needsToBeRecreated_;\r\n  }\r\n\r\n  /**\r\n   * Will create or reuse a given webgl texture and apply the given size. If no image data\r\n   * specified, the texture will be empty, otherwise image data will be used and the `size`\r\n   * parameter will be ignored.  If a Uint8Array is provided for data, a size must also be provided.\r\n   * Note: wrap parameters are set to clamp to edge, min filter is set to linear.\r\n   * @param {Array<number>} size Expected size of the texture\r\n   * @param {ImageData|HTMLImageElement|HTMLCanvasElement|Uint8Array|null} data Image data/object to bind to the texture\r\n   * @param {WebGLTexture} [texture] Existing texture to reuse\r\n   * @param {boolean} [nearest] Use gl.NEAREST for min/mag filter.\r\n   * @return {WebGLTexture} The generated texture\r\n   */\r\n  createTexture(size, data, texture, nearest) {\r\n    const gl = this.gl_;\r\n    texture = texture || gl.createTexture();\r\n    const filter = nearest ? gl.NEAREST : gl.LINEAR;\r\n\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, filter);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, filter);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n\r\n    const level = 0;\r\n    const internalFormat = gl.RGBA;\r\n    const border = 0;\r\n    const format = gl.RGBA;\r\n    const type = gl.UNSIGNED_BYTE;\r\n\r\n    if (data instanceof Uint8Array) {\r\n      gl.texImage2D(\r\n        gl.TEXTURE_2D,\r\n        level,\r\n        internalFormat,\r\n        size[0],\r\n        size[1],\r\n        border,\r\n        format,\r\n        type,\r\n        data,\r\n      );\r\n    } else if (data) {\r\n      gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, format, type, data);\r\n    } else {\r\n      gl.texImage2D(\r\n        gl.TEXTURE_2D,\r\n        level,\r\n        internalFormat,\r\n        size[0],\r\n        size[1],\r\n        border,\r\n        format,\r\n        type,\r\n        null,\r\n      );\r\n    }\r\n    return texture;\r\n  }\r\n}\r\n\r\n/**\r\n * Compute a stride in bytes based on a list of attributes\r\n * @param {Array<AttributeDescription>} attributes Ordered list of attributes\r\n * @return {number} Stride, ie amount of values for each vertex in the vertex buffer\r\n */\r\nexport function computeAttributesStride(attributes) {\r\n  let stride = 0;\r\n  for (let i = 0; i < attributes.length; i++) {\r\n    const attr = attributes[i];\r\n    stride += attr.size * getByteSizeFromType(attr.type);\r\n  }\r\n  return stride;\r\n}\r\n\r\n/**\r\n * Computes the size in byte of an attribute type.\r\n * @param {AttributeType} type Attribute type\r\n * @return {number} The size in bytes\r\n */\r\nfunction getByteSizeFromType(type) {\r\n  switch (type) {\r\n    case AttributeType.UNSIGNED_BYTE:\r\n      return Uint8Array.BYTES_PER_ELEMENT;\r\n    case AttributeType.UNSIGNED_SHORT:\r\n      return Uint16Array.BYTES_PER_ELEMENT;\r\n    case AttributeType.UNSIGNED_INT:\r\n      return Uint32Array.BYTES_PER_ELEMENT;\r\n    case AttributeType.FLOAT:\r\n    default:\r\n      return Float32Array.BYTES_PER_ELEMENT;\r\n  }\r\n}\r\n\r\nexport default WebGLHelper;\r\n", "/**\r\n * @module ol/webgl/ContextEventType\r\n */\r\n\r\n/**\r\n * @enum {string}\r\n */\r\nexport default {\r\n  LOST: 'webglcontextlost',\r\n  RESTORED: 'webglcontextrestored',\r\n};\r\n", "/**\r\n * @module ol/webgl/PostProcessingPass\r\n */\r\n\r\nimport {getUid} from '../util.js';\r\n\r\nconst DEFAULT_VERTEX_SHADER = `\r\n  precision mediump float;\r\n\r\n  attribute vec2 a_position;\r\n  varying vec2 v_texCoord;\r\n  varying vec2 v_screenCoord;\r\n\r\n  uniform vec2 u_screenSize;\r\n\r\n  void main() {\r\n    v_texCoord = a_position * 0.5 + 0.5;\r\n    v_screenCoord = v_texCoord * u_screenSize;\r\n    gl_Position = vec4(a_position, 0.0, 1.0);\r\n  }\r\n`;\r\n\r\nconst DEFAULT_FRAGMENT_SHADER = `\r\n  precision mediump float;\r\n\r\n  uniform sampler2D u_image;\r\n  uniform float u_opacity;\r\n\r\n  varying vec2 v_texCoord;\r\n\r\n  void main() {\r\n    gl_FragColor = texture2D(u_image, v_texCoord) * u_opacity;\r\n  }\r\n`;\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {WebGLRenderingContext} webGlContext WebGL context; mandatory.\r\n * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than\r\n * the main canvas that will then be sampled up (useful for saving resource on blur steps).\r\n * @property {string} [vertexShader] Vertex shader source\r\n * @property {string} [fragmentShader] Fragment shader source\r\n * @property {Object<string,import(\"./Helper\").UniformValue>} [uniforms] Uniform definitions for the post process step\r\n */\r\n\r\n/**\r\n * @typedef {Object} UniformInternalDescription\r\n * @property {import(\"./Helper\").UniformValue} value Value\r\n * @property {WebGLUniformLocation} location Location\r\n * @property {WebGLTexture} [texture] Texture\r\n * @private\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * This class is used to define Post Processing passes with custom shaders and uniforms.\r\n * This is used internally by {@link module:ol/webgl/Helper~WebGLHelper}.\r\n *\r\n * Please note that the final output on the DOM canvas is expected to have premultiplied alpha, which means that\r\n * a pixel which is 100% red with an opacity of 50% must have a color of (r=0.5, g=0, b=0, a=0.5).\r\n * Failing to provide pixel colors with premultiplied alpha will result in render anomalies.\r\n *\r\n * The default post-processing pass does *not* multiply color values with alpha value, it expects color values to be\r\n * premultiplied.\r\n *\r\n * Default shaders are shown hereafter:\r\n *\r\n * Vertex shader:\r\n *\r\n *   ```\r\n *   precision mediump float;\r\n *\r\n *   attribute vec2 a_position;\r\n *   varying vec2 v_texCoord;\r\n *   varying vec2 v_screenCoord;\r\n *\r\n *   uniform vec2 u_screenSize;\r\n *\r\n *   void main() {\r\n *     v_texCoord = a_position * 0.5 + 0.5;\r\n *     v_screenCoord = v_texCoord * u_screenSize;\r\n *     gl_Position = vec4(a_position, 0.0, 1.0);\r\n *   }\r\n *   ```\r\n *\r\n * Fragment shader:\r\n *\r\n *   ```\r\n *   precision mediump float;\r\n *\r\n *   uniform sampler2D u_image;\r\n *   uniform float u_opacity;\r\n *\r\n *   varying vec2 v_texCoord;\r\n *\r\n *   void main() {\r\n *     gl_FragColor = texture2D(u_image, v_texCoord) * u_opacity;\r\n *   }\r\n *   ```\r\n */\r\nclass WebGLPostProcessingPass {\r\n  /**\r\n   * @param {Options} options Options.\r\n   */\r\n  constructor(options) {\r\n    /**\r\n     * @private\r\n     */\r\n    this.gl_ = options.webGlContext;\r\n    const gl = this.gl_;\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    this.scaleRatio_ = options.scaleRatio || 1;\r\n\r\n    /**\r\n     * @type {WebGLTexture}\r\n     * @private\r\n     */\r\n    this.renderTargetTexture_ = gl.createTexture();\r\n\r\n    /**\r\n     * @type {import('../size.js').Size|null}\r\n     * @private\r\n     */\r\n    this.renderTargetTextureSize_ = null;\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    this.frameBuffer_ = gl.createFramebuffer();\r\n    /**\r\n     * @private\r\n     */\r\n    this.depthBuffer_ = gl.createRenderbuffer();\r\n\r\n    // compile the program for the frame buffer\r\n    // TODO: make compilation errors show up\r\n    const vertexShader = gl.createShader(gl.VERTEX_SHADER);\r\n    gl.shaderSource(\r\n      vertexShader,\r\n      options.vertexShader || DEFAULT_VERTEX_SHADER,\r\n    );\r\n    gl.compileShader(vertexShader);\r\n    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\r\n    gl.shaderSource(\r\n      fragmentShader,\r\n      options.fragmentShader || DEFAULT_FRAGMENT_SHADER,\r\n    );\r\n    gl.compileShader(fragmentShader);\r\n    /**\r\n     * @private\r\n     */\r\n    this.renderTargetProgram_ = gl.createProgram();\r\n    gl.attachShader(this.renderTargetProgram_, vertexShader);\r\n    gl.attachShader(this.renderTargetProgram_, fragmentShader);\r\n    gl.linkProgram(this.renderTargetProgram_);\r\n\r\n    // bind the vertices buffer for the frame buffer\r\n    /**\r\n     * @private\r\n     */\r\n    this.renderTargetVerticesBuffer_ = gl.createBuffer();\r\n    const verticesArray = [-1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1];\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.renderTargetVerticesBuffer_);\r\n    gl.bufferData(\r\n      gl.ARRAY_BUFFER,\r\n      new Float32Array(verticesArray),\r\n      gl.STATIC_DRAW,\r\n    );\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    this.renderTargetAttribLocation_ = gl.getAttribLocation(\r\n      this.renderTargetProgram_,\r\n      'a_position',\r\n    );\r\n    /**\r\n     * @private\r\n     */\r\n    this.renderTargetUniformLocation_ = gl.getUniformLocation(\r\n      this.renderTargetProgram_,\r\n      'u_screenSize',\r\n    );\r\n    /**\r\n     * @private\r\n     */\r\n    this.renderTargetOpacityLocation_ = gl.getUniformLocation(\r\n      this.renderTargetProgram_,\r\n      'u_opacity',\r\n    );\r\n    /**\r\n     * @private\r\n     */\r\n    this.renderTargetTextureLocation_ = gl.getUniformLocation(\r\n      this.renderTargetProgram_,\r\n      'u_image',\r\n    );\r\n\r\n    /**\r\n     * Holds info about custom uniforms used in the post processing pass\r\n     * @type {Array<UniformInternalDescription>}\r\n     * @private\r\n     */\r\n    this.uniforms_ = [];\r\n    options.uniforms &&\r\n      Object.keys(options.uniforms).forEach((name) => {\r\n        this.uniforms_.push({\r\n          value: options.uniforms[name],\r\n          location: gl.getUniformLocation(this.renderTargetProgram_, name),\r\n        });\r\n      });\r\n  }\r\n\r\n  getRenderTargetTexture() {\r\n    return this.renderTargetTexture_;\r\n  }\r\n\r\n  /**\r\n   * Get the WebGL rendering context\r\n   * @return {WebGLRenderingContext} The rendering context.\r\n   */\r\n  getGL() {\r\n    return this.gl_;\r\n  }\r\n\r\n  /**\r\n   * Initialize the render target texture of the post process, make sure it is at the\r\n   * right size and bind it as a render target for the next draw calls.\r\n   * The last step to be initialized will be the one where the primitives are rendered.\r\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\r\n   */\r\n  init(frameState) {\r\n    const gl = this.getGL();\r\n    const textureSize = [\r\n      gl.drawingBufferWidth * this.scaleRatio_,\r\n      gl.drawingBufferHeight * this.scaleRatio_,\r\n    ];\r\n\r\n    // rendering goes to my buffer\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.getFrameBuffer());\r\n    gl.bindRenderbuffer(gl.RENDERBUFFER, this.getDepthBuffer());\r\n    gl.viewport(0, 0, textureSize[0], textureSize[1]);\r\n\r\n    // if size has changed: adjust canvas & render target texture\r\n    if (\r\n      !this.renderTargetTextureSize_ ||\r\n      this.renderTargetTextureSize_[0] !== textureSize[0] ||\r\n      this.renderTargetTextureSize_[1] !== textureSize[1]\r\n    ) {\r\n      this.renderTargetTextureSize_ = textureSize;\r\n\r\n      // create a new texture\r\n      const level = 0;\r\n      const internalFormat = gl.RGBA;\r\n      const border = 0;\r\n      const format = gl.RGBA;\r\n      const type = gl.UNSIGNED_BYTE;\r\n      const data = null;\r\n      gl.bindTexture(gl.TEXTURE_2D, this.renderTargetTexture_);\r\n      gl.texImage2D(\r\n        gl.TEXTURE_2D,\r\n        level,\r\n        internalFormat,\r\n        textureSize[0],\r\n        textureSize[1],\r\n        border,\r\n        format,\r\n        type,\r\n        data,\r\n      );\r\n\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n\r\n      // bind the texture to the framebuffer\r\n      gl.framebufferTexture2D(\r\n        gl.FRAMEBUFFER,\r\n        gl.COLOR_ATTACHMENT0,\r\n        gl.TEXTURE_2D,\r\n        this.renderTargetTexture_,\r\n        0,\r\n      );\r\n\r\n      gl.renderbufferStorage(\r\n        gl.RENDERBUFFER,\r\n        gl.DEPTH_COMPONENT16,\r\n        textureSize[0],\r\n        textureSize[1],\r\n      );\r\n      gl.framebufferRenderbuffer(\r\n        gl.FRAMEBUFFER,\r\n        gl.DEPTH_ATTACHMENT,\r\n        gl.RENDERBUFFER,\r\n        this.depthBuffer_,\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render to the next postprocessing pass (or to the canvas if final pass).\r\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\r\n   * @param {WebGLPostProcessingPass} [nextPass] Next pass, optional\r\n   * @param {function(WebGLRenderingContext, import(\"../Map.js\").FrameState):void} [preCompose] Called before composing.\r\n   * @param {function(WebGLRenderingContext, import(\"../Map.js\").FrameState):void} [postCompose] Called before composing.\r\n   */\r\n  apply(frameState, nextPass, preCompose, postCompose) {\r\n    const gl = this.getGL();\r\n    const size = frameState.size;\r\n\r\n    gl.bindFramebuffer(\r\n      gl.FRAMEBUFFER,\r\n      nextPass ? nextPass.getFrameBuffer() : null,\r\n    );\r\n    gl.activeTexture(gl.TEXTURE0);\r\n    gl.bindTexture(gl.TEXTURE_2D, this.renderTargetTexture_);\r\n\r\n    if (!nextPass) {\r\n      // clear the canvas if we are the first to render to it\r\n      // and preserveDrawingBuffer is true\r\n      const canvasId = getUid(gl.canvas);\r\n      if (!frameState.renderTargets[canvasId]) {\r\n        const attributes = gl.getContextAttributes();\r\n        if (attributes && attributes.preserveDrawingBuffer) {\r\n          gl.clearColor(0.0, 0.0, 0.0, 0.0);\r\n          gl.clearDepth(1.0);\r\n          gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n        }\r\n\r\n        frameState.renderTargets[canvasId] = true;\r\n      }\r\n    }\r\n\r\n    gl.disable(gl.DEPTH_TEST);\r\n    gl.enable(gl.BLEND);\r\n    gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\r\n    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\r\n\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.renderTargetVerticesBuffer_);\r\n\r\n    gl.useProgram(this.renderTargetProgram_);\r\n    gl.enableVertexAttribArray(this.renderTargetAttribLocation_);\r\n    gl.vertexAttribPointer(\r\n      this.renderTargetAttribLocation_,\r\n      2,\r\n      gl.FLOAT,\r\n      false,\r\n      0,\r\n      0,\r\n    );\r\n    gl.uniform2f(this.renderTargetUniformLocation_, size[0], size[1]);\r\n    gl.uniform1i(this.renderTargetTextureLocation_, 0);\r\n\r\n    const opacity = frameState.layerStatesArray[frameState.layerIndex].opacity;\r\n    gl.uniform1f(this.renderTargetOpacityLocation_, opacity);\r\n\r\n    this.applyUniforms(frameState);\r\n\r\n    if (preCompose) {\r\n      preCompose(gl, frameState);\r\n    }\r\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\r\n    if (postCompose) {\r\n      postCompose(gl, frameState);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @return {WebGLFramebuffer} Frame buffer\r\n   */\r\n  getFrameBuffer() {\r\n    return this.frameBuffer_;\r\n  }\r\n\r\n  /**\r\n   * @return {WebGLRenderbuffer} Depth buffer\r\n   */\r\n  getDepthBuffer() {\r\n    return this.depthBuffer_;\r\n  }\r\n\r\n  /**\r\n   * Sets the custom uniforms based on what was given in the constructor.\r\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\r\n   * @private\r\n   */\r\n  applyUniforms(frameState) {\r\n    const gl = this.getGL();\r\n\r\n    let value;\r\n    let textureSlot = 1;\r\n    this.uniforms_.forEach(function (uniform) {\r\n      value =\r\n        typeof uniform.value === 'function'\r\n          ? uniform.value(frameState)\r\n          : uniform.value;\r\n\r\n      // apply value based on type\r\n      if (value instanceof HTMLCanvasElement || value instanceof ImageData) {\r\n        // create a texture & put data\r\n        if (!uniform.texture) {\r\n          uniform.texture = gl.createTexture();\r\n        }\r\n        gl.activeTexture(gl[`TEXTURE${textureSlot}`]);\r\n        gl.bindTexture(gl.TEXTURE_2D, uniform.texture);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n\r\n        if (value instanceof ImageData) {\r\n          gl.texImage2D(\r\n            gl.TEXTURE_2D,\r\n            0,\r\n            gl.RGBA,\r\n            gl.RGBA,\r\n            value.width,\r\n            value.height,\r\n            0,\r\n            gl.UNSIGNED_BYTE,\r\n            new Uint8Array(value.data),\r\n          );\r\n        } else {\r\n          gl.texImage2D(\r\n            gl.TEXTURE_2D,\r\n            0,\r\n            gl.RGBA,\r\n            gl.RGBA,\r\n            gl.UNSIGNED_BYTE,\r\n            value,\r\n          );\r\n        }\r\n\r\n        // fill texture slots\r\n        gl.uniform1i(uniform.location, textureSlot++);\r\n      } else if (Array.isArray(value)) {\r\n        switch (value.length) {\r\n          case 2:\r\n            gl.uniform2f(uniform.location, value[0], value[1]);\r\n            return;\r\n          case 3:\r\n            gl.uniform3f(uniform.location, value[0], value[1], value[2]);\r\n            return;\r\n          case 4:\r\n            gl.uniform4f(\r\n              uniform.location,\r\n              value[0],\r\n              value[1],\r\n              value[2],\r\n              value[3],\r\n            );\r\n            return;\r\n          default:\r\n            return;\r\n        }\r\n      } else if (typeof value === 'number') {\r\n        gl.uniform1f(uniform.location, value);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default WebGLPostProcessingPass;\r\n", "/**\r\n * A wrapper class to simplify rendering to a texture instead of the final canvas\r\n * @module ol/webgl/RenderTarget\r\n */\r\nimport {equals} from '../array.js';\r\n\r\n// for pixel color reading\r\nconst tmpArray4 = new Uint8Array(4);\r\n\r\n/**\r\n * @classdesc\r\n * This class is a wrapper around the association of both a `WebGLTexture` and a `WebGLFramebuffer` instances,\r\n * simplifying initialization and binding for rendering.\r\n */\r\nclass WebGLRenderTarget {\r\n  /**\r\n   * @param {import(\"./Helper.js\").default} helper WebGL helper; mandatory.\r\n   * @param {Array<number>} [size] Expected size of the render target texture; note: this can be changed later on.\r\n   */\r\n  constructor(helper, size) {\r\n    /**\r\n     * @private\r\n     * @type {import(\"./Helper.js\").default}\r\n     */\r\n    this.helper_ = helper;\r\n    const gl = helper.getGL();\r\n\r\n    /**\r\n     * @private\r\n     * @type {WebGLTexture}\r\n     */\r\n    this.texture_ = gl.createTexture();\r\n\r\n    /**\r\n     * @private\r\n     * @type {WebGLFramebuffer}\r\n     */\r\n    this.framebuffer_ = gl.createFramebuffer();\r\n\r\n    /**\r\n     * @private\r\n     * @type {WebGLRenderbuffer}\r\n     */\r\n    this.depthbuffer_ = gl.createRenderbuffer();\r\n\r\n    /**\r\n     * @type {Array<number>}\r\n     * @private\r\n     */\r\n    this.size_ = size || [1, 1];\r\n\r\n    /**\r\n     * @type {Uint8Array}\r\n     * @private\r\n     */\r\n    this.data_ = new Uint8Array(0);\r\n\r\n    /**\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.dataCacheDirty_ = true;\r\n\r\n    this.updateSize_();\r\n  }\r\n\r\n  /**\r\n   * Changes the size of the render target texture. Note: will do nothing if the size\r\n   * is already the same.\r\n   * @param {Array<number>} size Expected size of the render target texture\r\n   */\r\n  setSize(size) {\r\n    if (equals(size, this.size_)) {\r\n      return;\r\n    }\r\n    this.size_[0] = size[0];\r\n    this.size_[1] = size[1];\r\n    this.updateSize_();\r\n  }\r\n\r\n  /**\r\n   * Returns the size of the render target texture\r\n   * @return {Array<number>} Size of the render target texture\r\n   */\r\n  getSize() {\r\n    return this.size_;\r\n  }\r\n\r\n  /**\r\n   * This will cause following calls to `#readAll` or `#readPixel` to download the content of the\r\n   * render target into memory, which is an expensive operation.\r\n   * This content will be kept in cache but should be cleared after each new render.\r\n   */\r\n  clearCachedData() {\r\n    this.dataCacheDirty_ = true;\r\n  }\r\n\r\n  /**\r\n   * Returns the full content of the frame buffer as a series of r, g, b, a components\r\n   * in the 0-255 range (unsigned byte).\r\n   * @return {Uint8Array} Integer array of color values\r\n   */\r\n  readAll() {\r\n    if (this.dataCacheDirty_) {\r\n      const size = this.size_;\r\n      const gl = this.helper_.getGL();\r\n\r\n      gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer_);\r\n      gl.readPixels(\r\n        0,\r\n        0,\r\n        size[0],\r\n        size[1],\r\n        gl.RGBA,\r\n        gl.UNSIGNED_BYTE,\r\n        this.data_,\r\n      );\r\n      this.dataCacheDirty_ = false;\r\n    }\r\n    return this.data_;\r\n  }\r\n\r\n  /**\r\n   * Reads one pixel of the frame buffer as an array of r, g, b, a components\r\n   * in the 0-255 range (unsigned byte).\r\n   * If x and/or y are outside of existing data, an array filled with 0 is returned.\r\n   * @param {number} x Pixel coordinate\r\n   * @param {number} y Pixel coordinate\r\n   * @return {Uint8Array} Integer array with one color value (4 components)\r\n   */\r\n  readPixel(x, y) {\r\n    if (x < 0 || y < 0 || x > this.size_[0] || y >= this.size_[1]) {\r\n      tmpArray4[0] = 0;\r\n      tmpArray4[1] = 0;\r\n      tmpArray4[2] = 0;\r\n      tmpArray4[3] = 0;\r\n      return tmpArray4;\r\n    }\r\n\r\n    this.readAll();\r\n    const index =\r\n      Math.floor(x) + (this.size_[1] - Math.floor(y) - 1) * this.size_[0];\r\n    tmpArray4[0] = this.data_[index * 4];\r\n    tmpArray4[1] = this.data_[index * 4 + 1];\r\n    tmpArray4[2] = this.data_[index * 4 + 2];\r\n    tmpArray4[3] = this.data_[index * 4 + 3];\r\n    return tmpArray4;\r\n  }\r\n\r\n  /**\r\n   * @return {WebGLTexture} Texture to render to\r\n   */\r\n  getTexture() {\r\n    return this.texture_;\r\n  }\r\n\r\n  /**\r\n   * @return {WebGLFramebuffer} Frame buffer of the render target\r\n   */\r\n  getFramebuffer() {\r\n    return this.framebuffer_;\r\n  }\r\n\r\n  /**\r\n   * @return {WebGLRenderbuffer} Depth buffer of the render target\r\n   */\r\n  getDepthbuffer() {\r\n    return this.depthbuffer_;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  updateSize_() {\r\n    const size = this.size_;\r\n    const gl = this.helper_.getGL();\r\n\r\n    this.texture_ = this.helper_.createTexture(size, null, this.texture_);\r\n\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer_);\r\n    gl.viewport(0, 0, size[0], size[1]);\r\n    gl.framebufferTexture2D(\r\n      gl.FRAMEBUFFER,\r\n      gl.COLOR_ATTACHMENT0,\r\n      gl.TEXTURE_2D,\r\n      this.texture_,\r\n      0,\r\n    );\r\n\r\n    gl.bindRenderbuffer(gl.RENDERBUFFER, this.depthbuffer_);\r\n    gl.renderbufferStorage(\r\n      gl.RENDERBUFFER,\r\n      gl.DEPTH_COMPONENT16,\r\n      size[0],\r\n      size[1],\r\n    );\r\n    gl.framebufferRenderbuffer(\r\n      gl.FRAMEBUFFER,\r\n      gl.DEPTH_ATTACHMENT,\r\n      gl.RENDERBUFFER,\r\n      this.depthbuffer_,\r\n    );\r\n\r\n    this.data_ = new Uint8Array(size[0] * size[1] * 4);\r\n  }\r\n}\r\n\r\nexport default WebGLRenderTarget;\r\n", "\r\n        export function create() {\r\n          const source = \"const t=\\\"GENERATE_POLYGON_BUFFERS\\\",e=\\\"GENERATE_POINT_BUFFERS\\\",n=\\\"GENERATE_LINE_STRING_BUFFERS\\\";function r(t,e,n=2){const r=e&&e.length,o=r?e[0]*n:t.length;let u=x(t,0,o,n,!0);const f=[];if(!u||u.next===u.prev)return f;let s,l,h;if(r&&(u=function(t,e,n,r){const o=[];for(let n=0,i=e.length;n<i;n++){const u=x(t,e[n]*r,n<i-1?e[n+1]*r:t.length,r,!1);u===u.next&&(u.steiner=!0),o.push(p(u))}o.sort(c);for(let t=0;t<o.length;t++)n=a(o[t],n);return n}(t,e,u,n)),t.length>80*n){s=1/0,l=1/0;let e=-1/0,r=-1/0;for(let x=n;x<o;x+=n){const n=t[x],o=t[x+1];n<s&&(s=n),o<l&&(l=o),n>e&&(e=n),o>r&&(r=o)}h=Math.max(e-s,r-l),h=0!==h?32767/h:0}return i(u,f,n,s,l,h,0),f}function x(t,e,n,r,x){let o;if(x===function(t,e,n,r){let x=0;for(let o=e,i=n-r;o<n;o+=r)x+=(t[i]-t[o])*(t[o+1]+t[i+1]),i=o;return x}(t,e,n,r)>0)for(let x=e;x<n;x+=r)o=I(x/r|0,t[x],t[x+1],o);else for(let x=n-r;x>=e;x-=r)o=I(x/r|0,t[x],t[x+1],o);return o&&m(o,o.next)&&(z(o),o=o.next),o}function o(t,e){if(!t)return t;e||(e=t);let n,r=t;do{if(n=!1,r.steiner||!m(r,r.next)&&0!==M(r.prev,r,r.next))r=r.next;else{if(z(r),r=e=r.prev,r===r.next)break;n=!0}}while(n||r!==e);return e}function i(t,e,n,r,x,c,a){if(!t)return;!a&&c&&function(t,e,n,r){let x=t;do{0===x.z&&(x.z=y(x.x,x.y,e,n,r)),x.prevZ=x.prev,x.nextZ=x.next,x=x.next}while(x!==t);x.prevZ.nextZ=null,x.prevZ=null,function(t){let e,n=1;do{let r,x=t;t=null;let o=null;for(e=0;x;){e++;let i=x,u=0;for(let t=0;t<n&&(u++,i=i.nextZ,i);t++);let f=n;for(;u>0||f>0&&i;)0!==u&&(0===f||!i||x.z<=i.z)?(r=x,x=x.nextZ,u--):(r=i,i=i.nextZ,f--),o?o.nextZ=r:t=r,r.prevZ=o,o=r;x=i}o.nextZ=null,n*=2}while(e>1)}(x)}(t,r,x,c);let h=t;for(;t.prev!==t.next;){const y=t.prev,p=t.next;if(c?f(t,r,x,c):u(t))e.push(y.i,t.i,p.i),z(t),t=p.next,h=p.next;else if((t=p)===h){a?1===a?i(t=s(o(t),e),e,n,r,x,c,2):2===a&&l(t,e,n,r,x,c):i(o(t),e,n,r,x,c,1);break}}}function u(t){const e=t.prev,n=t,r=t.next;if(M(e,n,r)>=0)return!1;const x=e.x,o=n.x,i=r.x,u=e.y,f=n.y,s=r.y,l=Math.min(x,o,i),c=Math.min(u,f,s),a=Math.max(x,o,i),h=Math.max(u,f,s);let y=r.next;for(;y!==e;){if(y.x>=l&&y.x<=a&&y.y>=c&&y.y<=h&&g(x,u,o,f,i,s,y.x,y.y)&&M(y.prev,y,y.next)>=0)return!1;y=y.next}return!0}function f(t,e,n,r){const x=t.prev,o=t,i=t.next;if(M(x,o,i)>=0)return!1;const u=x.x,f=o.x,s=i.x,l=x.y,c=o.y,a=i.y,h=Math.min(u,f,s),p=Math.min(l,c,a),v=Math.max(u,f,s),b=Math.max(l,c,a),m=y(h,p,e,n,r),Z=y(v,b,e,n,r);let d=t.prevZ,w=t.nextZ;for(;d&&d.z>=m&&w&&w.z<=Z;){if(d.x>=h&&d.x<=v&&d.y>=p&&d.y<=b&&d!==x&&d!==i&&g(u,l,f,c,s,a,d.x,d.y)&&M(d.prev,d,d.next)>=0)return!1;if(d=d.prevZ,w.x>=h&&w.x<=v&&w.y>=p&&w.y<=b&&w!==x&&w!==i&&g(u,l,f,c,s,a,w.x,w.y)&&M(w.prev,w,w.next)>=0)return!1;w=w.nextZ}for(;d&&d.z>=m;){if(d.x>=h&&d.x<=v&&d.y>=p&&d.y<=b&&d!==x&&d!==i&&g(u,l,f,c,s,a,d.x,d.y)&&M(d.prev,d,d.next)>=0)return!1;d=d.prevZ}for(;w&&w.z<=Z;){if(w.x>=h&&w.x<=v&&w.y>=p&&w.y<=b&&w!==x&&w!==i&&g(u,l,f,c,s,a,w.x,w.y)&&M(w.prev,w,w.next)>=0)return!1;w=w.nextZ}return!0}function s(t,e){let n=t;do{const r=n.prev,x=n.next.next;!m(r,x)&&Z(r,n,n.next,x)&&A(r,x)&&A(x,r)&&(e.push(r.i,n.i,x.i),z(n),z(n.next),n=t=x),n=n.next}while(n!==t);return o(n)}function l(t,e,n,r,x,u){let f=t;do{let t=f.next.next;for(;t!==f.prev;){if(f.i!==t.i&&b(f,t)){let s=E(f,t);return f=o(f,f.next),s=o(s,s.next),i(f,e,n,r,x,u,0),void i(s,e,n,r,x,u,0)}t=t.next}f=f.next}while(f!==t)}function c(t,e){let n=t.x-e.x;if(0===n&&(n=t.y-e.y,0===n)){n=(t.next.y-t.y)/(t.next.x-t.x)-(e.next.y-e.y)/(e.next.x-e.x)}return n}function a(t,e){const n=function(t,e){let n=e;const r=t.x,x=t.y;let o,i=-1/0;if(m(t,n))return n;do{if(m(t,n.next))return n.next;if(x<=n.y&&x>=n.next.y&&n.next.y!==n.y){const t=n.x+(x-n.y)*(n.next.x-n.x)/(n.next.y-n.y);if(t<=r&&t>i&&(i=t,o=n.x<n.next.x?n:n.next,t===r))return o}n=n.next}while(n!==e);if(!o)return null;const u=o,f=o.x,s=o.y;let l=1/0;n=o;do{if(r>=n.x&&n.x>=f&&r!==n.x&&v(x<s?r:i,x,f,s,x<s?i:r,x,n.x,n.y)){const e=Math.abs(x-n.y)/(r-n.x);A(n,t)&&(e<l||e===l&&(n.x>o.x||n.x===o.x&&h(o,n)))&&(o=n,l=e)}n=n.next}while(n!==u);return o}(t,e);if(!n)return e;const r=E(n,t);return o(r,r.next),o(n,n.next)}function h(t,e){return M(t.prev,t,e.prev)<0&&M(e.next,t,t.next)<0}function y(t,e,n,r,x){return(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=(t-n)*x|0)|t<<8))|t<<4))|t<<2))|t<<1))|(e=1431655765&((e=858993459&((e=252645135&((e=16711935&((e=(e-r)*x|0)|e<<8))|e<<4))|e<<2))|e<<1))<<1}function p(t){let e=t,n=t;do{(e.x<n.x||e.x===n.x&&e.y<n.y)&&(n=e),e=e.next}while(e!==t);return n}function v(t,e,n,r,x,o,i,u){return(x-i)*(e-u)>=(t-i)*(o-u)&&(t-i)*(r-u)>=(n-i)*(e-u)&&(n-i)*(o-u)>=(x-i)*(r-u)}function g(t,e,n,r,x,o,i,u){return!(t===i&&e===u)&&v(t,e,n,r,x,o,i,u)}function b(t,e){return t.next.i!==e.i&&t.prev.i!==e.i&&!function(t,e){let n=t;do{if(n.i!==t.i&&n.next.i!==t.i&&n.i!==e.i&&n.next.i!==e.i&&Z(n,n.next,t,e))return!0;n=n.next}while(n!==t);return!1}(t,e)&&(A(t,e)&&A(e,t)&&function(t,e){let n=t,r=!1;const x=(t.x+e.x)/2,o=(t.y+e.y)/2;do{n.y>o!=n.next.y>o&&n.next.y!==n.y&&x<(n.next.x-n.x)*(o-n.y)/(n.next.y-n.y)+n.x&&(r=!r),n=n.next}while(n!==t);return r}(t,e)&&(M(t.prev,t,e.prev)||M(t,e.prev,e))||m(t,e)&&M(t.prev,t,t.next)>0&&M(e.prev,e,e.next)>0)}function M(t,e,n){return(e.y-t.y)*(n.x-e.x)-(e.x-t.x)*(n.y-e.y)}function m(t,e){return t.x===e.x&&t.y===e.y}function Z(t,e,n,r){const x=w(M(t,e,n)),o=w(M(t,e,r)),i=w(M(n,r,t)),u=w(M(n,r,e));return x!==o&&i!==u||(!(0!==x||!d(t,n,e))||(!(0!==o||!d(t,r,e))||(!(0!==i||!d(n,t,r))||!(0!==u||!d(n,e,r)))))}function d(t,e,n){return e.x<=Math.max(t.x,n.x)&&e.x>=Math.min(t.x,n.x)&&e.y<=Math.max(t.y,n.y)&&e.y>=Math.min(t.y,n.y)}function w(t){return t>0?1:t<0?-1:0}function A(t,e){return M(t.prev,t,t.next)<0?M(t,e,t.next)>=0&&M(t,t.prev,e)>=0:M(t,e,t.prev)<0||M(t,t.next,e)<0}function E(t,e){const n=F(t.i,t.x,t.y),r=F(e.i,e.x,e.y),x=t.next,o=e.prev;return t.next=e,e.prev=t,n.next=x,x.prev=n,r.next=n,n.prev=r,o.next=r,r.prev=o,r}function I(t,e,n,r){const x=F(t,e,n);return r?(x.next=r.next,x.prev=r,r.next.prev=x,r.next=x):(x.prev=x,x.next=x),x}function z(t){t.next.prev=t.prev,t.prev.next=t.next,t.prevZ&&(t.prevZ.nextZ=t.nextZ),t.nextZ&&(t.nextZ.prevZ=t.prevZ)}function F(t,e,n){return{i:t,x:e,y:n,prev:null,next:null,z:0,prevZ:null,nextZ:null,steiner:!1}}function P(t,e){const n=e[0],r=e[1];return e[0]=t[0]*n+t[2]*r+t[4],e[1]=t[1]*n+t[3]*r+t[5],e}function B(t,e){const n=(r=e)[0]*r[3]-r[1]*r[2];var r;!function(t,e){if(!t)throw new Error(e)}(0!==n,\\\"Transformation matrix cannot be inverted\\\");const x=e[0],o=e[1],i=e[2],u=e[3],f=e[4],s=e[5];return t[0]=u/n,t[1]=-o/n,t[2]=-i/n,t[3]=x/n,t[4]=(i*s-u*f)/n,t[5]=-(x*s-o*f)/n,t}new Array(6);const N=[],R={vertexPosition:0,indexPosition:0};function S(t,e,n,r,x){t[e+0]=n,t[e+1]=r,t[e+2]=x}function T(t,e,n,r,x,o){const i=3+x,u=t[e+0],f=t[e+1],s=N;s.length=x;for(let n=0;n<s.length;n++)s[n]=t[e+2+n];let l=o?o.vertexPosition:0,c=o?o.indexPosition:0;const a=l/i;return S(n,l,u,f,0),s.length&&n.set(s,l+3),l+=i,S(n,l,u,f,1),s.length&&n.set(s,l+3),l+=i,S(n,l,u,f,2),s.length&&n.set(s,l+3),l+=i,S(n,l,u,f,3),s.length&&n.set(s,l+3),l+=i,r[c++]=a,r[c++]=a+1,r[c++]=a+3,r[c++]=a+1,r[c++]=a+2,r[c++]=a+3,R.vertexPosition=l,R.indexPosition=c,R}function _(t,e,n,r,x,o,i,u,f,s,l){const c=10+u.length,a=o.length/c,h=[t[e+0],t[e+1]],y=[t[n],t[n+1]],p=t[e+2],v=t[n+2],g=P(f,[...h]),b=P(f,[...y]);function M(t,e,n){const r=Math.sqrt((e[0]-t[0])*(e[0]-t[0])+(e[1]-t[1])*(e[1]-t[1])),x=[(e[0]-t[0])/r,(e[1]-t[1])/r],o=[-x[1],x[0]],i=Math.sqrt((n[0]-t[0])*(n[0]-t[0])+(n[1]-t[1])*(n[1]-t[1])),u=[(n[0]-t[0])/i,(n[1]-t[1])/i],f=0===r||0===i?0:Math.acos((s=u[0]*x[0]+u[1]*x[1],l=-1,c=1,Math.min(Math.max(s,l),c)));var s,l,c;return u[0]*o[0]+u[1]*o[1]>0?f:2*Math.PI-f}let m=-1,Z=-1,d=l;const w=null!==x;if(null!==r){m=M(g,b,P(f,[...[t[r],t[r+1]]])),Math.cos(m)<=.985&&(d+=Math.tan((m-Math.PI)/2))}if(w){Z=M(b,g,P(f,[...[t[x],t[x+1]]])),Math.cos(Z)<=.985&&(d+=Math.tan((Math.PI-Z)/2))}function A(t,e){return 0===e?1e4*t:Math.sign(e)*(1e4*t+Math.abs(e))}return o.push(h[0],h[1],p,y[0],y[1],v,m,Z,s,A(0,l)),o.push(...u),o.push(h[0],h[1],p,y[0],y[1],v,m,Z,s,A(1,l)),o.push(...u),o.push(h[0],h[1],p,y[0],y[1],v,m,Z,s,A(2,l)),o.push(...u),o.push(h[0],h[1],p,y[0],y[1],v,m,Z,s,A(3,l)),o.push(...u),i.push(a,a+1,a+2,a+1,a+3,a+2),{length:s+Math.sqrt((b[0]-g[0])*(b[0]-g[0])+(b[1]-g[1])*(b[1]-g[1])),angle:d}}function O(t,e,n,x,o){const i=2+o;let u=e;const f=t.slice(u,u+o);u+=o;const s=t[u++];let l=0;const c=new Array(s-1);for(let e=0;e<s;e++)l+=t[u++],e<s-1&&(c[e]=l);const a=t.slice(u,u+2*l),h=r(a,c,2);for(let t=0;t<h.length;t++)x.push(h[t]+n.length/i);for(let t=0;t<a.length;t+=2)n.push(a[t],a[t+1],...f);return u+2*l}const U=self;U.onmessage=r=>{const x=r.data;switch(x.type){case e:{const t=3,e=2,n=x.customAttributesSize,r=e+n,o=new Float32Array(x.renderInstructions),i=o.length/r,u=4*i*(n+t),f=new Uint32Array(6*i),s=new Float32Array(u);let l;for(let t=0;t<o.length;t+=r)l=T(o,t,s,f,n,l);const c=Object.assign({vertexBuffer:s.buffer,indexBuffer:f.buffer,renderInstructions:o.buffer},x);U.postMessage(c,[s.buffer,f.buffer,o.buffer]);break}case n:{const t=[],e=[],n=x.customAttributesSize,r=3,o=new Float32Array(x.renderInstructions);let i=0;const u=[1,0,0,1,0,0];let f,s;for(B(u,x.renderInstructionsTransform);i<o.length;){s=Array.from(o.slice(i,i+n)),i+=n,f=o[i++];const x=i,l=i+(f-1)*r,c=o[x]===o[l]&&o[x+1]===o[l+1];let a=0,h=0;for(let n=0;n<f-1;n++){let y=null;n>0?y=i+(n-1)*r:c&&(y=l-r);let p=null;n<f-2?p=i+(n+2)*r:c&&(p=x+r);const v=_(o,i+n*r,i+(n+1)*r,y,p,t,e,s,u,a,h);a=v.length,h=v.angle}i+=f*r}const l=Uint32Array.from(e),c=Float32Array.from(t),a=Object.assign({vertexBuffer:c.buffer,indexBuffer:l.buffer,renderInstructions:o.buffer},x);U.postMessage(a,[c.buffer,l.buffer,o.buffer]);break}case t:{const t=[],e=[],n=x.customAttributesSize,r=new Float32Array(x.renderInstructions);let o=0;for(;o<r.length;)o=O(r,o,t,e,n);const i=Uint32Array.from(e),u=Float32Array.from(t),f=Object.assign({vertexBuffer:u.buffer,indexBuffer:i.buffer,renderInstructions:r.buffer},x);U.postMessage(f,[u.buffer,i.buffer,r.buffer]);break}}};\";\r\n          return new Worker(typeof Blob === 'undefined'\r\n            ? 'data:application/javascript;base64,' + Buffer.from(source, 'binary').toString('base64')\r\n            : URL.createObjectURL(new Blob([source], {type: 'application/javascript'})));\r\n        }\r\n      \r\n", "/**\r\n * @module ol/renderer/webgl/Layer\r\n */\r\nimport LayerProperty from '../../layer/Property.js';\r\nimport RenderEvent from '../../render/Event.js';\r\nimport RenderEventType from '../../render/EventType.js';\r\nimport {\r\n  compose as composeTransform,\r\n  create as createTransform,\r\n} from '../../transform.js';\r\nimport WebGLHelper from '../../webgl/Helper.js';\r\nimport LayerRenderer from '../Layer.js';\r\n\r\n/**\r\n * @typedef {Object} PostProcessesOptions\r\n * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than\r\n * the main canvas that will then be sampled up (useful for saving resource on blur steps).\r\n * @property {string} [vertexShader] Vertex shader source\r\n * @property {string} [fragmentShader] Fragment shader source\r\n * @property {Object<string,import(\"../../webgl/Helper\").UniformValue>} [uniforms] Uniform definitions for the post process step\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {Object<string,import(\"../../webgl/Helper\").UniformValue>} [uniforms] Uniform definitions for the post process steps\r\n * @property {Array<PostProcessesOptions>} [postProcesses] Post-processes definitions\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Base WebGL renderer class.\r\n * Holds all logic related to data manipulation & some common rendering logic\r\n * @template {import(\"../../layer/Layer.js\").default} LayerType\r\n * @extends {LayerRenderer<LayerType>}\r\n */\r\nclass WebGLLayerRenderer extends LayerRenderer {\r\n  /**\r\n   * @param {LayerType} layer Layer.\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(layer, options) {\r\n    super(layer);\r\n\r\n    options = options || {};\r\n\r\n    /**\r\n     * The transform for viewport CSS pixels to rendered pixels.  This transform is only\r\n     * set before dispatching rendering events.\r\n     * @private\r\n     * @type {import(\"../../transform.js\").Transform}\r\n     */\r\n    this.inversePixelTransform_ = createTransform();\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    this.postProcesses_ = options.postProcesses;\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    this.uniforms_ = options.uniforms;\r\n\r\n    /**\r\n     * @type {WebGLHelper}\r\n     * @protected\r\n     */\r\n    this.helper;\r\n\r\n    this.onMapChanged_ = () => {\r\n      this.clearCache();\r\n      this.removeHelper();\r\n    };\r\n\r\n    layer.addChangeListener(LayerProperty.MAP, this.onMapChanged_);\r\n\r\n    this.dispatchPreComposeEvent = this.dispatchPreComposeEvent.bind(this);\r\n    this.dispatchPostComposeEvent = this.dispatchPostComposeEvent.bind(this);\r\n  }\r\n\r\n  /**\r\n   * @param {WebGLRenderingContext} context The WebGL rendering context.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @protected\r\n   */\r\n  dispatchPreComposeEvent(context, frameState) {\r\n    const layer = this.getLayer();\r\n    if (layer.hasListener(RenderEventType.PRECOMPOSE)) {\r\n      const event = new RenderEvent(\r\n        RenderEventType.PRECOMPOSE,\r\n        undefined,\r\n        frameState,\r\n        context,\r\n      );\r\n      layer.dispatchEvent(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {WebGLRenderingContext} context The WebGL rendering context.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @protected\r\n   */\r\n  dispatchPostComposeEvent(context, frameState) {\r\n    const layer = this.getLayer();\r\n    if (layer.hasListener(RenderEventType.POSTCOMPOSE)) {\r\n      const event = new RenderEvent(\r\n        RenderEventType.POSTCOMPOSE,\r\n        undefined,\r\n        frameState,\r\n        context,\r\n      );\r\n      layer.dispatchEvent(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reset options (only handles uniforms).\r\n   * @param {Options} options Options.\r\n   */\r\n  reset(options) {\r\n    this.uniforms_ = options.uniforms;\r\n    if (this.helper) {\r\n      this.helper.setUniforms(this.uniforms_);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   */\r\n  removeHelper() {\r\n    if (this.helper) {\r\n      this.helper.dispose();\r\n      delete this.helper;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Determine whether renderFrame should be called.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @return {boolean} Layer is ready to be rendered.\r\n   * @override\r\n   */\r\n  prepareFrame(frameState) {\r\n    if (this.getLayer().getRenderSource()) {\r\n      let incrementGroup = true;\r\n      let groupNumber = -1;\r\n      let className;\r\n      for (let i = 0, ii = frameState.layerStatesArray.length; i < ii; i++) {\r\n        const layer = frameState.layerStatesArray[i].layer;\r\n        const renderer = layer.getRenderer();\r\n        if (!(renderer instanceof WebGLLayerRenderer)) {\r\n          incrementGroup = true;\r\n          continue;\r\n        }\r\n        const layerClassName = layer.getClassName();\r\n        if (incrementGroup || layerClassName !== className) {\r\n          groupNumber += 1;\r\n          incrementGroup = false;\r\n        }\r\n        className = layerClassName;\r\n        if (renderer === this) {\r\n          break;\r\n        }\r\n      }\r\n\r\n      const canvasCacheKey =\r\n        'map/' + frameState.mapId + '/group/' + groupNumber;\r\n\r\n      if (\r\n        !this.helper ||\r\n        !this.helper.canvasCacheKeyMatches(canvasCacheKey) ||\r\n        this.helper.needsToBeRecreated()\r\n      ) {\r\n        this.removeHelper();\r\n\r\n        this.helper = new WebGLHelper({\r\n          postProcesses: this.postProcesses_,\r\n          uniforms: this.uniforms_,\r\n          canvasCacheKey: canvasCacheKey,\r\n        });\r\n\r\n        if (className) {\r\n          this.helper.getCanvas().className = className;\r\n        }\r\n\r\n        this.afterHelperCreated();\r\n      }\r\n    }\r\n\r\n    return this.prepareFrameInternal(frameState);\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   */\r\n  afterHelperCreated() {}\r\n\r\n  /**\r\n   * Determine whether renderFrame should be called.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @return {boolean} Layer is ready to be rendered.\r\n   * @protected\r\n   */\r\n  prepareFrameInternal(frameState) {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   */\r\n  clearCache() {}\r\n\r\n  /**\r\n   * Clean up.\r\n   * @override\r\n   */\r\n  disposeInternal() {\r\n    this.clearCache();\r\n    this.removeHelper();\r\n    this.getLayer()?.removeChangeListener(\r\n      LayerProperty.MAP,\r\n      this.onMapChanged_,\r\n    );\r\n    super.disposeInternal();\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../render/EventType.js\").default} type Event type.\r\n   * @param {WebGLRenderingContext} context The rendering context.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @private\r\n   */\r\n  dispatchRenderEvent_(type, context, frameState) {\r\n    const layer = this.getLayer();\r\n    if (layer.hasListener(type)) {\r\n      composeTransform(\r\n        this.inversePixelTransform_,\r\n        0,\r\n        0,\r\n        frameState.pixelRatio,\r\n        -frameState.pixelRatio,\r\n        0,\r\n        0,\r\n        -frameState.size[1],\r\n      );\r\n\r\n      const event = new RenderEvent(\r\n        type,\r\n        this.inversePixelTransform_,\r\n        frameState,\r\n        context,\r\n      );\r\n      layer.dispatchEvent(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {WebGLRenderingContext} context The rendering context.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @protected\r\n   */\r\n  preRender(context, frameState) {\r\n    this.dispatchRenderEvent_(RenderEventType.PRERENDER, context, frameState);\r\n  }\r\n\r\n  /**\r\n   * @param {WebGLRenderingContext} context The rendering context.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @protected\r\n   */\r\n  postRender(context, frameState) {\r\n    this.dispatchRenderEvent_(RenderEventType.POSTRENDER, context, frameState);\r\n  }\r\n}\r\n\r\nexport default WebGLLayerRenderer;\r\n", "import {getWidth} from '../../extent.js';\r\n\r\n/**\r\n * Compute world params\r\n * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n * @param {any} layer The layer\r\n * @return {Array<number>} The world start, end and width.\r\n */\r\nexport function getWorldParameters(frameState, layer) {\r\n  const projection = frameState.viewState.projection;\r\n\r\n  const vectorSource = layer.getSource();\r\n  const multiWorld = vectorSource.getWrapX() && projection.canWrapX();\r\n  const projectionExtent = projection.getExtent();\r\n\r\n  const extent = frameState.extent;\r\n  const worldWidth = multiWorld ? getWidth(projectionExtent) : null;\r\n  const endWorld = multiWorld\r\n    ? Math.ceil((extent[2] - projectionExtent[2]) / worldWidth) + 1\r\n    : 1;\r\n\r\n  const startWorld = multiWorld\r\n    ? Math.floor((extent[0] - projectionExtent[0]) / worldWidth)\r\n    : 0;\r\n\r\n  return [startWorld, endWorld, worldWidth];\r\n}\r\n", "/**\r\n * @module ol/renderer/webgl/TileLayer\r\n */\r\nimport TileState from '../../TileState.js';\r\nimport {\r\n  boundingExtent,\r\n  containsCoordinate,\r\n  getIntersection,\r\n} from '../../extent.js';\r\nimport {fromUserExtent} from '../../proj.js';\r\nimport {toSize} from '../../size.js';\r\nimport {apply as applyTransform} from '../../transform.js';\r\nimport {fromTransform as mat4FromTransform} from '../../vec/mat4.js';\r\nimport WebGLArrayBuffer from '../../webgl/Buffer.js';\r\nimport {AttributeType} from '../../webgl/Helper.js';\r\nimport TileTexture from '../../webgl/TileTexture.js';\r\nimport {ELEMENT_ARRAY_BUFFER, STATIC_DRAW} from '../../webgl.js';\r\nimport WebGLBaseTileLayerRenderer, {\r\n  Uniforms as BaseUniforms,\r\n  getCacheKey,\r\n} from './TileLayerBase.js';\r\n\r\nexport const Uniforms = {\r\n  ...BaseUniforms,\r\n  TILE_TEXTURE_ARRAY: 'u_tileTextures',\r\n  TEXTURE_PIXEL_WIDTH: 'u_texturePixelWidth',\r\n  TEXTURE_PIXEL_HEIGHT: 'u_texturePixelHeight',\r\n  TEXTURE_RESOLUTION: 'u_textureResolution', // map units per texture pixel\r\n  TEXTURE_ORIGIN_X: 'u_textureOriginX', // map x coordinate of left edge of texture\r\n  TEXTURE_ORIGIN_Y: 'u_textureOriginY', // map y coordinate of top edge of texture\r\n};\r\n\r\nexport const Attributes = {\r\n  TEXTURE_COORD: 'a_textureCoord',\r\n};\r\n\r\n/**\r\n * @type {Array<import('../../webgl/Helper.js').AttributeDescription>}\r\n */\r\nconst attributeDescriptions = [\r\n  {\r\n    name: Attributes.TEXTURE_COORD,\r\n    size: 2,\r\n    type: AttributeType.FLOAT,\r\n  },\r\n];\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {string} vertexShader Vertex shader source.\r\n * @property {string} fragmentShader Fragment shader source.\r\n * @property {Object<string, import(\"../../webgl/Helper\").UniformValue>} [uniforms] Additional uniforms\r\n * made available to shaders.\r\n * @property {Array<import(\"../../webgl/PaletteTexture.js\").default>} [paletteTextures] Palette textures.\r\n * @property {number} [cacheSize=512] The texture cache size.\r\n * @property {Array<import('./Layer.js').PostProcessesOptions>} [postProcesses] Post-processes definitions.\r\n */\r\n\r\n/**\r\n * @typedef {import(\"../../webgl/TileTexture.js\").TileType} TileTextureType\r\n */\r\n\r\n/**\r\n * @typedef {import(\"../../webgl/TileTexture.js\").default} TileTextureRepresentation\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * WebGL renderer for tile layers.\r\n * @template {import(\"../../layer/WebGLTile.js\").default|import(\"../../layer/Flow.js\").default} LayerType\r\n * @extends {WebGLBaseTileLayerRenderer<LayerType, TileTextureType, TileTextureRepresentation>}\r\n * @api\r\n */\r\nclass WebGLTileLayerRenderer extends WebGLBaseTileLayerRenderer {\r\n  /**\r\n   * @param {LayerType} tileLayer Tile layer.\r\n   * @param {Options} options Options.\r\n   */\r\n  constructor(tileLayer, options) {\r\n    super(tileLayer, options);\r\n\r\n    /**\r\n     * @type {WebGLProgram}\r\n     * @private\r\n     */\r\n    this.program_;\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    this.vertexShader_ = options.vertexShader;\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    this.fragmentShader_ = options.fragmentShader;\r\n\r\n    /**\r\n     * Tiles are rendered as a quad with the following structure:\r\n     *\r\n     *  [P3]---------[P2]\r\n     *   |`           |\r\n     *   |  `     B   |\r\n     *   |    `       |\r\n     *   |      `     |\r\n     *   |   A    `   |\r\n     *   |          ` |\r\n     *  [P0]---------[P1]\r\n     *\r\n     * Triangle A: P0, P1, P3\r\n     * Triangle B: P1, P2, P3\r\n     *\r\n     * @private\r\n     */\r\n    this.indices_ = new WebGLArrayBuffer(ELEMENT_ARRAY_BUFFER, STATIC_DRAW);\r\n    this.indices_.fromArray([0, 1, 3, 1, 2, 3]);\r\n\r\n    /**\r\n     * @type {Array<import(\"../../webgl/PaletteTexture.js\").default>}\r\n     * @private\r\n     */\r\n    this.paletteTextures_ = options.paletteTextures || [];\r\n  }\r\n\r\n  /**\r\n   * @param {Options} options Options.\r\n   * @override\r\n   */\r\n  reset(options) {\r\n    super.reset(options);\r\n    if (this.helper) {\r\n      const gl = this.helper.getGL();\r\n      for (const paletteTexture of this.paletteTextures_) {\r\n        paletteTexture.delete(gl);\r\n      }\r\n    }\r\n\r\n    this.vertexShader_ = options.vertexShader;\r\n    this.fragmentShader_ = options.fragmentShader;\r\n    this.paletteTextures_ = options.paletteTextures || [];\r\n\r\n    if (this.helper) {\r\n      this.program_ = this.helper.getProgram(\r\n        this.fragmentShader_,\r\n        this.vertexShader_,\r\n      );\r\n      const gl = this.helper.getGL();\r\n      for (const paletteTexture of this.paletteTextures_) {\r\n        // upload the texture data\r\n        paletteTexture.getTexture(gl);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  afterHelperCreated() {\r\n    super.afterHelperCreated();\r\n\r\n    const gl = this.helper.getGL();\r\n    for (const paletteTexture of this.paletteTextures_) {\r\n      // upload the texture data\r\n      paletteTexture.getTexture(gl);\r\n    }\r\n\r\n    this.program_ = this.helper.getProgram(\r\n      this.fragmentShader_,\r\n      this.vertexShader_,\r\n    );\r\n    this.helper.flushBufferData(this.indices_);\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  removeHelper() {\r\n    if (this.helper) {\r\n      const gl = this.helper.getGL();\r\n      for (const paletteTexture of this.paletteTextures_) {\r\n        paletteTexture.delete(gl);\r\n      }\r\n    }\r\n\r\n    super.removeHelper();\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  createTileRepresentation(options) {\r\n    return new TileTexture(options);\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  beforeTilesRender(frameState, tilesWithAlpha) {\r\n    super.beforeTilesRender(frameState, tilesWithAlpha);\r\n    this.helper.useProgram(this.program_, frameState);\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  renderTile(\r\n    tileTexture,\r\n    tileTransform,\r\n    frameState,\r\n    renderExtent,\r\n    tileResolution,\r\n    tileSize,\r\n    tileOrigin,\r\n    tileExtent,\r\n    depth,\r\n    gutter,\r\n    alpha,\r\n  ) {\r\n    const gl = this.helper.getGL();\r\n    this.helper.bindBuffer(tileTexture.coords);\r\n    this.helper.bindBuffer(this.indices_);\r\n    this.helper.enableAttributes(attributeDescriptions);\r\n\r\n    let textureSlot = 0;\r\n    while (textureSlot < tileTexture.textures.length) {\r\n      const uniformName = `${Uniforms.TILE_TEXTURE_ARRAY}[${textureSlot}]`;\r\n      this.helper.bindTexture(\r\n        tileTexture.textures[textureSlot],\r\n        textureSlot,\r\n        uniformName,\r\n      );\r\n      ++textureSlot;\r\n    }\r\n\r\n    for (\r\n      let paletteIndex = 0;\r\n      paletteIndex < this.paletteTextures_.length;\r\n      ++paletteIndex\r\n    ) {\r\n      const paletteTexture = this.paletteTextures_[paletteIndex];\r\n      const texture = paletteTexture.getTexture(gl);\r\n      this.helper.bindTexture(texture, textureSlot, paletteTexture.name);\r\n      ++textureSlot;\r\n    }\r\n\r\n    const viewState = frameState.viewState;\r\n\r\n    const tileWidthWithGutter = tileSize[0] + 2 * gutter;\r\n    const tileHeightWithGutter = tileSize[1] + 2 * gutter;\r\n\r\n    const tile = tileTexture.tile;\r\n    const tileCoord = tile.tileCoord;\r\n\r\n    const tileCenterI = tileCoord[1];\r\n    const tileCenterJ = tileCoord[2];\r\n\r\n    this.helper.setUniformMatrixValue(\r\n      Uniforms.TILE_TRANSFORM,\r\n      mat4FromTransform(this.tempMat4, tileTransform),\r\n    );\r\n\r\n    this.helper.setUniformFloatValue(Uniforms.TRANSITION_ALPHA, alpha);\r\n    this.helper.setUniformFloatValue(Uniforms.DEPTH, depth);\r\n\r\n    let gutterExtent = renderExtent;\r\n    if (gutter > 0) {\r\n      gutterExtent = tileExtent;\r\n      getIntersection(gutterExtent, renderExtent, gutterExtent);\r\n    }\r\n    this.helper.setUniformFloatVec4(Uniforms.RENDER_EXTENT, gutterExtent);\r\n\r\n    this.helper.setUniformFloatValue(Uniforms.RESOLUTION, viewState.resolution);\r\n    this.helper.setUniformFloatValue(Uniforms.ZOOM, viewState.zoom);\r\n\r\n    this.helper.setUniformFloatValue(\r\n      Uniforms.TEXTURE_PIXEL_WIDTH,\r\n      tileWidthWithGutter,\r\n    );\r\n    this.helper.setUniformFloatValue(\r\n      Uniforms.TEXTURE_PIXEL_HEIGHT,\r\n      tileHeightWithGutter,\r\n    );\r\n    this.helper.setUniformFloatValue(\r\n      Uniforms.TEXTURE_RESOLUTION,\r\n      tileResolution,\r\n    );\r\n    this.helper.setUniformFloatValue(\r\n      Uniforms.TEXTURE_ORIGIN_X,\r\n      tileOrigin[0] +\r\n        tileCenterI * tileSize[0] * tileResolution -\r\n        gutter * tileResolution,\r\n    );\r\n    this.helper.setUniformFloatValue(\r\n      Uniforms.TEXTURE_ORIGIN_Y,\r\n      tileOrigin[1] -\r\n        tileCenterJ * tileSize[1] * tileResolution +\r\n        gutter * tileResolution,\r\n    );\r\n\r\n    this.helper.drawElements(0, this.indices_.getSize());\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\r\n   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView} Data at the pixel location.\r\n   * @override\r\n   */\r\n  getData(pixel) {\r\n    const gl = this.helper.getGL();\r\n    if (!gl) {\r\n      return null;\r\n    }\r\n\r\n    const frameState = this.frameState;\r\n    if (!frameState) {\r\n      return null;\r\n    }\r\n\r\n    const layer = this.getLayer();\r\n    const coordinate = applyTransform(\r\n      frameState.pixelToCoordinateTransform,\r\n      pixel.slice(),\r\n    );\r\n\r\n    const viewState = frameState.viewState;\r\n    const layerExtent = layer.getExtent();\r\n    if (layerExtent) {\r\n      if (\r\n        !containsCoordinate(\r\n          fromUserExtent(layerExtent, viewState.projection),\r\n          coordinate,\r\n        )\r\n      ) {\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // determine last source suitable for rendering at coordinate\r\n    const sources = layer.getSources(\r\n      boundingExtent([coordinate]),\r\n      viewState.resolution,\r\n    );\r\n    let i, source, tileGrid;\r\n    for (i = sources.length - 1; i >= 0; --i) {\r\n      source = sources[i];\r\n      if (source.getState() === 'ready') {\r\n        tileGrid = source.getTileGridForProjection(viewState.projection);\r\n        if (source.getWrapX()) {\r\n          break;\r\n        }\r\n        const gridExtent = tileGrid.getExtent();\r\n        if (!gridExtent || containsCoordinate(gridExtent, coordinate)) {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    if (i < 0) {\r\n      return null;\r\n    }\r\n\r\n    const tileTextureCache = this.tileRepresentationCache;\r\n    for (\r\n      let z = tileGrid.getZForResolution(viewState.resolution);\r\n      z >= tileGrid.getMinZoom();\r\n      --z\r\n    ) {\r\n      const tileCoord = tileGrid.getTileCoordForCoordAndZ(coordinate, z);\r\n      const cacheKey = getCacheKey(source, tileCoord);\r\n      if (!tileTextureCache.containsKey(cacheKey)) {\r\n        continue;\r\n      }\r\n      const tileTexture = tileTextureCache.get(cacheKey);\r\n      const tile = tileTexture.tile;\r\n      if (tile.getState() === TileState.EMPTY) {\r\n        return null;\r\n      }\r\n      if (!tileTexture.loaded) {\r\n        continue;\r\n      }\r\n      const tileOrigin = tileGrid.getOrigin(z);\r\n      const tileSize = toSize(tileGrid.getTileSize(z));\r\n      const tileResolution = tileGrid.getResolution(z);\r\n\r\n      const col =\r\n        (coordinate[0] - tileOrigin[0]) / tileResolution -\r\n        tileCoord[1] * tileSize[0];\r\n\r\n      const row =\r\n        (tileOrigin[1] - coordinate[1]) / tileResolution -\r\n        tileCoord[2] * tileSize[1];\r\n\r\n      return tileTexture.getPixelData(col, row);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Clean up.\r\n   * @override\r\n   */\r\n  disposeInternal() {\r\n    const helper = this.helper;\r\n    if (helper) {\r\n      const gl = helper.getGL();\r\n      for (const paletteTexture of this.paletteTextures_) {\r\n        paletteTexture.delete(gl);\r\n      }\r\n      this.paletteTextures_.length = 0;\r\n\r\n      gl.deleteProgram(this.program_);\r\n      delete this.program_;\r\n      helper.deleteBuffer(this.indices_);\r\n    }\r\n    super.disposeInternal();\r\n    delete this.indices_;\r\n  }\r\n}\r\n\r\nexport default WebGLTileLayerRenderer;\r\n", "/**\r\n * @module ol/webgl/BaseTileRepresentation\r\n */\r\n\r\nimport ImageTile from '../ImageTile.js';\r\nimport TileState from '../TileState.js';\r\nimport EventType from '../events/EventType.js';\r\nimport EventTarget from '../events/Target.js';\r\nimport {abstract} from '../util.js';\r\n\r\n/**\r\n * @typedef {import(\"../Tile.js\").default} BaseTileType\r\n */\r\n\r\n/**\r\n * @template {BaseTileType} TileType\r\n * @typedef {Object} TileRepresentationOptions\r\n * @property {TileType} tile The tile.\r\n * @property {import(\"../tilegrid/TileGrid.js\").default} grid Tile grid.\r\n * @property {import(\"../webgl/Helper.js\").default} helper WebGL helper.\r\n * @property {number} [gutter=0] The size in pixels of the gutter around image tiles to ignore.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Base class for representing a tile in a webgl context\r\n * @template {import(\"../Tile.js\").default} TileType\r\n * @abstract\r\n */\r\nclass BaseTileRepresentation extends EventTarget {\r\n  /**\r\n   * @param {TileRepresentationOptions<TileType>} options The tile representation options.\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    /**\r\n     * @type {TileType}\r\n     */\r\n    this.tile;\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    this.handleTileChange_ = this.handleTileChange_.bind(this);\r\n\r\n    /**\r\n     * @type {number}\r\n     * @protected\r\n     */\r\n    this.gutter = options.gutter || 0;\r\n\r\n    /**\r\n     * @type {import(\"../webgl/Helper.js\").default}\r\n     * @protected\r\n     */\r\n    this.helper = options.helper;\r\n\r\n    this.loaded = false;\r\n    this.ready = false;\r\n  }\r\n\r\n  /**\r\n   * @param {TileType} tile Tile.\r\n   */\r\n  setTile(tile) {\r\n    if (tile !== this.tile) {\r\n      if (this.tile) {\r\n        this.tile.removeEventListener(EventType.CHANGE, this.handleTileChange_);\r\n      }\r\n      this.tile = tile;\r\n      this.loaded = tile.getState() === TileState.LOADED;\r\n      if (this.loaded) {\r\n        this.uploadTile();\r\n      } else {\r\n        if (tile instanceof ImageTile) {\r\n          const image = tile.getImage();\r\n          if (image instanceof Image && !image.crossOrigin) {\r\n            image.crossOrigin = 'anonymous';\r\n          }\r\n        }\r\n        tile.addEventListener(EventType.CHANGE, this.handleTileChange_);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @protected\r\n   */\r\n  uploadTile() {\r\n    abstract();\r\n  }\r\n\r\n  setReady() {\r\n    this.ready = true;\r\n    this.dispatchEvent(EventType.CHANGE);\r\n  }\r\n\r\n  handleTileChange_() {\r\n    if (this.tile.getState() === TileState.LOADED) {\r\n      this.loaded = true;\r\n      this.uploadTile();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"./Helper.js\").default} helper The WebGL helper.\r\n   */\r\n  setHelper(helper) {\r\n    this.helper = helper;\r\n    if (this.helper && this.loaded) {\r\n      this.uploadTile();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  disposeInternal() {\r\n    this.setHelper(null);\r\n    this.tile.removeEventListener(EventType.CHANGE, this.handleTileChange_);\r\n  }\r\n}\r\n\r\nexport default BaseTileRepresentation;\r\n", "/**\r\n * @module ol/webgl/TileTexture\r\n */\r\n\r\nimport DataTile, {asArrayLike, asImageLike} from '../DataTile.js';\r\nimport ImageTile from '../ImageTile.js';\r\nimport {createCanvasContext2D} from '../dom.js';\r\nimport ReprojTile from '../reproj/Tile.js';\r\nimport {toSize} from '../size.js';\r\nimport {ARRAY_BUFFER, STATIC_DRAW} from '../webgl.js';\r\nimport BaseTileRepresentation from './BaseTileRepresentation.js';\r\nimport WebGLArrayBuffer from './Buffer.js';\r\n\r\n/**\r\n * @param {WebGLRenderingContext} gl The WebGL context.\r\n * @param {WebGLTexture} texture The texture.\r\n * @param {boolean} interpolate Interpolate when resampling.\r\n */\r\nfunction bindAndConfigure(gl, texture, interpolate) {\r\n  const resampleFilter = interpolate ? gl.LINEAR : gl.NEAREST;\r\n  gl.bindTexture(gl.TEXTURE_2D, texture);\r\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, resampleFilter);\r\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, resampleFilter);\r\n}\r\n\r\n/**\r\n * @param {WebGLRenderingContext} gl The WebGL context.\r\n * @param {WebGLTexture} texture The texture.\r\n * @param {import(\"../DataTile.js\").ImageLike} image The image.\r\n * @param {boolean} interpolate Interpolate when resampling.\r\n */\r\nfunction uploadImageTexture(gl, texture, image, interpolate) {\r\n  bindAndConfigure(gl, texture, interpolate);\r\n\r\n  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\r\n}\r\n\r\n/**\r\n * @param {import(\"./Helper.js\").default} helper The WebGL helper.\r\n * @param {WebGLTexture} texture The texture.\r\n * @param {import(\"../DataTile.js\").ArrayLike} data The pixel data.\r\n * @param {import(\"../size.js\").Size} size The pixel size.\r\n * @param {number} bandCount The band count.\r\n * @param {boolean} interpolate Interpolate when resampling.\r\n */\r\nfunction uploadDataTexture(\r\n  helper,\r\n  texture,\r\n  data,\r\n  size,\r\n  bandCount,\r\n  interpolate,\r\n) {\r\n  const gl = helper.getGL();\r\n  let textureType;\r\n  let canInterpolate;\r\n  if (data instanceof Float32Array) {\r\n    textureType = gl.FLOAT;\r\n    helper.getExtension('OES_texture_float');\r\n    const extension = helper.getExtension('OES_texture_float_linear');\r\n    canInterpolate = extension !== null;\r\n  } else {\r\n    textureType = gl.UNSIGNED_BYTE;\r\n    canInterpolate = true;\r\n  }\r\n  bindAndConfigure(gl, texture, interpolate && canInterpolate);\r\n\r\n  const bytesPerRow = data.byteLength / size[1];\r\n  let unpackAlignment = 1;\r\n  if (bytesPerRow % 8 === 0) {\r\n    unpackAlignment = 8;\r\n  } else if (bytesPerRow % 4 === 0) {\r\n    unpackAlignment = 4;\r\n  } else if (bytesPerRow % 2 === 0) {\r\n    unpackAlignment = 2;\r\n  }\r\n\r\n  let format;\r\n  switch (bandCount) {\r\n    case 1: {\r\n      format = gl.LUMINANCE;\r\n      break;\r\n    }\r\n    case 2: {\r\n      format = gl.LUMINANCE_ALPHA;\r\n      break;\r\n    }\r\n    case 3: {\r\n      format = gl.RGB;\r\n      break;\r\n    }\r\n    case 4: {\r\n      format = gl.RGBA;\r\n      break;\r\n    }\r\n    default: {\r\n      throw new Error(`Unsupported number of bands: ${bandCount}`);\r\n    }\r\n  }\r\n\r\n  const oldUnpackAlignment = gl.getParameter(gl.UNPACK_ALIGNMENT);\r\n  gl.pixelStorei(gl.UNPACK_ALIGNMENT, unpackAlignment);\r\n  gl.texImage2D(\r\n    gl.TEXTURE_2D,\r\n    0,\r\n    format,\r\n    size[0],\r\n    size[1],\r\n    0,\r\n    format,\r\n    textureType,\r\n    data,\r\n  );\r\n  gl.pixelStorei(gl.UNPACK_ALIGNMENT, oldUnpackAlignment);\r\n}\r\n\r\n/**\r\n * @type {CanvasRenderingContext2D}\r\n */\r\nlet pixelContext = null;\r\n\r\nfunction createPixelContext() {\r\n  pixelContext = createCanvasContext2D(1, 1, undefined, {\r\n    willReadFrequently: true,\r\n  });\r\n}\r\n\r\n/**\r\n * @typedef {import(\"../DataTile.js\").default|ImageTile|ReprojTile} TileType\r\n */\r\n\r\n/**\r\n * @extends {BaseTileRepresentation<TileType>}\r\n */\r\nclass TileTexture extends BaseTileRepresentation {\r\n  /**\r\n   * @param {import(\"./BaseTileRepresentation.js\").TileRepresentationOptions<TileType>} options The tile texture options.\r\n   */\r\n  constructor(options) {\r\n    super(options);\r\n\r\n    /**\r\n     * @type {Array<WebGLTexture>}\r\n     */\r\n    this.textures = [];\r\n\r\n    /**\r\n     * @type {import(\"../size.js\").Size}\r\n     * @private\r\n     */\r\n    this.renderSize_ = toSize(\r\n      options.grid.getTileSize(options.tile.tileCoord[0]),\r\n    );\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    this.bandCount = NaN;\r\n\r\n    const coords = new WebGLArrayBuffer(ARRAY_BUFFER, STATIC_DRAW);\r\n    coords.fromArray([\r\n      0, // P0\r\n      1,\r\n      1, // P1\r\n      1,\r\n      1, // P2\r\n      0,\r\n      0, // P3\r\n      0,\r\n    ]);\r\n    this.helper.flushBufferData(coords);\r\n\r\n    /**\r\n     * @type {WebGLArrayBuffer}\r\n     */\r\n    this.coords = coords;\r\n\r\n    this.setTile(options.tile);\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   * @param {import(\"./Helper.js\").default} helper The WebGL helper.\r\n   */\r\n  setHelper(helper) {\r\n    const gl = this.helper?.getGL();\r\n    if (gl) {\r\n      this.helper.deleteBuffer(this.coords);\r\n      for (let i = 0; i < this.textures.length; ++i) {\r\n        gl.deleteTexture(this.textures[i]);\r\n      }\r\n    }\r\n\r\n    super.setHelper(helper);\r\n\r\n    if (helper) {\r\n      helper.flushBufferData(this.coords);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  uploadTile() {\r\n    const helper = this.helper;\r\n    const gl = helper.getGL();\r\n    const tile = this.tile;\r\n\r\n    this.textures.length = 0;\r\n\r\n    /**\r\n     * @type {import(\"../DataTile.js\").Data}\r\n     */\r\n    let data;\r\n\r\n    if (tile instanceof ImageTile || tile instanceof ReprojTile) {\r\n      data = tile.getImage();\r\n    } else {\r\n      data = tile.getData();\r\n    }\r\n\r\n    const image = asImageLike(data);\r\n    if (image) {\r\n      const texture = gl.createTexture();\r\n      this.textures.push(texture);\r\n      this.bandCount = 4;\r\n      uploadImageTexture(gl, texture, image, tile.interpolate);\r\n      this.setReady();\r\n      return;\r\n    }\r\n\r\n    data = asArrayLike(data);\r\n\r\n    const sourceTileSize = /** @type {DataTile} */ (tile).getSize();\r\n    const pixelSize = [\r\n      sourceTileSize[0] + 2 * this.gutter,\r\n      sourceTileSize[1] + 2 * this.gutter,\r\n    ];\r\n    const isFloat = data instanceof Float32Array;\r\n    const pixelCount = pixelSize[0] * pixelSize[1];\r\n    const DataType = isFloat ? Float32Array : Uint8Array;\r\n    const bytesPerElement = DataType.BYTES_PER_ELEMENT;\r\n    const bytesPerRow = data.byteLength / pixelSize[1];\r\n\r\n    this.bandCount = Math.floor(bytesPerRow / bytesPerElement / pixelSize[0]);\r\n    const textureCount = Math.ceil(this.bandCount / 4);\r\n\r\n    if (textureCount === 1) {\r\n      const texture = gl.createTexture();\r\n      this.textures.push(texture);\r\n      uploadDataTexture(\r\n        helper,\r\n        texture,\r\n        data,\r\n        pixelSize,\r\n        this.bandCount,\r\n        tile.interpolate,\r\n      );\r\n      this.setReady();\r\n      return;\r\n    }\r\n\r\n    const textureDataArrays = new Array(textureCount);\r\n    for (let textureIndex = 0; textureIndex < textureCount; ++textureIndex) {\r\n      const texture = gl.createTexture();\r\n      this.textures.push(texture);\r\n\r\n      const bandCount =\r\n        textureIndex < textureCount - 1 ? 4 : ((this.bandCount - 1) % 4) + 1;\r\n      textureDataArrays[textureIndex] = new DataType(pixelCount * bandCount);\r\n    }\r\n\r\n    let dataIndex = 0;\r\n    let rowOffset = 0;\r\n    const colCount = pixelSize[0] * this.bandCount;\r\n    for (let rowIndex = 0; rowIndex < pixelSize[1]; ++rowIndex) {\r\n      for (let colIndex = 0; colIndex < colCount; ++colIndex) {\r\n        const dataValue = data[rowOffset + colIndex];\r\n\r\n        const pixelIndex = Math.floor(dataIndex / this.bandCount);\r\n        const bandIndex = colIndex % this.bandCount;\r\n        const textureIndex = Math.floor(bandIndex / 4);\r\n        const textureData = textureDataArrays[textureIndex];\r\n        const bandCount = textureData.length / pixelCount;\r\n        const textureBandIndex = bandIndex % 4;\r\n        textureData[pixelIndex * bandCount + textureBandIndex] = dataValue;\r\n\r\n        ++dataIndex;\r\n      }\r\n      rowOffset += bytesPerRow / bytesPerElement;\r\n    }\r\n\r\n    for (let textureIndex = 0; textureIndex < textureCount; ++textureIndex) {\r\n      const texture = this.textures[textureIndex];\r\n      const textureData = textureDataArrays[textureIndex];\r\n      const bandCount = textureData.length / pixelCount;\r\n      uploadDataTexture(\r\n        helper,\r\n        texture,\r\n        textureData,\r\n        pixelSize,\r\n        bandCount,\r\n        tile.interpolate,\r\n      );\r\n    }\r\n\r\n    this.setReady();\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../DataTile.js\").ImageLike} image The image.\r\n   * @param {number} renderCol The column index (in rendered tile space).\r\n   * @param {number} renderRow The row index (in rendered tile space).\r\n   * @return {Uint8ClampedArray|null} The data.\r\n   * @private\r\n   */\r\n  getImagePixelData_(image, renderCol, renderRow) {\r\n    const gutter = this.gutter;\r\n    const renderWidth = this.renderSize_[0];\r\n    const renderHeight = this.renderSize_[1];\r\n\r\n    if (!pixelContext) {\r\n      createPixelContext();\r\n    }\r\n    pixelContext.clearRect(0, 0, 1, 1);\r\n\r\n    const sourceWidth = image.width;\r\n    const sourceHeight = image.height;\r\n\r\n    const sourceWidthWithoutGutter = sourceWidth - 2 * gutter;\r\n    const sourceHeightWithoutGutter = sourceHeight - 2 * gutter;\r\n\r\n    const sourceCol =\r\n      gutter + Math.floor(sourceWidthWithoutGutter * (renderCol / renderWidth));\r\n\r\n    const sourceRow =\r\n      gutter +\r\n      Math.floor(sourceHeightWithoutGutter * (renderRow / renderHeight));\r\n\r\n    let data;\r\n    try {\r\n      pixelContext.drawImage(image, sourceCol, sourceRow, 1, 1, 0, 0, 1, 1);\r\n      data = pixelContext.getImageData(0, 0, 1, 1).data;\r\n    } catch {\r\n      pixelContext = null;\r\n      return null;\r\n    }\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../DataTile.js\").ArrayLike} data The data.\r\n   * @param {import(\"../size.js\").Size} sourceSize The size.\r\n   * @param {number} renderCol The column index (in rendered tile space).\r\n   * @param {number} renderRow The row index (in rendered tile space).\r\n   * @return {import(\"../DataTile.js\").ArrayLike|null} The data.\r\n   * @private\r\n   */\r\n  getArrayPixelData_(data, sourceSize, renderCol, renderRow) {\r\n    const gutter = this.gutter;\r\n    const renderWidth = this.renderSize_[0];\r\n    const renderHeight = this.renderSize_[1];\r\n\r\n    const sourceWidthWithoutGutter = sourceSize[0];\r\n    const sourceHeightWithoutGutter = sourceSize[1];\r\n    const sourceWidth = sourceWidthWithoutGutter + 2 * gutter;\r\n    const sourceHeight = sourceHeightWithoutGutter + 2 * gutter;\r\n\r\n    const sourceCol =\r\n      gutter + Math.floor(sourceWidthWithoutGutter * (renderCol / renderWidth));\r\n\r\n    const sourceRow =\r\n      gutter +\r\n      Math.floor(sourceHeightWithoutGutter * (renderRow / renderHeight));\r\n\r\n    if (data instanceof DataView) {\r\n      const bytesPerPixel = data.byteLength / (sourceWidth * sourceHeight);\r\n      const offset = bytesPerPixel * (sourceRow * sourceWidth + sourceCol);\r\n      const buffer = data.buffer.slice(offset, offset + bytesPerPixel);\r\n      return new DataView(buffer);\r\n    }\r\n\r\n    const offset = this.bandCount * (sourceRow * sourceWidth + sourceCol);\r\n    return data.slice(offset, offset + this.bandCount);\r\n  }\r\n\r\n  /**\r\n   * Get data for a pixel.  If the tile is not loaded, null is returned.\r\n   * @param {number} renderCol The column index (in rendered tile space).\r\n   * @param {number} renderRow The row index (in rendered tile space).\r\n   * @return {import(\"../DataTile.js\").ArrayLike|null} The data.\r\n   */\r\n  getPixelData(renderCol, renderRow) {\r\n    if (!this.loaded) {\r\n      return null;\r\n    }\r\n\r\n    if (this.tile instanceof DataTile) {\r\n      const data = this.tile.getData();\r\n      const arrayData = asArrayLike(data);\r\n      if (arrayData) {\r\n        const sourceSize = this.tile.getSize();\r\n        return this.getArrayPixelData_(\r\n          arrayData,\r\n          sourceSize,\r\n          renderCol,\r\n          renderRow,\r\n        );\r\n      }\r\n      return this.getImagePixelData_(asImageLike(data), renderCol, renderRow);\r\n    }\r\n\r\n    return this.getImagePixelData_(this.tile.getImage(), renderCol, renderRow);\r\n  }\r\n}\r\n\r\nexport default TileTexture;\r\n", "/**\r\n * @module ol/renderer/webgl/TileLayerBase\r\n */\r\nimport TileRange from '../../TileRange.js';\r\nimport TileState from '../../TileState.js';\r\nimport {descending} from '../../array.js';\r\nimport {getIntersection, getRotatedViewport, isEmpty} from '../../extent.js';\r\nimport {fromUserExtent} from '../../proj.js';\r\nimport {toSize} from '../../size.js';\r\nimport LRUCache from '../../structs/LRUCache.js';\r\nimport {\r\n  createOrUpdate as createTileCoord,\r\n  getKey as getTileCoordKey,\r\n} from '../../tilecoord.js';\r\nimport {\r\n  create as createTransform,\r\n  reset as resetTransform,\r\n  rotate as rotateTransform,\r\n  scale as scaleTransform,\r\n  translate as translateTransform,\r\n} from '../../transform.js';\r\nimport {abstract, getUid} from '../../util.js';\r\nimport {create as createMat4} from '../../vec/mat4.js';\r\nimport WebGLLayerRenderer from './Layer.js';\r\n\r\nexport const Uniforms = {\r\n  TILE_TRANSFORM: 'u_tileTransform',\r\n  TRANSITION_ALPHA: 'u_transitionAlpha',\r\n  DEPTH: 'u_depth',\r\n  RENDER_EXTENT: 'u_renderExtent', // intersection of layer, source, and view extent\r\n  PATTERN_ORIGIN: 'u_patternOrigin',\r\n  RESOLUTION: 'u_resolution',\r\n  ZOOM: 'u_zoom',\r\n  GLOBAL_ALPHA: 'u_globalAlpha',\r\n  PROJECTION_MATRIX: 'u_projectionMatrix',\r\n  SCREEN_TO_WORLD_MATRIX: 'u_screenToWorldMatrix',\r\n};\r\n\r\n/**\r\n * Transform a zoom level into a depth value; zoom level zero has a depth value of 0.5, and increasing values\r\n * have a depth trending towards 0\r\n * @param {number} z A zoom level.\r\n * @return {number} A depth value.\r\n */\r\nfunction depthForZ(z) {\r\n  return 1 / (z + 2);\r\n}\r\n\r\n/**\r\n * @typedef {import(\"../../webgl/BaseTileRepresentation.js\").default<import(\"../../Tile.js\").default>} AbstractTileRepresentation\r\n */\r\n/**\r\n * @typedef {Object} TileRepresentationLookup\r\n * @property {Set<string>} tileIds The set of tile ids in the lookup.\r\n * @property {Object<number, Set<AbstractTileRepresentation>>} representationsByZ Tile representations by zoom level.\r\n */\r\n\r\n/**\r\n * @return {TileRepresentationLookup} A new tile representation lookup.\r\n */\r\nexport function newTileRepresentationLookup() {\r\n  return {tileIds: new Set(), representationsByZ: {}};\r\n}\r\n\r\n/**\r\n * Check if a tile is already in the tile representation lookup.\r\n * @param {TileRepresentationLookup} tileRepresentationLookup Lookup of tile representations by zoom level.\r\n * @param {import(\"../../Tile.js\").default} tile A tile.\r\n * @return {boolean} The tile is already in the lookup.\r\n */\r\nfunction lookupHasTile(tileRepresentationLookup, tile) {\r\n  return tileRepresentationLookup.tileIds.has(getUid(tile));\r\n}\r\n\r\n/**\r\n * Add a tile representation to the lookup.\r\n * @param {TileRepresentationLookup} tileRepresentationLookup Lookup of tile representations by zoom level.\r\n * @param {AbstractTileRepresentation} tileRepresentation A tile representation.\r\n * @param {number} z The zoom level.\r\n */\r\nfunction addTileRepresentationToLookup(\r\n  tileRepresentationLookup,\r\n  tileRepresentation,\r\n  z,\r\n) {\r\n  const representationsByZ = tileRepresentationLookup.representationsByZ;\r\n  if (!(z in representationsByZ)) {\r\n    representationsByZ[z] = new Set();\r\n  }\r\n  representationsByZ[z].add(tileRepresentation);\r\n  tileRepresentationLookup.tileIds.add(getUid(tileRepresentation.tile));\r\n}\r\n\r\n/**\r\n * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n * @param {import(\"../../extent.js\").Extent} extent The frame extent.\r\n * @return {import(\"../../extent.js\").Extent} Frame extent intersected with layer extents.\r\n */\r\nfunction getRenderExtent(frameState, extent) {\r\n  const layerState = frameState.layerStatesArray[frameState.layerIndex];\r\n  if (layerState.extent) {\r\n    extent = getIntersection(\r\n      extent,\r\n      fromUserExtent(layerState.extent, frameState.viewState.projection),\r\n    );\r\n  }\r\n  const source = /** @type {import(\"../../source/Tile.js\").default} */ (\r\n    layerState.layer.getRenderSource()\r\n  );\r\n  if (!source.getWrapX()) {\r\n    const gridExtent = source\r\n      .getTileGridForProjection(frameState.viewState.projection)\r\n      .getExtent();\r\n    if (gridExtent) {\r\n      extent = getIntersection(extent, gridExtent);\r\n    }\r\n  }\r\n  return extent;\r\n}\r\n\r\n/**\r\n * @param {import(\"../../source/Tile.js\").default} source The source.\r\n * @param {import('../../tilecoord.js').TileCoord} tileCoord The tile coordinate.\r\n * @return {string} The cache key.\r\n */\r\nexport function getCacheKey(source, tileCoord) {\r\n  return `${source.getKey()},${source.getRevision()},${getTileCoordKey(tileCoord)}`;\r\n}\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {Object<string, import(\"../../webgl/Helper\").UniformValue>} [uniforms] Additional uniforms\r\n * made available to shaders.\r\n * @property {number} [cacheSize=512] The tile representation cache size.\r\n * @property {Array<import('./Layer.js').PostProcessesOptions>} [postProcesses] Post-processes definitions.\r\n */\r\n\r\n/**\r\n * @typedef {import(\"../../layer/BaseTile.js\").default} BaseLayerType\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Base WebGL renderer for tile layers.\r\n * @template {BaseLayerType} LayerType\r\n * @template {import(\"../../Tile.js\").default} TileType\r\n * @template {import(\"../../webgl/BaseTileRepresentation.js\").default<TileType>} TileRepresentation\r\n * @extends {WebGLLayerRenderer<LayerType>}\r\n */\r\nclass WebGLBaseTileLayerRenderer extends WebGLLayerRenderer {\r\n  /**\r\n   * @param {LayerType} tileLayer Tile layer.\r\n   * @param {Options} options Options.\r\n   */\r\n  constructor(tileLayer, options) {\r\n    super(tileLayer, {\r\n      uniforms: options.uniforms,\r\n      postProcesses: options.postProcesses,\r\n    });\r\n\r\n    /**\r\n     * The last call to `renderFrame` was completed with all tiles loaded\r\n     * @type {boolean}\r\n     */\r\n    this.renderComplete = false;\r\n\r\n    /**\r\n     * This transform converts representation coordinates to screen coordinates.\r\n     * @type {import(\"../../transform.js\").Transform}\r\n     * @private\r\n     */\r\n    this.tileTransform_ = createTransform();\r\n\r\n    /**\r\n     * @type {Array<number>}\r\n     * @protected\r\n     */\r\n    this.tempMat4 = createMat4();\r\n\r\n    /**\r\n     * @type {import(\"../../TileRange.js\").default}\r\n     * @private\r\n     */\r\n    this.tempTileRange_ = new TileRange(0, 0, 0, 0);\r\n\r\n    /**\r\n     * @type {import(\"../../tilecoord.js\").TileCoord}\r\n     * @private\r\n     */\r\n    this.tempTileCoord_ = createTileCoord(0, 0, 0);\r\n\r\n    /**\r\n     * @type {import(\"../../size.js\").Size}\r\n     * @private\r\n     */\r\n    this.tempSize_ = [0, 0];\r\n\r\n    const cacheSize = options.cacheSize !== undefined ? options.cacheSize : 512;\r\n    /**\r\n     * @type {import(\"../../structs/LRUCache.js\").default<TileRepresentation>}\r\n     * @protected\r\n     */\r\n    this.tileRepresentationCache = new LRUCache(cacheSize);\r\n\r\n    /**\r\n     * @protected\r\n     * @type {import(\"../../Map.js\").FrameState|null}\r\n     */\r\n    this.frameState = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../proj/Projection.js\").default}\r\n     */\r\n    this.renderedProjection_ = undefined;\r\n  }\r\n\r\n  /**\r\n   * @param {Options} options Options.\r\n   * @override\r\n   */\r\n  reset(options) {\r\n    super.reset({\r\n      uniforms: options.uniforms,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Determine whether renderFrame should be called.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @return {boolean} Layer is ready to be rendered.\r\n   * @override\r\n   */\r\n  prepareFrameInternal(frameState) {\r\n    if (!this.renderedProjection_) {\r\n      this.renderedProjection_ = frameState.viewState.projection;\r\n    } else if (frameState.viewState.projection !== this.renderedProjection_) {\r\n      this.clearCache();\r\n      this.renderedProjection_ = frameState.viewState.projection;\r\n    }\r\n\r\n    const layer = this.getLayer();\r\n    const source = layer.getRenderSource();\r\n    if (!source) {\r\n      return false;\r\n    }\r\n\r\n    if (isEmpty(getRenderExtent(frameState, frameState.extent))) {\r\n      return false;\r\n    }\r\n    return source.getState() === 'ready';\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {import(\"../../webgl/BaseTileRepresentation.js\").TileRepresentationOptions<TileType>} options tile representation options\r\n   * @return {TileRepresentation} A new tile representation\r\n   * @protected\r\n   */\r\n  createTileRepresentation(options) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @param {import(\"../../extent.js\").Extent} extent The extent to be rendered.\r\n   * @param {number} initialZ The zoom level.\r\n   * @param {TileRepresentationLookup} tileRepresentationLookup The zoom level.\r\n   * @param {number} preload Number of additional levels to load.\r\n   */\r\n  enqueueTiles(\r\n    frameState,\r\n    extent,\r\n    initialZ,\r\n    tileRepresentationLookup,\r\n    preload,\r\n  ) {\r\n    const viewState = frameState.viewState;\r\n    const tileLayer = this.getLayer();\r\n    const tileSource = tileLayer.getRenderSource();\r\n    const tileGrid = tileSource.getTileGridForProjection(viewState.projection);\r\n    const gutter = tileSource.getGutterForProjection(viewState.projection);\r\n\r\n    const tileSourceKey = getUid(tileSource);\r\n    if (!(tileSourceKey in frameState.wantedTiles)) {\r\n      frameState.wantedTiles[tileSourceKey] = {};\r\n    }\r\n\r\n    const wantedTiles = frameState.wantedTiles[tileSourceKey];\r\n    const tileRepresentationCache = this.tileRepresentationCache;\r\n\r\n    const map = tileLayer.getMapInternal();\r\n    const minZ = Math.max(\r\n      initialZ - preload,\r\n      tileGrid.getMinZoom(),\r\n      tileGrid.getZForResolution(\r\n        Math.min(\r\n          tileLayer.getMaxResolution(),\r\n          map\r\n            ? map\r\n                .getView()\r\n                .getResolutionForZoom(Math.max(tileLayer.getMinZoom(), 0))\r\n            : tileGrid.getResolution(0),\r\n        ),\r\n        tileSource.zDirection,\r\n      ),\r\n    );\r\n    const rotation = viewState.rotation;\r\n    const viewport = rotation\r\n      ? getRotatedViewport(\r\n          viewState.center,\r\n          viewState.resolution,\r\n          rotation,\r\n          frameState.size,\r\n        )\r\n      : undefined;\r\n    for (let z = initialZ; z >= minZ; --z) {\r\n      const tileRange = tileGrid.getTileRangeForExtentAndZ(\r\n        extent,\r\n        z,\r\n        this.tempTileRange_,\r\n      );\r\n\r\n      const tileResolution = tileGrid.getResolution(z);\r\n\r\n      for (let x = tileRange.minX; x <= tileRange.maxX; ++x) {\r\n        for (let y = tileRange.minY; y <= tileRange.maxY; ++y) {\r\n          if (\r\n            rotation &&\r\n            !tileGrid.tileCoordIntersectsViewport([z, x, y], viewport)\r\n          ) {\r\n            continue;\r\n          }\r\n          const tileCoord = createTileCoord(z, x, y, this.tempTileCoord_);\r\n          const cacheKey = getCacheKey(tileSource, tileCoord);\r\n\r\n          /** @type {TileRepresentation} */\r\n          let tileRepresentation;\r\n\r\n          /** @type {TileType} */\r\n          let tile;\r\n\r\n          if (tileRepresentationCache.containsKey(cacheKey)) {\r\n            tileRepresentation = tileRepresentationCache.get(cacheKey);\r\n            tile = tileRepresentation.tile;\r\n          }\r\n          if (\r\n            !tileRepresentation ||\r\n            tileRepresentation.tile.key !== tileSource.getKey()\r\n          ) {\r\n            tile = tileSource.getTile(\r\n              z,\r\n              x,\r\n              y,\r\n              frameState.pixelRatio,\r\n              viewState.projection,\r\n            );\r\n            if (!tile) {\r\n              continue;\r\n            }\r\n          }\r\n\r\n          if (lookupHasTile(tileRepresentationLookup, tile)) {\r\n            continue;\r\n          }\r\n\r\n          if (!tileRepresentation) {\r\n            tileRepresentation = this.createTileRepresentation({\r\n              tile: tile,\r\n              grid: tileGrid,\r\n              helper: this.helper,\r\n              gutter: gutter,\r\n            });\r\n            tileRepresentationCache.set(cacheKey, tileRepresentation);\r\n          } else {\r\n            tileRepresentation.setTile(tile);\r\n          }\r\n\r\n          addTileRepresentationToLookup(\r\n            tileRepresentationLookup,\r\n            tileRepresentation,\r\n            z,\r\n          );\r\n\r\n          const tileQueueKey = tile.getKey();\r\n          wantedTiles[tileQueueKey] = true;\r\n\r\n          if (tile.getState() === TileState.IDLE) {\r\n            if (!frameState.tileQueue.isKeyQueued(tileQueueKey)) {\r\n              frameState.tileQueue.enqueue([\r\n                tile,\r\n                tileSourceKey,\r\n                tileGrid.getTileCoordCenter(tileCoord),\r\n                tileResolution,\r\n              ]);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @param {boolean} tilesWithAlpha True if at least one of the rendered tiles has alpha\r\n   * @protected\r\n   */\r\n  beforeTilesRender(frameState, tilesWithAlpha) {\r\n    this.helper.prepareDraw(this.frameState, !tilesWithAlpha, true);\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @return {boolean} If returns false, tile mask rendering will be skipped\r\n   * @protected\r\n   */\r\n  beforeTilesMaskRender(frameState) {\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * @param {TileRepresentation} tileRepresentation Tile representation\r\n   * @param {import(\"../../transform.js\").Transform} tileTransform Tile transform\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state\r\n   * @param {import(\"../../extent.js\").Extent} renderExtent Render extent\r\n   * @param {number} tileResolution Tile resolution\r\n   * @param {import(\"../../size.js\").Size} tileSize Tile size\r\n   * @param {import(\"../../coordinate.js\").Coordinate} tileOrigin Tile origin\r\n   * @param {import(\"../../extent.js\").Extent} tileExtent tile Extent\r\n   * @param {number} depth Depth\r\n   * @param {number} gutter Gutter\r\n   * @param {number} alpha Alpha\r\n   * @protected\r\n   */\r\n  renderTile(\r\n    tileRepresentation,\r\n    tileTransform,\r\n    frameState,\r\n    renderExtent,\r\n    tileResolution,\r\n    tileSize,\r\n    tileOrigin,\r\n    tileExtent,\r\n    depth,\r\n    gutter,\r\n    alpha,\r\n  ) {}\r\n\r\n  /**\r\n   * @param {TileRepresentation} tileRepresentation Tile representation\r\n   * @param {number} tileZ Tile Z\r\n   * @param {import(\"../../extent.js\").Extent} extent Render extent\r\n   * @param {number} depth Depth\r\n   * @protected\r\n   */\r\n  renderTileMask(tileRepresentation, tileZ, extent, depth) {}\r\n\r\n  drawTile_(\r\n    frameState,\r\n    tileRepresentation,\r\n    tileZ,\r\n    gutter,\r\n    extent,\r\n    alphaLookup,\r\n    tileGrid,\r\n  ) {\r\n    if (!tileRepresentation.ready) {\r\n      return;\r\n    }\r\n    const tile = tileRepresentation.tile;\r\n    const tileCoord = tile.tileCoord;\r\n    const tileCoordKey = getTileCoordKey(tileCoord);\r\n    const alpha = tileCoordKey in alphaLookup ? alphaLookup[tileCoordKey] : 1;\r\n\r\n    const tileResolution = tileGrid.getResolution(tileZ);\r\n    const tileSize = toSize(tileGrid.getTileSize(tileZ), this.tempSize_);\r\n    const tileOrigin = tileGrid.getOrigin(tileZ);\r\n    const tileExtent = tileGrid.getTileCoordExtent(tileCoord);\r\n    // tiles with alpha are rendered last to allow blending\r\n    const depth = alpha < 1 ? -1 : depthForZ(tileZ);\r\n    if (alpha < 1) {\r\n      frameState.animate = true;\r\n    }\r\n\r\n    const viewState = frameState.viewState;\r\n    const centerX = viewState.center[0];\r\n    const centerY = viewState.center[1];\r\n\r\n    const tileWidthWithGutter = tileSize[0] + 2 * gutter;\r\n    const tileHeightWithGutter = tileSize[1] + 2 * gutter;\r\n\r\n    const aspectRatio = tileWidthWithGutter / tileHeightWithGutter;\r\n\r\n    const centerI = (centerX - tileOrigin[0]) / (tileSize[0] * tileResolution);\r\n    const centerJ = (tileOrigin[1] - centerY) / (tileSize[1] * tileResolution);\r\n\r\n    const tileScale = viewState.resolution / tileResolution;\r\n\r\n    const tileCenterI = tileCoord[1];\r\n    const tileCenterJ = tileCoord[2];\r\n\r\n    resetTransform(this.tileTransform_);\r\n    scaleTransform(\r\n      this.tileTransform_,\r\n      2 / ((frameState.size[0] * tileScale) / tileWidthWithGutter),\r\n      -2 / ((frameState.size[1] * tileScale) / tileWidthWithGutter),\r\n    );\r\n    rotateTransform(this.tileTransform_, viewState.rotation);\r\n    scaleTransform(this.tileTransform_, 1, 1 / aspectRatio);\r\n    translateTransform(\r\n      this.tileTransform_,\r\n      (tileSize[0] * (tileCenterI - centerI) - gutter) / tileWidthWithGutter,\r\n      (tileSize[1] * (tileCenterJ - centerJ) - gutter) / tileHeightWithGutter,\r\n    );\r\n\r\n    this.renderTile(\r\n      /** @type {TileRepresentation} */ (tileRepresentation),\r\n      this.tileTransform_,\r\n      frameState,\r\n      extent,\r\n      tileResolution,\r\n      tileSize,\r\n      tileOrigin,\r\n      tileExtent,\r\n      depth,\r\n      gutter,\r\n      alpha,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Render the layer.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @return {HTMLElement} The rendered element.\r\n   * @override\r\n   */\r\n  renderFrame(frameState) {\r\n    this.frameState = frameState;\r\n    this.renderComplete = true;\r\n    const gl = this.helper.getGL();\r\n    this.preRender(gl, frameState);\r\n\r\n    const viewState = frameState.viewState;\r\n    const tileLayer = this.getLayer();\r\n    const tileSource = tileLayer.getRenderSource();\r\n    const tileGrid = tileSource.getTileGridForProjection(viewState.projection);\r\n    const gutter = tileSource.getGutterForProjection(viewState.projection);\r\n    const extent = getRenderExtent(frameState, frameState.extent);\r\n    const z = tileGrid.getZForResolution(\r\n      viewState.resolution,\r\n      tileSource.zDirection,\r\n    );\r\n\r\n    /**\r\n     * @type {TileRepresentationLookup}\r\n     */\r\n    const tileRepresentationLookup = newTileRepresentationLookup();\r\n\r\n    const preload = tileLayer.getPreload();\r\n    if (frameState.nextExtent) {\r\n      const targetZ = tileGrid.getZForResolution(\r\n        viewState.nextResolution,\r\n        tileSource.zDirection,\r\n      );\r\n      const nextExtent = getRenderExtent(frameState, frameState.nextExtent);\r\n      this.enqueueTiles(\r\n        frameState,\r\n        nextExtent,\r\n        targetZ,\r\n        tileRepresentationLookup,\r\n        preload,\r\n      );\r\n    }\r\n\r\n    this.enqueueTiles(frameState, extent, z, tileRepresentationLookup, 0);\r\n    if (preload > 0) {\r\n      setTimeout(() => {\r\n        this.enqueueTiles(\r\n          frameState,\r\n          extent,\r\n          z - 1,\r\n          tileRepresentationLookup,\r\n          preload - 1,\r\n        );\r\n      }, 0);\r\n    }\r\n\r\n    /**\r\n     * A lookup of alpha values for tiles at the target rendering resolution\r\n     * for tiles that are in transition.  If a tile coord key is absent from\r\n     * this lookup, the tile should be rendered at alpha 1.\r\n     * @type {Object<string, number>}\r\n     */\r\n    const alphaLookup = {};\r\n\r\n    let blend = false;\r\n    const representationsByZ = tileRepresentationLookup.representationsByZ;\r\n\r\n    // look for cached tiles to use if a target tile is not ready\r\n    if (z in representationsByZ) {\r\n      const uid = getUid(this);\r\n      const time = frameState.time;\r\n      for (const tileRepresentation of representationsByZ[z]) {\r\n        const tile = tileRepresentation.tile;\r\n        if (tile.getState() === TileState.EMPTY) {\r\n          continue;\r\n        }\r\n        const tileCoord = tile.tileCoord;\r\n\r\n        if (tileRepresentation.ready) {\r\n          const alpha = tile.getAlpha(uid, time);\r\n          if (alpha === 1) {\r\n            // no need to look for alt tiles\r\n            tile.endTransition(uid);\r\n            continue;\r\n          }\r\n          blend = true;\r\n          const tileCoordKey = getTileCoordKey(tileCoord);\r\n          alphaLookup[tileCoordKey] = alpha;\r\n        }\r\n        this.renderComplete = false;\r\n\r\n        // first look for child tiles (at z + 1)\r\n        const coveredByChildren = this.findAltTiles_(\r\n          tileGrid,\r\n          tileCoord,\r\n          z + 1,\r\n          tileRepresentationLookup,\r\n        );\r\n\r\n        if (coveredByChildren) {\r\n          continue;\r\n        }\r\n\r\n        // next look for parent tiles\r\n        const minZoom = tileGrid.getMinZoom();\r\n        for (let parentZ = z - 1; parentZ >= minZoom; --parentZ) {\r\n          const coveredByParent = this.findAltTiles_(\r\n            tileGrid,\r\n            tileCoord,\r\n            parentZ,\r\n            tileRepresentationLookup,\r\n          );\r\n\r\n          if (coveredByParent) {\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    const zs = Object.keys(representationsByZ).map(Number).sort(descending);\r\n\r\n    const renderTileMask = this.beforeTilesMaskRender(frameState);\r\n\r\n    if (renderTileMask) {\r\n      for (let j = 0, jj = zs.length; j < jj; ++j) {\r\n        const tileZ = zs[j];\r\n        for (const tileRepresentation of representationsByZ[tileZ]) {\r\n          const tileCoord = tileRepresentation.tile.tileCoord;\r\n          const tileCoordKey = getTileCoordKey(tileCoord);\r\n          // do not render the tile mask if alpha < 1\r\n          if (tileCoordKey in alphaLookup) {\r\n            continue;\r\n          }\r\n          const tileExtent = tileGrid.getTileCoordExtent(tileCoord);\r\n          this.renderTileMask(\r\n            /** @type {TileRepresentation} */ (tileRepresentation),\r\n            tileZ,\r\n            tileExtent,\r\n            depthForZ(tileZ),\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    this.beforeTilesRender(frameState, blend);\r\n\r\n    for (let j = 0, jj = zs.length; j < jj; ++j) {\r\n      const tileZ = zs[j];\r\n      for (const tileRepresentation of representationsByZ[tileZ]) {\r\n        const tileCoord = tileRepresentation.tile.tileCoord;\r\n        const tileCoordKey = getTileCoordKey(tileCoord);\r\n        if (tileCoordKey in alphaLookup) {\r\n          continue;\r\n        }\r\n\r\n        this.drawTile_(\r\n          frameState,\r\n          tileRepresentation,\r\n          tileZ,\r\n          gutter,\r\n          extent,\r\n          alphaLookup,\r\n          tileGrid,\r\n        );\r\n      }\r\n    }\r\n\r\n    if (z in representationsByZ) {\r\n      for (const tileRepresentation of representationsByZ[z]) {\r\n        const tileCoord = tileRepresentation.tile.tileCoord;\r\n        const tileCoordKey = getTileCoordKey(tileCoord);\r\n        if (tileCoordKey in alphaLookup) {\r\n          this.drawTile_(\r\n            frameState,\r\n            tileRepresentation,\r\n            z,\r\n            gutter,\r\n            extent,\r\n            alphaLookup,\r\n            tileGrid,\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    this.beforeFinalize(frameState);\r\n    this.helper.finalizeDraw(\r\n      frameState,\r\n      this.dispatchPreComposeEvent,\r\n      this.dispatchPostComposeEvent,\r\n    );\r\n\r\n    const canvas = this.helper.getCanvas();\r\n\r\n    const tileRepresentationCache = this.tileRepresentationCache;\r\n    while (tileRepresentationCache.canExpireCache()) {\r\n      const tileRepresentation = tileRepresentationCache.pop();\r\n      tileRepresentation.dispose();\r\n    }\r\n\r\n    this.postRender(gl, frameState);\r\n    return canvas;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @protected\r\n   */\r\n  beforeFinalize(frameState) {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Look for tiles covering the provided tile coordinate at an alternate\r\n   * zoom level.  Loaded tiles will be added to the provided tile representation lookup.\r\n   * @param {import(\"../../tilegrid/TileGrid.js\").default} tileGrid The tile grid.\r\n   * @param {import(\"../../tilecoord.js\").TileCoord} tileCoord The target tile coordinate.\r\n   * @param {number} altZ The alternate zoom level.\r\n   * @param {TileRepresentationLookup} tileRepresentationLookup Lookup of\r\n   * tile representations by zoom level.\r\n   * @return {boolean} The tile coordinate is covered by loaded tiles at the alternate zoom level.\r\n   * @private\r\n   */\r\n  findAltTiles_(tileGrid, tileCoord, altZ, tileRepresentationLookup) {\r\n    const tileRange = tileGrid.getTileRangeForTileCoordAndZ(\r\n      tileCoord,\r\n      altZ,\r\n      this.tempTileRange_,\r\n    );\r\n\r\n    if (!tileRange) {\r\n      return false;\r\n    }\r\n\r\n    let covered = true;\r\n    const tileRepresentationCache = this.tileRepresentationCache;\r\n    const source = this.getLayer().getRenderSource();\r\n    for (let x = tileRange.minX; x <= tileRange.maxX; ++x) {\r\n      for (let y = tileRange.minY; y <= tileRange.maxY; ++y) {\r\n        const cacheKey = getCacheKey(source, [altZ, x, y]);\r\n        let loaded = false;\r\n        if (tileRepresentationCache.containsKey(cacheKey)) {\r\n          const tileRepresentation = tileRepresentationCache.get(cacheKey);\r\n          if (\r\n            tileRepresentation.ready &&\r\n            !lookupHasTile(tileRepresentationLookup, tileRepresentation.tile)\r\n          ) {\r\n            addTileRepresentationToLookup(\r\n              tileRepresentationLookup,\r\n              tileRepresentation,\r\n              altZ,\r\n            );\r\n            loaded = true;\r\n          }\r\n        }\r\n        if (!loaded) {\r\n          covered = false;\r\n        }\r\n      }\r\n    }\r\n    return covered;\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  clearCache() {\r\n    super.clearCache();\r\n\r\n    const tileRepresentationCache = this.tileRepresentationCache;\r\n    tileRepresentationCache.forEach((tileRepresentation) =>\r\n      tileRepresentation.dispose(),\r\n    );\r\n    tileRepresentationCache.clear();\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  afterHelperCreated() {\r\n    super.afterHelperCreated();\r\n\r\n    this.tileRepresentationCache.forEach((tileRepresentation) =>\r\n      tileRepresentation.setHelper(this.helper),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Clean up.\r\n   * @override\r\n   */\r\n  disposeInternal() {\r\n    super.disposeInternal();\r\n    delete this.frameState;\r\n  }\r\n}\r\n\r\nexport default WebGLBaseTileLayerRenderer;\r\n", "/**\r\n * @module ol/webgl/PaletteTexture\r\n */\r\n\r\nclass PaletteTexture {\r\n  /**\r\n   * @param {string} name The name of the texture.\r\n   * @param {Uint8Array} data The texture data.\r\n   */\r\n  constructor(name, data) {\r\n    this.name = name;\r\n    this.data = data;\r\n\r\n    /**\r\n     * @type {WebGLTexture|null}\r\n     * @private\r\n     */\r\n    this.texture_ = null;\r\n  }\r\n\r\n  /**\r\n   * @param {WebGLRenderingContext} gl Rendering context.\r\n   * @return {WebGLTexture} The texture.\r\n   */\r\n  getTexture(gl) {\r\n    if (!this.texture_) {\r\n      const texture = gl.createTexture();\r\n      gl.bindTexture(gl.TEXTURE_2D, texture);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n      gl.texImage2D(\r\n        gl.TEXTURE_2D,\r\n        0,\r\n        gl.RGBA,\r\n        this.data.length / 4,\r\n        1,\r\n        0,\r\n        gl.RGBA,\r\n        gl.UNSIGNED_BYTE,\r\n        this.data,\r\n      );\r\n      this.texture_ = texture;\r\n    }\r\n    return this.texture_;\r\n  }\r\n\r\n  /**\r\n   * @param {WebGLRenderingContext} gl Rendering context.\r\n   */\r\n  delete(gl) {\r\n    if (this.texture_) {\r\n      gl.deleteTexture(this.texture_);\r\n    }\r\n    this.texture_ = null;\r\n  }\r\n}\r\n\r\nexport default PaletteTexture;\r\n", "/**\r\n * @module ol/expr/gpu\r\n */\r\nimport {asArray} from '../color.js';\r\nimport {Uniforms} from '../renderer/webgl/TileLayer.js';\r\nimport {toSize} from '../size.js';\r\nimport PaletteTexture from '../webgl/PaletteTexture.js';\r\nimport {\r\n  BooleanType,\r\n  CallExpression,\r\n  ColorType,\r\n  NumberArrayType,\r\n  NumberType,\r\n  Ops,\r\n  SizeType,\r\n  StringType,\r\n  parse,\r\n  typeName,\r\n} from './expression.js';\r\n\r\n/**\r\n * @param {string} operator Operator\r\n * @param {CompilationContext} context Compilation context\r\n * @return {string} A function name based on the operator, unique in the given context\r\n */\r\nfunction computeOperatorFunctionName(operator, context) {\r\n  return `operator_${operator}_${Object.keys(context.functions).length}`;\r\n}\r\n\r\n/**\r\n * Will return the number as a float with a dot separator, which is required by GLSL.\r\n * @param {number} v Numerical value.\r\n * @return {string} The value as string.\r\n */\r\nexport function numberToGlsl(v) {\r\n  const s = v.toString();\r\n  return s.includes('.') ? s : s + '.0';\r\n}\r\n\r\n/**\r\n * Will return the number array as a float with a dot separator, concatenated with ', '.\r\n * @param {Array<number>} array Numerical values array.\r\n * @return {string} The array as a vector, e. g.: `vec3(1.0, 2.0, 3.0)`.\r\n */\r\nexport function arrayToGlsl(array) {\r\n  if (array.length < 2 || array.length > 4) {\r\n    throw new Error(\r\n      '`formatArray` can only output `vec2`, `vec3` or `vec4` arrays.',\r\n    );\r\n  }\r\n  return `vec${array.length}(${array.map(numberToGlsl).join(', ')})`;\r\n}\r\n\r\n/**\r\n * Will normalize and converts to string a `vec4` color array compatible with GLSL.\r\n * @param {string|import(\"../color.js\").Color} color Color either in string format or [r, g, b, a] array format,\r\n * with RGB components in the 0..255 range and the alpha component in the 0..1 range.\r\n * Note that the final array will always have 4 components.\r\n * @return {string} The color expressed in the `vec4(1.0, 1.0, 1.0, 1.0)` form.\r\n */\r\nexport function colorToGlsl(color) {\r\n  const array = asArray(color);\r\n  const alpha = array.length > 3 ? array[3] : 1;\r\n  return arrayToGlsl([array[0] / 255, array[1] / 255, array[2] / 255, alpha]);\r\n}\r\n\r\n/**\r\n * Normalizes and converts a number or array toa `vec2` array compatible with GLSL.\r\n * @param {number|import('../size.js').Size} size Size.\r\n * @return {string} The color expressed in the `vec4(1.0, 1.0, 1.0, 1.0)` form.\r\n */\r\nexport function sizeToGlsl(size) {\r\n  const array = toSize(size);\r\n  return arrayToGlsl(array);\r\n}\r\n\r\n/** @type {Object<string, number>} */\r\nconst stringToFloatMap = {};\r\nlet stringToFloatCounter = 0;\r\n\r\n/**\r\n * Returns a stable equivalent number for the string literal.\r\n * @param {string} string String literal value\r\n * @return {number} Number equivalent\r\n */\r\nexport function getStringNumberEquivalent(string) {\r\n  if (!(string in stringToFloatMap)) {\r\n    stringToFloatMap[string] = stringToFloatCounter++;\r\n  }\r\n  return stringToFloatMap[string];\r\n}\r\n\r\n/**\r\n * Returns a stable equivalent number for the string literal, for use in shaders. This number is then\r\n * converted to be a GLSL-compatible string.\r\n * Note: with a float precision of `mediump`, the amount of unique strings supported is 16,777,216\r\n * @param {string} string String literal value\r\n * @return {string} GLSL-compatible string containing a number\r\n */\r\nexport function stringToGlsl(string) {\r\n  return numberToGlsl(getStringNumberEquivalent(string));\r\n}\r\n\r\n/**\r\n * Get the uniform name given a variable name.\r\n * @param {string} variableName The variable name.\r\n * @return {string} The uniform name.\r\n */\r\nexport function uniformNameForVariable(variableName) {\r\n  return 'u_var_' + variableName;\r\n}\r\n\r\n/**\r\n * @typedef {import('./expression.js').ParsingContext} ParsingContext\r\n */\r\n/**\r\n *\r\n * @typedef {import(\"./expression.js\").Expression} Expression\r\n */\r\n/**\r\n *\r\n * @typedef {import(\"./expression.js\").LiteralExpression} LiteralExpression\r\n */\r\n\r\n/**\r\n * @typedef {Object} CompilationContextProperty\r\n * @property {string} name Name\r\n * @property {number} type Resolved property type\r\n */\r\n\r\n/**\r\n * @typedef {Object} CompilationContextVariable\r\n * @property {string} name Name\r\n * @property {number} type Resolved variable type\r\n */\r\n\r\n/**\r\n * @typedef {Object} CompilationContext\r\n * @property {boolean} [inFragmentShader] If false, means the expression output should be made for a vertex shader\r\n * @property {Object<string, CompilationContextProperty>} properties The values for properties used in 'get' expressions.\r\n * @property {Object<string, CompilationContextVariable>} variables The values for variables used in 'var' expressions.\r\n * @property {Object<string, string>} functions Lookup of functions used by the style.\r\n * @property {number} [bandCount] Number of bands per pixel.\r\n * @property {Array<PaletteTexture>} [paletteTextures] List of palettes used by the style.\r\n * @property {boolean} featureId Whether the feature ID is used in the expression\r\n * @property {boolean} geometryType Whether the geometry type is used in the expression\r\n */\r\n\r\n/**\r\n * @return {CompilationContext} A new compilation context.\r\n */\r\nexport function newCompilationContext() {\r\n  return {\r\n    inFragmentShader: false,\r\n    variables: {},\r\n    properties: {},\r\n    functions: {},\r\n    bandCount: 0,\r\n    featureId: false,\r\n    geometryType: false,\r\n  };\r\n}\r\n\r\nconst GET_BAND_VALUE_FUNC = 'getBandValue';\r\n\r\nexport const PALETTE_TEXTURE_ARRAY = 'u_paletteTextures';\r\n\r\nexport const FEATURE_ID_PROPERTY_NAME = 'featureId';\r\nexport const GEOMETRY_TYPE_PROPERTY_NAME = 'geometryType';\r\n\r\n/**\r\n * @typedef {string} CompiledExpression\r\n */\r\n\r\n/**\r\n * @typedef {function(CompilationContext, CallExpression, number): string} Compiler\r\n * Third argument is the expected value types\r\n */\r\n\r\n/**\r\n * @param {import('./expression.js').EncodedExpression} encoded The encoded expression.\r\n * @param {number} type The expected type.\r\n * @param {import('./expression.js').ParsingContext} parsingContext The parsing context.\r\n * @param {CompilationContext} compilationContext An existing compilation context\r\n * @return {CompiledExpression} The compiled expression.\r\n */\r\nexport function buildExpression(\r\n  encoded,\r\n  type,\r\n  parsingContext,\r\n  compilationContext,\r\n) {\r\n  const expression = parse(encoded, type, parsingContext);\r\n  return compile(expression, type, compilationContext);\r\n}\r\n\r\n/**\r\n * @param {function(Array<CompiledExpression>, CompilationContext): string} output Function that takes in parsed arguments and returns a string\r\n * @return {function(CompilationContext, import(\"./expression.js\").CallExpression, number): string} Compiler for the call expression\r\n */\r\nfunction createCompiler(output) {\r\n  return (context, expression, type) => {\r\n    const length = expression.args.length;\r\n    const args = new Array(length);\r\n    for (let i = 0; i < length; ++i) {\r\n      args[i] = compile(expression.args[i], type, context);\r\n    }\r\n    return output(args, context);\r\n  };\r\n}\r\n\r\n/**\r\n * @type {Object<string, Compiler>}\r\n */\r\nconst compilers = {\r\n  [Ops.Get]: (context, expression) => {\r\n    const firstArg = /** @type {LiteralExpression} */ (expression.args[0]);\r\n    const propName = /** @type {string} */ (firstArg.value);\r\n    const isExisting = propName in context.properties;\r\n    if (!isExisting) {\r\n      context.properties[propName] = {\r\n        name: propName,\r\n        type: expression.type,\r\n      };\r\n    }\r\n    const prefix = context.inFragmentShader ? 'v_prop_' : 'a_prop_';\r\n    return prefix + propName;\r\n  },\r\n  [Ops.Id]: (context) => {\r\n    context.featureId = true;\r\n    const prefix = context.inFragmentShader ? 'v_' : 'a_';\r\n    return prefix + FEATURE_ID_PROPERTY_NAME;\r\n  },\r\n  [Ops.GeometryType]: (context) => {\r\n    context.geometryType = true;\r\n    const prefix = context.inFragmentShader ? 'v_' : 'a_';\r\n    return prefix + GEOMETRY_TYPE_PROPERTY_NAME;\r\n  },\r\n  [Ops.LineMetric]: () => 'currentLineMetric', // this variable is assumed to always be present in shaders, default is 0.\r\n  [Ops.Var]: (context, expression) => {\r\n    const firstArg = /** @type {LiteralExpression} */ (expression.args[0]);\r\n    const varName = /** @type {string} */ (firstArg.value);\r\n    const isExisting = varName in context.variables;\r\n    if (!isExisting) {\r\n      context.variables[varName] = {\r\n        name: varName,\r\n        type: expression.type,\r\n      };\r\n    }\r\n    return uniformNameForVariable(varName);\r\n  },\r\n  [Ops.Resolution]: () => 'u_resolution',\r\n  [Ops.Zoom]: () => 'u_zoom',\r\n  [Ops.Time]: () => 'u_time',\r\n  [Ops.Any]: createCompiler((compiledArgs) => `(${compiledArgs.join(` || `)})`),\r\n  [Ops.All]: createCompiler((compiledArgs) => `(${compiledArgs.join(` && `)})`),\r\n  [Ops.Not]: createCompiler(([value]) => `(!${value})`),\r\n  [Ops.Equal]: createCompiler(\r\n    ([firstValue, secondValue]) => `(${firstValue} == ${secondValue})`,\r\n  ),\r\n  [Ops.NotEqual]: createCompiler(\r\n    ([firstValue, secondValue]) => `(${firstValue} != ${secondValue})`,\r\n  ),\r\n  [Ops.GreaterThan]: createCompiler(\r\n    ([firstValue, secondValue]) => `(${firstValue} > ${secondValue})`,\r\n  ),\r\n  [Ops.GreaterThanOrEqualTo]: createCompiler(\r\n    ([firstValue, secondValue]) => `(${firstValue} >= ${secondValue})`,\r\n  ),\r\n  [Ops.LessThan]: createCompiler(\r\n    ([firstValue, secondValue]) => `(${firstValue} < ${secondValue})`,\r\n  ),\r\n  [Ops.LessThanOrEqualTo]: createCompiler(\r\n    ([firstValue, secondValue]) => `(${firstValue} <= ${secondValue})`,\r\n  ),\r\n  [Ops.Multiply]: createCompiler(\r\n    (compiledArgs) => `(${compiledArgs.join(' * ')})`,\r\n  ),\r\n  [Ops.Divide]: createCompiler(\r\n    ([firstValue, secondValue]) => `(${firstValue} / ${secondValue})`,\r\n  ),\r\n  [Ops.Add]: createCompiler((compiledArgs) => `(${compiledArgs.join(' + ')})`),\r\n  [Ops.Subtract]: createCompiler(\r\n    ([firstValue, secondValue]) => `(${firstValue} - ${secondValue})`,\r\n  ),\r\n  [Ops.Clamp]: createCompiler(\r\n    ([value, min, max]) => `clamp(${value}, ${min}, ${max})`,\r\n  ),\r\n  [Ops.Mod]: createCompiler(([value, modulo]) => `mod(${value}, ${modulo})`),\r\n  [Ops.Pow]: createCompiler(([value, power]) => `pow(${value}, ${power})`),\r\n  [Ops.Abs]: createCompiler(([value]) => `abs(${value})`),\r\n  [Ops.Floor]: createCompiler(([value]) => `floor(${value})`),\r\n  [Ops.Ceil]: createCompiler(([value]) => `ceil(${value})`),\r\n  [Ops.Round]: createCompiler(([value]) => `floor(${value} + 0.5)`),\r\n  [Ops.Sin]: createCompiler(([value]) => `sin(${value})`),\r\n  [Ops.Cos]: createCompiler(([value]) => `cos(${value})`),\r\n  [Ops.Atan]: createCompiler(([firstValue, secondValue]) => {\r\n    return secondValue !== undefined\r\n      ? `atan(${firstValue}, ${secondValue})`\r\n      : `atan(${firstValue})`;\r\n  }),\r\n  [Ops.Sqrt]: createCompiler(([value]) => `sqrt(${value})`),\r\n  [Ops.Match]: createCompiler((compiledArgs) => {\r\n    const input = compiledArgs[0];\r\n    const fallback = compiledArgs[compiledArgs.length - 1];\r\n    let result = null;\r\n    for (let i = compiledArgs.length - 3; i >= 1; i -= 2) {\r\n      const match = compiledArgs[i];\r\n      const output = compiledArgs[i + 1];\r\n      result = `(${input} == ${match} ? ${output} : ${result || fallback})`;\r\n    }\r\n    return result;\r\n  }),\r\n  [Ops.Between]: createCompiler(\r\n    ([value, min, max]) => `(${value} >= ${min} && ${value} <= ${max})`,\r\n  ),\r\n  [Ops.Interpolate]: createCompiler(([exponent, input, ...compiledArgs]) => {\r\n    let result = '';\r\n    for (let i = 0; i < compiledArgs.length - 2; i += 2) {\r\n      const stop1 = compiledArgs[i];\r\n      const output1 = result || compiledArgs[i + 1];\r\n      const stop2 = compiledArgs[i + 2];\r\n      const output2 = compiledArgs[i + 3];\r\n      let ratio;\r\n      if (exponent === numberToGlsl(1)) {\r\n        ratio = `(${input} - ${stop1}) / (${stop2} - ${stop1})`;\r\n      } else {\r\n        ratio = `(pow(${exponent}, (${input} - ${stop1})) - 1.0) / (pow(${exponent}, (${stop2} - ${stop1})) - 1.0)`;\r\n      }\r\n      result = `mix(${output1}, ${output2}, clamp(${ratio}, 0.0, 1.0))`;\r\n    }\r\n    return result;\r\n  }),\r\n  [Ops.Case]: createCompiler((compiledArgs) => {\r\n    const fallback = compiledArgs[compiledArgs.length - 1];\r\n    let result = null;\r\n    for (let i = compiledArgs.length - 3; i >= 0; i -= 2) {\r\n      const condition = compiledArgs[i];\r\n      const output = compiledArgs[i + 1];\r\n      result = `(${condition} ? ${output} : ${result || fallback})`;\r\n    }\r\n    return result;\r\n  }),\r\n  [Ops.In]: createCompiler(([needle, ...haystack], context) => {\r\n    const funcName = computeOperatorFunctionName('in', context);\r\n    const tests = [];\r\n    for (let i = 0; i < haystack.length; i += 1) {\r\n      tests.push(`  if (inputValue == ${haystack[i]}) { return true; }`);\r\n    }\r\n    context.functions[funcName] = `bool ${funcName}(float inputValue) {\r\n${tests.join('\\n')}\r\n  return false;\r\n}`;\r\n    return `${funcName}(${needle})`;\r\n  }),\r\n  [Ops.Array]: createCompiler(\r\n    (args) => `vec${args.length}(${args.join(', ')})`,\r\n  ),\r\n  [Ops.Color]: createCompiler((compiledArgs) => {\r\n    if (compiledArgs.length === 1) {\r\n      //grayscale\r\n      return `vec4(vec3(${compiledArgs[0]} / 255.0), 1.0)`;\r\n    }\r\n    if (compiledArgs.length === 2) {\r\n      //grayscale with alpha\r\n      return `vec4(vec3(${compiledArgs[0]} / 255.0), ${compiledArgs[1]})`;\r\n    }\r\n    const rgb = compiledArgs.slice(0, 3).map((color) => `${color} / 255.0`);\r\n    if (compiledArgs.length === 3) {\r\n      return `vec4(${rgb.join(', ')}, 1.0)`;\r\n    }\r\n    const alpha = compiledArgs[3];\r\n    return `vec4(${rgb.join(', ')}, ${alpha})`;\r\n  }),\r\n  [Ops.Band]: createCompiler(([band, xOffset, yOffset], context) => {\r\n    if (!(GET_BAND_VALUE_FUNC in context.functions)) {\r\n      let ifBlocks = '';\r\n      const bandCount = context.bandCount || 1;\r\n      for (let i = 0; i < bandCount; i++) {\r\n        const colorIndex = Math.floor(i / 4);\r\n        let bandIndex = i % 4;\r\n        if (i === bandCount - 1 && bandIndex === 1) {\r\n          // LUMINANCE_ALPHA - band 1 assigned to rgb and band 2 assigned to alpha\r\n          bandIndex = 3;\r\n        }\r\n        const textureName = `${Uniforms.TILE_TEXTURE_ARRAY}[${colorIndex}]`;\r\n        ifBlocks += `  if (band == ${i + 1}.0) {\r\n    return texture2D(${textureName}, v_textureCoord + vec2(dx, dy))[${bandIndex}];\r\n  }\r\n`;\r\n      }\r\n\r\n      context.functions[GET_BAND_VALUE_FUNC] =\r\n        `float getBandValue(float band, float xOffset, float yOffset) {\r\n  float dx = xOffset / ${Uniforms.TEXTURE_PIXEL_WIDTH};\r\n  float dy = yOffset / ${Uniforms.TEXTURE_PIXEL_HEIGHT};\r\n${ifBlocks}\r\n}`;\r\n    }\r\n\r\n    return `${GET_BAND_VALUE_FUNC}(${band}, ${xOffset ?? '0.0'}, ${\r\n      yOffset ?? '0.0'\r\n    })`;\r\n  }),\r\n  [Ops.Palette]: (context, expression) => {\r\n    const [index, ...colors] = expression.args;\r\n    const numColors = colors.length;\r\n    const palette = new Uint8Array(numColors * 4);\r\n    for (let i = 0; i < colors.length; i++) {\r\n      const parsedValue = /** @type {string | Array<number>} */ (\r\n        /** @type {LiteralExpression} */ (colors[i]).value\r\n      );\r\n      const color = asArray(parsedValue);\r\n      const offset = i * 4;\r\n      palette[offset] = color[0];\r\n      palette[offset + 1] = color[1];\r\n      palette[offset + 2] = color[2];\r\n      palette[offset + 3] = color[3] * 255;\r\n    }\r\n    if (!context.paletteTextures) {\r\n      context.paletteTextures = [];\r\n    }\r\n    const paletteName = `${PALETTE_TEXTURE_ARRAY}[${context.paletteTextures.length}]`;\r\n    const paletteTexture = new PaletteTexture(paletteName, palette);\r\n    context.paletteTextures.push(paletteTexture);\r\n    const compiledIndex = compile(index, NumberType, context);\r\n    return `texture2D(${paletteName}, vec2((${compiledIndex} + 0.5) / ${numColors}.0, 0.5))`;\r\n  },\r\n  // TODO: unimplemented\r\n  // Ops.Number\r\n  // Ops.String\r\n  // Ops.Coalesce\r\n  // Ops.Concat\r\n  // Ops.ToString\r\n};\r\n\r\n/**\r\n * @param {Expression} expression The expression.\r\n * @param {number} returnType The expected return type.\r\n * @param {CompilationContext} context The compilation context.\r\n * @return {CompiledExpression} The compiled expression\r\n */\r\nfunction compile(expression, returnType, context) {\r\n  // operator\r\n  if (expression instanceof CallExpression) {\r\n    const compiler = compilers[expression.operator];\r\n    if (compiler === undefined) {\r\n      throw new Error(\r\n        `No compiler defined for this operator: ${JSON.stringify(\r\n          expression.operator,\r\n        )}`,\r\n      );\r\n    }\r\n    return compiler(context, expression, returnType);\r\n  }\r\n\r\n  if ((expression.type & NumberType) > 0) {\r\n    return numberToGlsl(/** @type {number} */ (expression.value));\r\n  }\r\n\r\n  if ((expression.type & BooleanType) > 0) {\r\n    return expression.value.toString();\r\n  }\r\n\r\n  if ((expression.type & StringType) > 0) {\r\n    return stringToGlsl(expression.value.toString());\r\n  }\r\n\r\n  if ((expression.type & ColorType) > 0) {\r\n    return colorToGlsl(\r\n      /** @type {Array<number> | string} */ (expression.value),\r\n    );\r\n  }\r\n\r\n  if ((expression.type & NumberArrayType) > 0) {\r\n    return arrayToGlsl(/** @type {Array<number>} */ (expression.value));\r\n  }\r\n\r\n  if ((expression.type & SizeType) > 0) {\r\n    return sizeToGlsl(\r\n      /** @type {number|import('../size.js').Size} */ (expression.value),\r\n    );\r\n  }\r\n\r\n  throw new Error(\r\n    `Unexpected expression ${expression.value} (expected type ${typeName(\r\n      returnType,\r\n    )})`,\r\n  );\r\n}\r\n", "/**\r\n * @module ol/style/flat\r\n */\r\n\r\n/**\r\n * @api\r\n * @fileoverview Vector layers can be styled with an object literal containing properties for\r\n * stroke, fill, image, and text styles.  The types below can be composed into a single object.\r\n * For example, a style with both stroke and fill properties could look like this:\r\n *\r\n *     const style = {\r\n *       'stroke-color': 'yellow',\r\n *       'stroke-width': 1.5,\r\n *       'fill-color': 'orange',\r\n *     };\r\n *\r\n * See details about the available properties depending on what type of symbolizer should be applied:\r\n *  {@link module:ol/style/flat~FlatStroke Stroke} - properties for applying a stroke to lines and polygons\r\n *  {@link module:ol/style/flat~FlatFill Fill} - properties for filling polygons\r\n *  {@link module:ol/style/flat~FlatText Text} - properties for labeling points, lines, and polygons\r\n *  {@link module:ol/style/flat~FlatIcon Icon} - properties for rendering points with an icon\r\n *  {@link module:ol/style/flat~FlatCircle Circle} - properties for rendering points with a circle\r\n *  {@link module:ol/style/flat~FlatShape Shape} - properties for rendering points with a regular shape\r\n *\r\n * To conditionally apply styles based on a filter, a list of {@link module:ol/style/flat~Rule rules} can be used.\r\n * For example, to style points with a big orange circle if the population is greater than 1 million and\r\n * a smaller blue circle otherwise:\r\n *\r\n *     const rules = [\r\n *       {\r\n *         filter: ['>', ['get', 'population'], 1_000_000],\r\n *         style: {\r\n *           'circle-radius': 10,\r\n *           'circle-fill-color': 'red',\r\n *         }\r\n *       },\r\n *       {\r\n *         else: true,\r\n *         style: {\r\n *           'circle-radius': 5,\r\n *           'circle-fill-color': 'blue',\r\n *         },\r\n *       },\r\n *     ];\r\n */\r\n\r\n/**\r\n * A literal boolean (e.g. `true`) or an expression that evaluates to a boolean (e.g. `['>', ['get', 'population'], 1_000_000]`).\r\n *\r\n * @typedef {boolean|Array} BooleanExpression\r\n */\r\n\r\n/**\r\n * A literal string (e.g. `'hello'`) or an expression that evaluates to a string (e.g. `['get', 'greeting']`).\r\n *\r\n * @typedef {string|Array} StringExpression\r\n */\r\n\r\n/**\r\n * A literal number (e.g. `42`) or an expression that evaluates to a number (e.g. `['+', 40, 2]`).\r\n *\r\n * @typedef {number|Array} NumberExpression\r\n */\r\n\r\n/**\r\n * A CSS named color (e.g. `'blue'`), an array of 3 RGB values (e.g. `[0, 255, 0]`), an array of 4 RGBA values\r\n * (e.g. `[0, 255, 0, 0.5]`), or an expression that evaluates to one of these color types (e.g. `['get', 'color']`).\r\n *\r\n * @typedef {import(\"../color.js\").Color|string|Array} ColorExpression\r\n */\r\n\r\n/**\r\n * An array of numbers (e.g. `[1, 2, 3]`) or an expression that evaluates to the same (e.g. `['get', 'values']`).\r\n *\r\n * @typedef {Array<number>|Array} NumberArrayExpression\r\n */\r\n\r\n/**\r\n * An array of two numbers (e.g. `[10, 20]`) or an expression that evaluates to the same (e.g. `['get', 'size']`).\r\n *\r\n * @typedef {number|Array<number>|Array} SizeExpression\r\n */\r\n\r\n/**\r\n * For static styling, the [layer.setStyle()]{@link module:ol/layer/Vector~VectorLayer#setStyle} method\r\n * can be called with an object literal that has fill, stroke, text, icon, regular shape, and/or circle properties.\r\n * @api\r\n *\r\n * @typedef {FlatFill & FlatStroke & FlatText & FlatIcon & FlatShape & FlatCircle} FlatStyle\r\n */\r\n\r\n/**\r\n * A flat style literal or an array of the same.\r\n *\r\n * @typedef {FlatStyle|Array<FlatStyle>|Array<Rule>} FlatStyleLike\r\n */\r\n\r\n/**\r\n * Fill style properties applied to polygon features.\r\n *\r\n * @typedef {Object} FlatFill\r\n * @property {ColorExpression} [fill-color] The fill color. `'none'` means no fill and no hit detection (applies to Canvas only).\r\n * @property {StringExpression} [fill-pattern-src] Fill pattern image source URI. If `fill-color` is defined as well,\r\n * it will be used to tint this image. (Expressions only in Canvas)\r\n * @property {SizeExpression} [fill-pattern-size] Fill pattern image size in pixels.\r\n * Can be used together with `fill-pattern-offset` to define the sub-rectangle to use\r\n * from a fill pattern image sprite sheet.\r\n * @property {SizeExpression} [fill-pattern-offset=[0, 0]] Offset, which, together with the size and the offset origin, define the\r\n * sub-rectangle to use from the original fill pattern image.\r\n * @property {import(\"./Icon.js\").IconOrigin} [fill-pattern-offset-origin='top-left'] Origin of the offset: `bottom-left`, `bottom-right`,\r\n * `top-left` or `top-right`. (WebGL only)\r\n */\r\n\r\n/**\r\n * Stroke style properties applied to line strings and polygon boundaries. To apply a stroke, at least one of\r\n * `stroke-color` or `stroke-width` must be provided.\r\n *\r\n * @typedef {Object} FlatStroke\r\n * @property {ColorExpression} [stroke-color] The stroke color.\r\n * @property {NumberExpression} [stroke-width] Stroke pixel width.\r\n * @property {StringExpression} [stroke-line-cap='round'] Line cap style: `butt`, `round`, or `square`.\r\n * @property {StringExpression} [stroke-line-join='round'] Line join style: `bevel`, `round`, or `miter`.\r\n * @property {NumberArrayExpression} [stroke-line-dash] Line dash pattern.\r\n * @property {NumberExpression} [stroke-line-dash-offset=0] Line dash offset.\r\n * @property {NumberExpression} [stroke-miter-limit=10] Miter limit.\r\n * @property {NumberExpression} [stroke-offset] Stroke offset in pixel. A positive value offsets the line to the right,\r\n * relative to the direction of the line. (WebGL only)\r\n * @property {string} [stroke-pattern-src] Stroke pattern image source URI. If `stroke-color` is defined as well,\r\n * it will be used to tint this image. (WebGL only)\r\n * @property {SizeExpression} [stroke-pattern-offset=[0, 0]] Offset, which, together with the size and the offset origin,\r\n * define the sub-rectangle to use from the original fill pattern image. (WebGL only)\r\n * @property {import(\"./Icon.js\").IconOrigin} [stroke-pattern-offset-origin='top-left'] Origin of the offset: `bottom-left`, `bottom-right`,\r\n * `top-left` or `top-right`. (WebGL only)\r\n * @property {SizeExpression} [stroke-pattern-size] Stroke pattern image size in pixel. Can be used together with `stroke-pattern-offset` to define the\r\n * sub-rectangle to use from the origin (sprite) fill pattern image. (WebGL only)\r\n * @property {NumberExpression} [stroke-pattern-spacing] Spacing between each pattern occurrence in pixels; 0 if undefined.\r\n * @property {NumberExpression} [z-index] The zIndex of the style.\r\n */\r\n\r\n/**\r\n * Label style properties applied to all features. At a minimum, a `text-value` must be provided.\r\n * Note: text style is currently not supported in WebGL layers\r\n *\r\n * @typedef {Object} FlatText\r\n * @property {StringExpression} [text-value] Text content (with `\\n` for line breaks).\r\n * @property {StringExpression} [text-font='10px sans-serif'] Font style as [CSS `font`](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font) value.\r\n * @property {NumberExpression} [text-max-angle=Math.PI/4] When `text-placement` is set to `'line'`, allow a maximum angle between adjacent characters.\r\n * The expected value is in radians, and the default is 45° (`Math.PI / 4`).\r\n * @property {NumberExpression} [text-offset-x=0] Horizontal text offset in pixels. A positive will shift the text right.\r\n * @property {NumberExpression} [text-offset-y=0] Vertical text offset in pixels. A positive will shift the text down.\r\n * @property {BooleanExpression} [text-overflow=false] For polygon labels or when `placement` is set to `'line'`, allow text to exceed\r\n * the width of the polygon at the label position or the length of the path that it follows.\r\n * @property {StringExpression} [text-placement='point'] Text placement.\r\n * @property {NumberExpression} [text-repeat] Repeat interval in pixels. When set, the text will be repeated at this interval. Only available when\r\n * `text-placement` is set to `'line'`. Overrides `text-align`.\r\n * @property {SizeExpression} [text-scale] Scale.\r\n * @property {BooleanExpression} [text-rotate-with-view=false] Whether to rotate the text with the view.\r\n * @property {NumberExpression} [text-rotation=0] Rotation in radians (positive rotation clockwise).\r\n * @property {StringExpression} [text-align] Text alignment. Possible values: `'left'`, `'right'`, `'center'`, `'end'` or `'start'`.\r\n * Default is `'center'` for `'text-placement': 'point'`. For `'text-placement': 'line'`, the default is to let the renderer choose a\r\n * placement where `text-max-angle` is not exceeded.\r\n * @property {StringExpression} [text-justify] Text justification within the text box.\r\n * If not set, text is justified towards the `textAlign` anchor.\r\n * Otherwise, use options `'left'`, `'center'`, or `'right'` to justify the text within the text box.\r\n * **Note:** `text-justify` is ignored for immediate rendering and also for `'text-placement': 'line'`.\r\n * @property {StringExpression} [text-baseline='middle'] Text base line. Possible values: `'bottom'`, `'top'`, `'middle'`, `'alphabetic'`,\r\n * `'hanging'`, `'ideographic'`.\r\n * @property {NumberArrayExpression} [text-padding=[0, 0, 0, 0]] Padding in pixels around the text for decluttering and background. The order of\r\n * values in the array is `[top, right, bottom, left]`.\r\n * @property {ColorExpression} [text-fill-color] The fill color. `'none'` means no fill and no hit detection.\r\n * @property {ColorExpression} [text-background-fill-color] The fill color. `'none'` means no fill and no hit detection.\r\n * @property {ColorExpression} [text-stroke-color] The stroke color.\r\n * @property {StringExpression} [text-stroke-line-cap='round'] Line cap style: `butt`, `round`, or `square`.\r\n * @property {StringExpression} [text-stroke-line-join='round'] Line join style: `bevel`, `round`, or `miter`.\r\n * @property {NumberArrayExpression} [text-stroke-line-dash] Line dash pattern.\r\n * @property {NumberExpression} [text-stroke-line-dash-offset=0] Line dash offset.\r\n * @property {NumberExpression} [text-stroke-miter-limit=10] Miter limit.\r\n * @property {NumberExpression} [text-stroke-width] Stroke pixel width.\r\n * @property {ColorExpression} [text-background-stroke-color] The stroke color.\r\n * @property {StringExpression} [text-background-stroke-line-cap='round'] Line cap style: `butt`, `round`, or `square`.\r\n * @property {StringExpression} [text-background-stroke-line-join='round'] Line join style: `bevel`, `round`, or `miter`.\r\n * @property {NumberArrayExpression} [text-background-stroke-line-dash] Line dash pattern.\r\n * @property {NumberExpression} [text-background-stroke-line-dash-offset=0] Line dash offset.\r\n * @property {NumberExpression} [text-background-stroke-miter-limit=10] Miter limit.\r\n * @property {NumberExpression} [text-background-stroke-width] Stroke pixel width.\r\n * @property {import(\"./Style.js\").DeclutterMode} [text-declutter-mode] Declutter mode\r\n * @property {NumberExpression} [z-index] The zIndex of the style.\r\n */\r\n\r\n/**\r\n * Icon style properties applied to point features. `icon-src` must be provided to render\r\n * points with an icon.\r\n *\r\n * @typedef {Object} FlatIcon\r\n * @property {string} [icon-src] Image source URI.\r\n * @property {NumberArrayExpression} [icon-anchor=[0.5, 0.5]] Anchor. Default value is the icon center.\r\n * @property {import(\"./Icon.js\").IconOrigin} [icon-anchor-origin='top-left'] Origin of the anchor: `bottom-left`, `bottom-right`,\r\n * `top-left` or `top-right`.\r\n * @property {import(\"./Icon.js\").IconAnchorUnits} [icon-anchor-x-units='fraction'] Units in which the anchor x value is\r\n * specified. A value of `'fraction'` indicates the x value is a fraction of the icon. A value of `'pixels'` indicates\r\n * the x value in pixels.\r\n * @property {import(\"./Icon.js\").IconAnchorUnits} [icon-anchor-y-units='fraction'] Units in which the anchor y value is\r\n * specified. A value of `'fraction'` indicates the y value is a fraction of the icon. A value of `'pixels'` indicates\r\n * the y value in pixels.\r\n * @property {ColorExpression} [icon-color] Color to tint the icon. If not specified,\r\n * the icon will be left as is.\r\n * @property {null|string} [icon-cross-origin] The `crossOrigin` attribute for loaded images. Note that you must provide a\r\n * `icon-cross-origin` value if you want to access pixel data with the Canvas renderer.\r\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\r\n * @property {SizeExpression} [icon-offset=[0, 0]] Offset, which, together with the size and the offset origin, define the\r\n * sub-rectangle to use from the original icon image.\r\n * @property {NumberArrayExpression} [icon-displacement=[0,0]] Displacement of the icon.\r\n * @property {import(\"./Icon.js\").IconOrigin} [icon-offset-origin='top-left'] Origin of the offset: `bottom-left`, `bottom-right`,\r\n * `top-left` or `top-right`.\r\n * @property {NumberExpression} [icon-opacity=1] Opacity of the icon.\r\n * @property {SizeExpression} [icon-scale=1] Scale.\r\n * @property {NumberExpression} [icon-width] Width of the icon. If not specified, the actual image width will be used. Cannot be combined\r\n * with `scale`. (Expressions only in WebGL)\r\n * @property {NumberExpression} [icon-height] Height of the icon. If not specified, the actual image height will be used. Cannot be combined\r\n * with `scale`. (Expressions only in WebGL)\r\n * @property {NumberExpression} [icon-rotation=0] Rotation in radians (positive rotation clockwise).\r\n * @property {BooleanExpression} [icon-rotate-with-view=false] Whether to rotate the icon with the view. (Expressions only supported in Canvas)\r\n * @property {SizeExpression} [icon-size] Icon size in pixel. Can be used together with `icon-offset` to define the\r\n * sub-rectangle to use from the origin (sprite) icon image. (Expressions only in WebGL)\r\n * @property {import(\"./Style.js\").DeclutterMode} [icon-declutter-mode] Declutter mode (Canvas only)\r\n * @property {NumberExpression} [z-index] The zIndex of the style. (Canvas only)\r\n */\r\n\r\n/**\r\n * Regular shape style properties for rendering point features. At least `shape-points` must be provided.\r\n *\r\n * @typedef {Object} FlatShape\r\n * @property {NumberExpression} [shape-points] Number of points for stars and regular polygons. In case of a polygon, the number of points\r\n * is the number of sides. (Expressions only in WebGL)\r\n * @property {ColorExpression} [shape-fill-color] The fill color. `'none'` means no fill and no hit detection.\r\n * @property {ColorExpression} [shape-stroke-color] The stroke color.\r\n * @property {NumberExpression} [shape-stroke-width] Stroke pixel width.\r\n * @property {StringExpression} [shape-stroke-line-cap='round'] Line cap style: `butt`, `round`, or `square`. (Canvas only)\r\n * @property {StringExpression} [shape-stroke-line-join='round'] Line join style: `bevel`, `round`, or `miter`. (Canvas only)\r\n * @property {NumberArrayExpression} [shape-stroke-line-dash] Line dash pattern. (Canvas only)\r\n * @property {NumberExpression} [shape-stroke-line-dash-offset=0] Line dash offset. (Canvas only)\r\n * @property {NumberExpression} [shape-stroke-miter-limit=10] Miter limit. (Canvas only)\r\n * @property {NumberExpression} [shape-radius] Radius of a regular polygon. (Expressions only in WebGL)\r\n * @property {NumberExpression} [shape-radius2] Second radius to make a star instead of a regular polygon. (Expressions only in WebGL)\r\n * @property {NumberExpression} [shape-angle=0] Shape's angle in radians. A value of 0 will have one of the shape's point facing up. (Expressions only in WebGL)\r\n * @property {NumberArrayExpression} [shape-displacement=[0,0]] Displacement of the shape\r\n * @property {NumberExpression} [shape-opacity] Shape opacity. (WebGL only)\r\n * @property {NumberExpression} [shape-rotation=0] Rotation in radians (positive rotation clockwise).\r\n * @property {BooleanExpression} [shape-rotate-with-view=false] Whether to rotate the shape with the view. (Expression only supported in Canvas)\r\n * @property {SizeExpression} [shape-scale=1] Scale. Unless two-dimensional scaling is required a better\r\n * result may be obtained with appropriate settings for `shape-radius` and `shape-radius2`.\r\n * @property {import(\"./Style.js\").DeclutterMode} [shape-declutter-mode] Declutter mode. (Canvas only)\r\n * @property {NumberExpression} [z-index] The zIndex of the style. (Canvas only)\r\n */\r\n\r\n/**\r\n * Circle style properties for rendering point features. At least `circle-radius` must be provided.\r\n *\r\n * @typedef {Object} FlatCircle\r\n * @property {NumberExpression} [circle-radius] Circle radius.\r\n * @property {ColorExpression} [circle-fill-color] The fill color. `'none'` means no fill and no hit detection.\r\n * @property {ColorExpression} [circle-stroke-color] The stroke color.\r\n * @property {NumberExpression} [circle-stroke-width] Stroke pixel width.\r\n * @property {StringExpression} [circle-stroke-line-cap='round'] Line cap style: `butt`, `round`, or `square`. (Canvas only)\r\n * @property {StringExpression} [circle-stroke-line-join='round'] Line join style: `bevel`, `round`, or `miter`. (Canvas only)\r\n * @property {NumberArrayExpression} [circle-stroke-line-dash] Line dash pattern. (Canvas only)\r\n * @property {NumberExpression} [circle-stroke-line-dash-offset=0] Line dash offset. (Canvas only)\r\n * @property {NumberExpression} [circle-stroke-miter-limit=10] Miter limit. (Canvas only)\r\n * @property {NumberArrayExpression} [circle-displacement=[0,0]] displacement\r\n * @property {SizeExpression} [circle-scale=1] Scale. A two-dimensional scale will produce an ellipse.\r\n * Unless two-dimensional scaling is required a better result may be obtained with an appropriate setting for `circle-radius`.\r\n * @property {NumberExpression} [circle-opacity] Circle opacity. (WebGL only)\r\n * @property {NumberExpression} [circle-rotation=0] Rotation in radians\r\n * (positive rotation clockwise, meaningful only when used in conjunction with a two-dimensional scale).\r\n * @property {BooleanExpression} [circle-rotate-with-view=false] Whether to rotate the shape with the view (Expression only supported in Canvas)\r\n * (meaningful only when used in conjunction with a two-dimensional scale).\r\n * @property {import(\"./Style.js\").DeclutterMode} [circle-declutter-mode] Declutter mode (Canvas only)\r\n * @property {NumberExpression} [z-index] The zIndex of the style. (Canvas only)\r\n */\r\n\r\n/**\r\n * These default style properties are applied when no other style is given.\r\n *\r\n * @typedef {Object} DefaultStyle\r\n * @property {string} fill-color `'rgba(255,255,255,0.4)'`\r\n * @property {string} stroke-color `'#3399CC'`\r\n * @property {number} stroke-width `1.25`\r\n * @property {number} circle-radius `5`\r\n * @property {string} circle-fill-color `'rgba(255,255,255,0.4)'`\r\n * @property {number} circle-stroke-width `1.25`\r\n * @property {string} circle-stroke-color `'#3399CC'`\r\n */\r\n\r\n/**\r\n * @return {DefaultStyle} The default flat style.\r\n */\r\nexport function createDefaultStyle() {\r\n  return {\r\n    'fill-color': 'rgba(255,255,255,0.4)',\r\n    'stroke-color': '#3399CC',\r\n    'stroke-width': 1.25,\r\n    'circle-radius': 5,\r\n    'circle-fill-color': 'rgba(255,255,255,0.4)',\r\n    'circle-stroke-width': 1.25,\r\n    'circle-stroke-color': '#3399CC',\r\n  };\r\n}\r\n\r\n/**\r\n * A rule is used to conditionally apply a style. If the rule's filter evaluates to true,\r\n * the style will be applied.\r\n *\r\n * @typedef {Object} Rule\r\n * @property {FlatStyle|Array<FlatStyle>} style The style to be applied if the filter matches.\r\n * @property {import(\"../expr/expression.js\").EncodedExpression} [filter] The filter used\r\n * to determine if a style applies. If no filter is included, the rule always applies\r\n * (unless it is an else rule).\r\n * @property {boolean} [else] If true, the rule applies only if no other previous rule applies.\r\n * If the else rule also has a filter, the rule will not apply if the filter does not match.\r\n */\r\n\r\n/**\r\n * Style variables are provided as an object. The variables can be read in a {@link import(\"../expr/expression.js\").ExpressionValue style expression}\r\n * using the `['var', 'varName']` operator.\r\n * Each variable must hold a literal value (not an expression).\r\n * @typedef {Object<string, number|Array<number>|string|boolean>} StyleVariables\r\n */\r\n", "/**\r\n * Class for generating shaders from literal style objects\r\n * @module ol/webgl/ShaderBuilder\r\n */\r\nimport {colorToGlsl, numberToGlsl, stringToGlsl} from '../expr/gpu.js';\r\nimport {LINESTRING_ANGLE_COSINE_CUTOFF} from '../render/webgl/utils.js';\r\nimport {createDefaultStyle} from '../style/flat.js';\r\n\r\nexport const COMMON_HEADER = `#ifdef GL_FRAGMENT_PRECISION_HIGH\r\nprecision highp float;\r\n#else\r\nprecision mediump float;\r\n#endif\r\nuniform mat4 u_projectionMatrix;\r\nuniform mat4 u_screenToWorldMatrix;\r\nuniform vec2 u_viewportSizePx;\r\nuniform float u_pixelRatio;\r\nuniform float u_globalAlpha;\r\nuniform float u_time;\r\nuniform float u_zoom;\r\nuniform float u_resolution;\r\nuniform float u_rotation;\r\nuniform vec4 u_renderExtent;\r\nuniform vec2 u_patternOrigin;\r\nuniform float u_depth;\r\nuniform mediump int u_hitDetection;\r\n\r\nconst float PI = 3.141592653589793238;\r\nconst float TWO_PI = 2.0 * PI;\r\nfloat currentLineMetric = 0.; // an actual value will be used in the stroke shaders\r\n`;\r\n\r\nconst DEFAULT_STYLE = createDefaultStyle();\r\n\r\n/**\r\n * @typedef {Object} VaryingDescription\r\n * @property {string} name Varying name, as will be declared in the header.\r\n * @property {string} type Varying type, either `float`, `vec2`, `vec4`...\r\n * @property {string} expression Expression which will be assigned to the varying in the vertex shader, and\r\n * passed on to the fragment shader.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * This class implements a classic builder pattern for generating many different types of shaders.\r\n * Methods can be chained, e. g.:\r\n *\r\n * ```js\r\n * const shader = new ShaderBuilder()\r\n *   .addVarying('v_width', 'float', 'a_width')\r\n *   .addUniform('u_time')\r\n *   .setColorExpression('...')\r\n *   .setSymbolSizeExpression('...')\r\n *   .getSymbolFragmentShader();\r\n * ```\r\n *\r\n * A note on [alpha premultiplication](https://en.wikipedia.org/wiki/Alpha_compositing#Straight_versus_premultiplied):\r\n * The ShaderBuilder class expects all colors to **not having been alpha-premultiplied!** This is because alpha\r\n * premultiplication is done at the end of each fragment shader.\r\n */\r\nexport class ShaderBuilder {\r\n  constructor() {\r\n    /**\r\n     * Uniforms; these will be declared in the header (should include the type).\r\n     * @type {Array<string>}\r\n     * @private\r\n     */\r\n    this.uniforms_ = [];\r\n\r\n    /**\r\n     * Attributes; these will be declared in the header (should include the type).\r\n     * @type {Array<string>}\r\n     * @private\r\n     */\r\n    this.attributes_ = [];\r\n\r\n    /**\r\n     * Varyings with a name, a type and an expression.\r\n     * @type {Array<VaryingDescription>}\r\n     * @private\r\n     */\r\n    this.varyings_ = [];\r\n\r\n    /**\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.hasSymbol_ = false;\r\n\r\n    /**\r\n     * @type {string}\r\n     * @private\r\n     */\r\n    this.symbolSizeExpression_ = `vec2(${numberToGlsl(\r\n      DEFAULT_STYLE['circle-radius'],\r\n    )} + ${numberToGlsl(DEFAULT_STYLE['circle-stroke-width'] * 0.5)})`;\r\n\r\n    /**\r\n     * @type {string}\r\n     * @private\r\n     */\r\n    this.symbolRotationExpression_ = '0.0';\r\n\r\n    /**\r\n     * @type {string}\r\n     * @private\r\n     */\r\n    this.symbolOffsetExpression_ = 'vec2(0.0)';\r\n\r\n    /**\r\n     * @type {string}\r\n     * @private\r\n     */\r\n    this.symbolColorExpression_ = colorToGlsl(\r\n      /** @type {string} */ (DEFAULT_STYLE['circle-fill-color']),\r\n    );\r\n\r\n    /**\r\n     * @type {string}\r\n     * @private\r\n     */\r\n    this.texCoordExpression_ = 'vec4(0.0, 0.0, 1.0, 1.0)';\r\n\r\n    /**\r\n     * @type {string}\r\n     * @private\r\n     */\r\n    this.discardExpression_ = 'false';\r\n\r\n    /**\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.symbolRotateWithView_ = false;\r\n\r\n    /**\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.hasStroke_ = false;\r\n\r\n    /**\r\n     * @type {string}\r\n     * @private\r\n     */\r\n    this.strokeWidthExpression_ = numberToGlsl(DEFAULT_STYLE['stroke-width']);\r\n\r\n    /**\r\n     * @type {string}\r\n     * @private\r\n     */\r\n    this.strokeColorExpression_ = colorToGlsl(\r\n      /** @type {string} */ (DEFAULT_STYLE['stroke-color']),\r\n    );\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    this.strokeOffsetExpression_ = '0.';\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    this.strokeCapExpression_ = stringToGlsl('round');\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    this.strokeJoinExpression_ = stringToGlsl('round');\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    this.strokeMiterLimitExpression_ = '10.';\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    this.strokeDistanceFieldExpression_ = '-1000.';\r\n\r\n    /**\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.hasFill_ = false;\r\n\r\n    /**\r\n     * @type {string}\r\n     * @private\r\n     */\r\n    this.fillColorExpression_ = colorToGlsl(\r\n      /** @type {string} */ (DEFAULT_STYLE['fill-color']),\r\n    );\r\n\r\n    /**\r\n     * @type {Array<string>}\r\n     * @private\r\n     */\r\n    this.vertexShaderFunctions_ = [];\r\n\r\n    /**\r\n     * @type {Array<string>}\r\n     * @private\r\n     */\r\n    this.fragmentShaderFunctions_ = [];\r\n  }\r\n\r\n  /**\r\n   * Adds a uniform accessible in both fragment and vertex shaders.\r\n   * The given name should include a type, such as `sampler2D u_texture`.\r\n   * @param {string} name Uniform name\r\n   * @return {ShaderBuilder} the builder object\r\n   */\r\n  addUniform(name) {\r\n    this.uniforms_.push(name);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Adds an attribute accessible in the vertex shader, read from the geometry buffer.\r\n   * The given name should include a type, such as `vec2 a_position`.\r\n   * @param {string} name Attribute name\r\n   * @return {ShaderBuilder} the builder object\r\n   */\r\n  addAttribute(name) {\r\n    this.attributes_.push(name);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Adds a varying defined in the vertex shader and accessible from the fragment shader.\r\n   * The type and expression of the varying have to be specified separately.\r\n   * @param {string} name Varying name\r\n   * @param {'float'|'vec2'|'vec3'|'vec4'} type Type\r\n   * @param {string} expression Expression used to assign a value to the varying.\r\n   * @return {ShaderBuilder} the builder object\r\n   */\r\n  addVarying(name, type, expression) {\r\n    this.varyings_.push({\r\n      name: name,\r\n      type: type,\r\n      expression: expression,\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets an expression to compute the size of the shape.\r\n   * This expression can use all the uniforms and attributes available\r\n   * in the vertex shader, and should evaluate to a `vec2` value.\r\n   * @param {string} expression Size expression\r\n   * @return {ShaderBuilder} the builder object\r\n   */\r\n  setSymbolSizeExpression(expression) {\r\n    this.hasSymbol_ = true;\r\n    this.symbolSizeExpression_ = expression;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @return {string} The current symbol size expression\r\n   */\r\n  getSymbolSizeExpression() {\r\n    return this.symbolSizeExpression_;\r\n  }\r\n\r\n  /**\r\n   * Sets an expression to compute the rotation of the shape.\r\n   * This expression can use all the uniforms and attributes available\r\n   * in the vertex shader, and should evaluate to a `float` value in radians.\r\n   * @param {string} expression Size expression\r\n   * @return {ShaderBuilder} the builder object\r\n   */\r\n  setSymbolRotationExpression(expression) {\r\n    this.symbolRotationExpression_ = expression;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets an expression to compute the offset of the symbol from the point center.\r\n   * This expression can use all the uniforms and attributes available\r\n   * in the vertex shader, and should evaluate to a `vec2` value.\r\n   * @param {string} expression Offset expression\r\n   * @return {ShaderBuilder} the builder object\r\n   */\r\n  setSymbolOffsetExpression(expression) {\r\n    this.symbolOffsetExpression_ = expression;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @return {string} The current symbol offset expression\r\n   */\r\n  getSymbolOffsetExpression() {\r\n    return this.symbolOffsetExpression_;\r\n  }\r\n\r\n  /**\r\n   * Sets an expression to compute the color of the shape.\r\n   * This expression can use all the uniforms, varyings and attributes available\r\n   * in the fragment shader, and should evaluate to a `vec4` value.\r\n   * @param {string} expression Color expression\r\n   * @return {ShaderBuilder} the builder object\r\n   */\r\n  setSymbolColorExpression(expression) {\r\n    this.hasSymbol_ = true;\r\n    this.symbolColorExpression_ = expression;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @return {string} The current symbol color expression\r\n   */\r\n  getSymbolColorExpression() {\r\n    return this.symbolColorExpression_;\r\n  }\r\n\r\n  /**\r\n   * Sets an expression to compute the texture coordinates of the vertices.\r\n   * This expression can use all the uniforms and attributes available\r\n   * in the vertex shader, and should evaluate to a `vec4` value.\r\n   * @param {string} expression Texture coordinate expression\r\n   * @return {ShaderBuilder} the builder object\r\n   */\r\n  setTextureCoordinateExpression(expression) {\r\n    this.texCoordExpression_ = expression;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets an expression to determine whether a fragment (pixel) should be discarded,\r\n   * i.e. not drawn at all.\r\n   * This expression can use all the uniforms, varyings and attributes available\r\n   * in the fragment shader, and should evaluate to a `bool` value (it will be\r\n   * used in an `if` statement)\r\n   * @param {string} expression Fragment discard expression\r\n   * @return {ShaderBuilder} the builder object\r\n   */\r\n  setFragmentDiscardExpression(expression) {\r\n    this.discardExpression_ = expression;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @return {string} The current fragment discard expression\r\n   */\r\n  getFragmentDiscardExpression() {\r\n    return this.discardExpression_;\r\n  }\r\n\r\n  /**\r\n   * Sets whether the symbols should rotate with the view or stay aligned with the map.\r\n   * Note: will only be used for point geometry shaders.\r\n   * @param {boolean} rotateWithView Rotate with view\r\n   * @return {ShaderBuilder} the builder object\r\n   */\r\n  setSymbolRotateWithView(rotateWithView) {\r\n    this.symbolRotateWithView_ = rotateWithView;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @param {string} expression Stroke width expression, returning value in pixels\r\n   * @return {ShaderBuilder} the builder object\r\n   */\r\n  setStrokeWidthExpression(expression) {\r\n    this.hasStroke_ = true;\r\n    this.strokeWidthExpression_ = expression;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @param {string} expression Stroke color expression, evaluate to `vec4`: can rely on currentLengthPx and currentRadiusPx\r\n   * @return {ShaderBuilder} the builder object\r\n   */\r\n  setStrokeColorExpression(expression) {\r\n    this.hasStroke_ = true;\r\n    this.strokeColorExpression_ = expression;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @return {string} The current stroke color expression\r\n   */\r\n  getStrokeColorExpression() {\r\n    return this.strokeColorExpression_;\r\n  }\r\n\r\n  /**\r\n   * @param {string} expression Stroke color expression, evaluate to `float`\r\n   * @return {ShaderBuilder} the builder object\r\n   */\r\n  setStrokeOffsetExpression(expression) {\r\n    this.strokeOffsetExpression_ = expression;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @param {string} expression Stroke line cap expression, evaluate to `float`\r\n   * @return {ShaderBuilder} the builder object\r\n   */\r\n  setStrokeCapExpression(expression) {\r\n    this.strokeCapExpression_ = expression;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @param {string} expression Stroke line join expression, evaluate to `float`\r\n   * @return {ShaderBuilder} the builder object\r\n   */\r\n  setStrokeJoinExpression(expression) {\r\n    this.strokeJoinExpression_ = expression;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @param {string} expression Stroke miter limit expression, evaluate to `float`\r\n   * @return {ShaderBuilder} the builder object\r\n   */\r\n  setStrokeMiterLimitExpression(expression) {\r\n    this.strokeMiterLimitExpression_ = expression;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @param {string} expression Stroke distance field expression, evaluate to `float`\r\n   * This can override the default distance field; can rely on currentLengthPx and currentRadiusPx\r\n   * @return {ShaderBuilder} the builder object\r\n   */\r\n  setStrokeDistanceFieldExpression(expression) {\r\n    this.strokeDistanceFieldExpression_ = expression;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @param {string} expression Fill color expression, evaluate to `vec4`\r\n   * @return {ShaderBuilder} the builder object\r\n   */\r\n  setFillColorExpression(expression) {\r\n    this.hasFill_ = true;\r\n    this.fillColorExpression_ = expression;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @return {string} The current fill color expression\r\n   */\r\n  getFillColorExpression() {\r\n    return this.fillColorExpression_;\r\n  }\r\n\r\n  addVertexShaderFunction(code) {\r\n    if (this.vertexShaderFunctions_.includes(code)) {\r\n      return;\r\n    }\r\n    this.vertexShaderFunctions_.push(code);\r\n  }\r\n  addFragmentShaderFunction(code) {\r\n    if (this.fragmentShaderFunctions_.includes(code)) {\r\n      return;\r\n    }\r\n    this.fragmentShaderFunctions_.push(code);\r\n  }\r\n\r\n  /**\r\n   * Generates a symbol vertex shader from the builder parameters\r\n   * @return {string|null} The full shader as a string; null if no size or color specified\r\n   */\r\n  getSymbolVertexShader() {\r\n    if (!this.hasSymbol_) {\r\n      return null;\r\n    }\r\n\r\n    return `${COMMON_HEADER}\r\n${this.uniforms_\r\n  .map(function (uniform) {\r\n    return 'uniform ' + uniform + ';';\r\n  })\r\n  .join('\\n')}\r\nattribute vec2 a_position;\r\nattribute float a_index;\r\nattribute vec4 a_hitColor;\r\n${this.attributes_\r\n  .map(function (attribute) {\r\n    return 'attribute ' + attribute + ';';\r\n  })\r\n  .join('\\n')}\r\nvarying vec2 v_texCoord;\r\nvarying vec2 v_quadCoord;\r\nvarying vec4 v_hitColor;\r\nvarying vec2 v_centerPx;\r\nvarying float v_angle;\r\nvarying vec2 v_quadSizePx;\r\n${this.varyings_\r\n  .map(function (varying) {\r\n    return 'varying ' + varying.type + ' ' + varying.name + ';';\r\n  })\r\n  .join('\\n')}\r\n${this.vertexShaderFunctions_.join('\\n')}\r\nvec2 pxToScreen(vec2 coordPx) {\r\n  vec2 scaled = coordPx / u_viewportSizePx / 0.5;\r\n  return scaled;\r\n}\r\n\r\nvec2 screenToPx(vec2 coordScreen) {\r\n  return (coordScreen * 0.5 + 0.5) * u_viewportSizePx;\r\n}\r\n\r\nvoid main(void) {\r\n  v_quadSizePx = ${this.symbolSizeExpression_};\r\n  vec2 halfSizePx = v_quadSizePx * 0.5;\r\n  vec2 centerOffsetPx = ${this.symbolOffsetExpression_};\r\n  vec2 offsetPx = centerOffsetPx;\r\n  if (a_index == 0.0) {\r\n    offsetPx -= halfSizePx;\r\n  } else if (a_index == 1.0) {\r\n    offsetPx += halfSizePx * vec2(1., -1.);\r\n  } else if (a_index == 2.0) {\r\n    offsetPx += halfSizePx;\r\n  } else {\r\n    offsetPx += halfSizePx * vec2(-1., 1.);\r\n  }\r\n  float angle = ${this.symbolRotationExpression_};\r\n  ${this.symbolRotateWithView_ ? 'angle += u_rotation;' : ''}\r\n  float c = cos(-angle);\r\n  float s = sin(-angle);\r\n  offsetPx = vec2(c * offsetPx.x - s * offsetPx.y, s * offsetPx.x + c * offsetPx.y);\r\n  vec4 center = u_projectionMatrix * vec4(a_position, 0.0, 1.0);\r\n  gl_Position = center + vec4(pxToScreen(offsetPx), u_depth, 0.);\r\n  vec4 texCoord = ${this.texCoordExpression_};\r\n  float u = a_index == 0.0 || a_index == 3.0 ? texCoord.s : texCoord.p;\r\n  float v = a_index == 2.0 || a_index == 3.0 ? texCoord.t : texCoord.q;\r\n  v_texCoord = vec2(u, v);\r\n  v_hitColor = a_hitColor;\r\n  v_angle = angle;\r\n  c = cos(-v_angle);\r\n  s = sin(-v_angle);\r\n  centerOffsetPx = vec2(c * centerOffsetPx.x - s * centerOffsetPx.y, s * centerOffsetPx.x + c * centerOffsetPx.y); \r\n  v_centerPx = screenToPx(center.xy) + centerOffsetPx;\r\n${this.varyings_\r\n  .map(function (varying) {\r\n    return '  ' + varying.name + ' = ' + varying.expression + ';';\r\n  })\r\n  .join('\\n')}\r\n}`;\r\n  }\r\n\r\n  /**\r\n   * Generates a symbol fragment shader from the builder parameters\r\n   * @return {string|null} The full shader as a string; null if no size or color specified\r\n   */\r\n  getSymbolFragmentShader() {\r\n    if (!this.hasSymbol_) {\r\n      return null;\r\n    }\r\n\r\n    return `${COMMON_HEADER}\r\n${this.uniforms_\r\n  .map(function (uniform) {\r\n    return 'uniform ' + uniform + ';';\r\n  })\r\n  .join('\\n')}\r\nvarying vec2 v_texCoord;\r\nvarying vec4 v_hitColor;\r\nvarying vec2 v_centerPx;\r\nvarying float v_angle;\r\nvarying vec2 v_quadSizePx;\r\n${this.varyings_\r\n  .map(function (varying) {\r\n    return 'varying ' + varying.type + ' ' + varying.name + ';';\r\n  })\r\n  .join('\\n')}\r\n${this.fragmentShaderFunctions_.join('\\n')}\r\n\r\nvoid main(void) {\r\n  if (${this.discardExpression_}) { discard; }\r\n  vec2 coordsPx = gl_FragCoord.xy / u_pixelRatio - v_centerPx; // relative to center\r\n  float c = cos(v_angle);\r\n  float s = sin(v_angle);\r\n  coordsPx = vec2(c * coordsPx.x - s * coordsPx.y, s * coordsPx.x + c * coordsPx.y);\r\n  gl_FragColor = ${this.symbolColorExpression_};\r\n  gl_FragColor.rgb *= gl_FragColor.a;\r\n  if (u_hitDetection > 0) {\r\n    if (gl_FragColor.a < 0.05) { discard; };\r\n    gl_FragColor = v_hitColor;\r\n  }\r\n}`;\r\n  }\r\n\r\n  /**\r\n   * Generates a stroke vertex shader from the builder parameters\r\n   * @return {string|null} The full shader as a string; null if no size or color specified\r\n   */\r\n  getStrokeVertexShader() {\r\n    if (!this.hasStroke_) {\r\n      return null;\r\n    }\r\n\r\n    return `${COMMON_HEADER}\r\n${this.uniforms_\r\n  .map(function (uniform) {\r\n    return 'uniform ' + uniform + ';';\r\n  })\r\n  .join('\\n')}\r\nattribute vec2 a_segmentStart;\r\nattribute vec2 a_segmentEnd;\r\nattribute float a_measureStart;\r\nattribute float a_measureEnd;\r\nattribute float a_parameters;\r\nattribute float a_distance;\r\nattribute vec2 a_joinAngles;\r\nattribute vec4 a_hitColor;\r\n${this.attributes_\r\n  .map(function (attribute) {\r\n    return 'attribute ' + attribute + ';';\r\n  })\r\n  .join('\\n')}\r\nvarying vec2 v_segmentStart;\r\nvarying vec2 v_segmentEnd;\r\nvarying float v_angleStart;\r\nvarying float v_angleEnd;\r\nvarying float v_width;\r\nvarying vec4 v_hitColor;\r\nvarying float v_distanceOffsetPx;\r\nvarying float v_measureStart;\r\nvarying float v_measureEnd;\r\n${this.varyings_\r\n  .map(function (varying) {\r\n    return 'varying ' + varying.type + ' ' + varying.name + ';';\r\n  })\r\n  .join('\\n')}\r\n${this.vertexShaderFunctions_.join('\\n')}\r\nvec2 worldToPx(vec2 worldPos) {\r\n  vec4 screenPos = u_projectionMatrix * vec4(worldPos, 0.0, 1.0);\r\n  return (0.5 * screenPos.xy + 0.5) * u_viewportSizePx;\r\n}\r\n\r\nvec4 pxToScreen(vec2 pxPos) {\r\n  vec2 screenPos = 2.0 * pxPos / u_viewportSizePx - 1.0;\r\n  return vec4(screenPos, u_depth, 1.0);\r\n}\r\n\r\nbool isCap(float joinAngle) {\r\n  return joinAngle < -0.1;\r\n}\r\n\r\nvec2 getJoinOffsetDirection(vec2 normalPx, float joinAngle) {\r\n  float halfAngle = joinAngle / 2.0;\r\n  float c = cos(halfAngle);\r\n  float s = sin(halfAngle);\r\n  vec2 angleBisectorNormal = vec2(s * normalPx.x + c * normalPx.y, -c * normalPx.x + s * normalPx.y);\r\n  float length = 1.0 / s;\r\n  return angleBisectorNormal * length;\r\n}\r\n\r\nvec2 getOffsetPoint(vec2 point, vec2 normal, float joinAngle, float offsetPx) {\r\n  // if on a cap or the join angle is too high, offset the line along the segment normal\r\n  if (cos(joinAngle) > 0.998 || isCap(joinAngle)) {\r\n    return point - normal * offsetPx;\r\n  }\r\n  // offset is applied along the inverted normal (positive offset goes \"right\" relative to line direction)\r\n  return point - getJoinOffsetDirection(normal, joinAngle) * offsetPx;\r\n}\r\n\r\nvoid main(void) {\r\n  v_angleStart = a_joinAngles.x;\r\n  v_angleEnd = a_joinAngles.y;\r\n  float vertexNumber = floor(abs(a_parameters) / 10000. + 0.5);\r\n  currentLineMetric = vertexNumber < 1.5 ? a_measureStart : a_measureEnd;\r\n  // we're reading the fractional part while keeping the sign (so -4.12 gives -0.12, 3.45 gives 0.45)\r\n  float angleTangentSum = fract(abs(a_parameters) / 10000.) * 10000. * sign(a_parameters);\r\n\r\n  float lineWidth = ${this.strokeWidthExpression_};\r\n  float lineOffsetPx = ${this.strokeOffsetExpression_};\r\n\r\n  // compute segment start/end in px with offset\r\n  vec2 segmentStartPx = worldToPx(a_segmentStart);\r\n  vec2 segmentEndPx = worldToPx(a_segmentEnd);\r\n  vec2 tangentPx = normalize(segmentEndPx - segmentStartPx);\r\n  vec2 normalPx = vec2(-tangentPx.y, tangentPx.x);\r\n  segmentStartPx = getOffsetPoint(segmentStartPx, normalPx, v_angleStart, lineOffsetPx),\r\n  segmentEndPx = getOffsetPoint(segmentEndPx, normalPx, v_angleEnd, lineOffsetPx);\r\n  \r\n  // compute current vertex position\r\n  float normalDir = vertexNumber < 0.5 || (vertexNumber > 1.5 && vertexNumber < 2.5) ? 1.0 : -1.0;\r\n  float tangentDir = vertexNumber < 1.5 ? 1.0 : -1.0;\r\n  float angle = vertexNumber < 1.5 ? v_angleStart : v_angleEnd;\r\n  vec2 joinDirection;\r\n  vec2 positionPx = vertexNumber < 1.5 ? segmentStartPx : segmentEndPx;\r\n  // if angle is too high, do not make a proper join\r\n  if (cos(angle) > ${LINESTRING_ANGLE_COSINE_CUTOFF} || isCap(angle)) {\r\n    joinDirection = normalPx * normalDir - tangentPx * tangentDir;\r\n  } else {\r\n    joinDirection = getJoinOffsetDirection(normalPx * normalDir, angle);\r\n  }\r\n  positionPx = positionPx + joinDirection * (lineWidth * 0.5 + 1.); // adding 1 pixel for antialiasing\r\n  gl_Position = pxToScreen(positionPx);\r\n\r\n  v_segmentStart = segmentStartPx;\r\n  v_segmentEnd = segmentEndPx;\r\n  v_width = lineWidth;\r\n  v_hitColor = a_hitColor;\r\n  v_distanceOffsetPx = a_distance / u_resolution - (lineOffsetPx * angleTangentSum);\r\n  v_measureStart = a_measureStart;\r\n  v_measureEnd = a_measureEnd;\r\n${this.varyings_\r\n  .map(function (varying) {\r\n    return '  ' + varying.name + ' = ' + varying.expression + ';';\r\n  })\r\n  .join('\\n')}\r\n}`;\r\n  }\r\n\r\n  /**\r\n   * Generates a stroke fragment shader from the builder parameters\r\n   *\r\n   * @return {string|null} The full shader as a string; null if no size or color specified\r\n   */\r\n  getStrokeFragmentShader() {\r\n    if (!this.hasStroke_) {\r\n      return null;\r\n    }\r\n\r\n    return `${COMMON_HEADER}\r\n${this.uniforms_\r\n  .map(function (uniform) {\r\n    return 'uniform ' + uniform + ';';\r\n  })\r\n  .join('\\n')}\r\nvarying vec2 v_segmentStart;\r\nvarying vec2 v_segmentEnd;\r\nvarying float v_angleStart;\r\nvarying float v_angleEnd;\r\nvarying float v_width;\r\nvarying vec4 v_hitColor;\r\nvarying float v_distanceOffsetPx;\r\nvarying float v_measureStart;\r\nvarying float v_measureEnd;\r\n${this.varyings_\r\n  .map(function (varying) {\r\n    return 'varying ' + varying.type + ' ' + varying.name + ';';\r\n  })\r\n  .join('\\n')}\r\n${this.fragmentShaderFunctions_.join('\\n')}\r\n\r\nvec2 pxToWorld(vec2 pxPos) {\r\n  vec2 screenPos = 2.0 * pxPos / u_viewportSizePx - 1.0;\r\n  return (u_screenToWorldMatrix * vec4(screenPos, 0.0, 1.0)).xy;\r\n}\r\n\r\nbool isCap(float joinAngle) {\r\n  return joinAngle < -0.1;\r\n}\r\n\r\nfloat segmentDistanceField(vec2 point, vec2 start, vec2 end, float width) {\r\n  vec2 tangent = normalize(end - start);\r\n  vec2 normal = vec2(-tangent.y, tangent.x);\r\n  vec2 startToPoint = point - start;\r\n  return abs(dot(startToPoint, normal)) - width * 0.5;\r\n}\r\n\r\nfloat buttCapDistanceField(vec2 point, vec2 start, vec2 end) {\r\n  vec2 startToPoint = point - start;\r\n  vec2 tangent = normalize(end - start);\r\n  return dot(startToPoint, -tangent);\r\n}\r\n\r\nfloat squareCapDistanceField(vec2 point, vec2 start, vec2 end, float width) {\r\n  return buttCapDistanceField(point, start, end) - width * 0.5;\r\n}\r\n\r\nfloat roundCapDistanceField(vec2 point, vec2 start, vec2 end, float width) {\r\n  float onSegment = max(0., 1000. * dot(point - start, end - start)); // this is very high when inside the segment\r\n  return length(point - start) - width * 0.5 - onSegment;\r\n}\r\n\r\nfloat roundJoinDistanceField(vec2 point, vec2 start, vec2 end, float width) {\r\n  return roundCapDistanceField(point, start, end, width);\r\n}\r\n\r\nfloat bevelJoinField(vec2 point, vec2 start, vec2 end, float width, float joinAngle) {\r\n  vec2 startToPoint = point - start;\r\n  vec2 tangent = normalize(end - start);\r\n  float c = cos(joinAngle * 0.5);\r\n  float s = sin(joinAngle * 0.5);\r\n  float direction = -sign(sin(joinAngle));\r\n  vec2 bisector = vec2(c * tangent.x - s * tangent.y, s * tangent.x + c * tangent.y);\r\n  float radius = width * 0.5 * s;\r\n  return dot(startToPoint, bisector * direction) - radius;\r\n}\r\n\r\nfloat miterJoinDistanceField(vec2 point, vec2 start, vec2 end, float width, float joinAngle) {\r\n  if (cos(joinAngle) > ${LINESTRING_ANGLE_COSINE_CUTOFF}) { // avoid risking a division by zero\r\n    return bevelJoinField(point, start, end, width, joinAngle);\r\n  }\r\n  float miterLength = 1. / sin(joinAngle * 0.5);\r\n  float miterLimit = ${this.strokeMiterLimitExpression_};\r\n  if (miterLength > miterLimit) {\r\n    return bevelJoinField(point, start, end, width, joinAngle);\r\n  }\r\n  return -1000.;\r\n}\r\n\r\nfloat capDistanceField(vec2 point, vec2 start, vec2 end, float width, float capType) {\r\n   if (capType == ${stringToGlsl('butt')}) {\r\n    return buttCapDistanceField(point, start, end);\r\n  } else if (capType == ${stringToGlsl('square')}) {\r\n    return squareCapDistanceField(point, start, end, width);\r\n  }\r\n  return roundCapDistanceField(point, start, end, width);\r\n}\r\n\r\nfloat joinDistanceField(vec2 point, vec2 start, vec2 end, float width, float joinAngle, float joinType) {\r\n  if (joinType == ${stringToGlsl('bevel')}) {\r\n    return bevelJoinField(point, start, end, width, joinAngle);\r\n  } else if (joinType == ${stringToGlsl('miter')}) {\r\n    return miterJoinDistanceField(point, start, end, width, joinAngle);\r\n  }\r\n  return roundJoinDistanceField(point, start, end, width);\r\n}\r\n\r\nfloat computeSegmentPointDistance(vec2 point, vec2 start, vec2 end, float width, float joinAngle, float capType, float joinType) {\r\n  if (isCap(joinAngle)) {\r\n    return capDistanceField(point, start, end, width, capType);\r\n  }\r\n  return joinDistanceField(point, start, end, width, joinAngle, joinType);\r\n}\r\n\r\nvoid main(void) {\r\n  vec2 currentPoint = gl_FragCoord.xy / u_pixelRatio;\r\n  #ifdef GL_FRAGMENT_PRECISION_HIGH\r\n  vec2 worldPos = pxToWorld(currentPoint);\r\n  if (\r\n    abs(u_renderExtent[0] - u_renderExtent[2]) > 0.0 && (\r\n      worldPos[0] < u_renderExtent[0] ||\r\n      worldPos[1] < u_renderExtent[1] ||\r\n      worldPos[0] > u_renderExtent[2] ||\r\n      worldPos[1] > u_renderExtent[3]\r\n    )\r\n  ) {\r\n    discard;\r\n  }\r\n  #endif\r\n\r\n  float segmentLength = length(v_segmentEnd - v_segmentStart);\r\n  vec2 segmentTangent = (v_segmentEnd - v_segmentStart) / segmentLength;\r\n  vec2 segmentNormal = vec2(-segmentTangent.y, segmentTangent.x);\r\n  vec2 startToPoint = currentPoint - v_segmentStart;\r\n  float lengthToPoint = max(0., min(dot(segmentTangent, startToPoint), segmentLength));\r\n  float currentLengthPx = lengthToPoint + v_distanceOffsetPx; \r\n  float currentRadiusPx = abs(dot(segmentNormal, startToPoint));\r\n  float currentRadiusRatio = dot(segmentNormal, startToPoint) * 2. / v_width;\r\n  currentLineMetric = mix(v_measureStart, v_measureEnd, lengthToPoint / segmentLength);\r\n\r\n  if (${this.discardExpression_}) { discard; }\r\n\r\n  vec4 color = ${this.strokeColorExpression_};\r\n  float capType = ${this.strokeCapExpression_};\r\n  float joinType = ${this.strokeJoinExpression_};\r\n  float segmentStartDistance = computeSegmentPointDistance(currentPoint, v_segmentStart, v_segmentEnd, v_width, v_angleStart, capType, joinType);\r\n  float segmentEndDistance = computeSegmentPointDistance(currentPoint, v_segmentEnd, v_segmentStart, v_width, v_angleEnd, capType, joinType);\r\n  float distance = max(\r\n    segmentDistanceField(currentPoint, v_segmentStart, v_segmentEnd, v_width),\r\n    max(segmentStartDistance, segmentEndDistance)\r\n  );\r\n  distance = max(distance, ${this.strokeDistanceFieldExpression_});\r\n  color.a *= smoothstep(0.5, -0.5, distance);\r\n  gl_FragColor = color;\r\n  gl_FragColor.a *= u_globalAlpha;\r\n  gl_FragColor.rgb *= gl_FragColor.a;\r\n  if (u_hitDetection > 0) {\r\n    if (gl_FragColor.a < 0.1) { discard; };\r\n    gl_FragColor = v_hitColor;\r\n  }\r\n}`;\r\n  }\r\n\r\n  /**\r\n   * Generates a fill vertex shader from the builder parameters\r\n   *\r\n   * @return {string|null} The full shader as a string; null if no color specified\r\n   */\r\n  getFillVertexShader() {\r\n    if (!this.hasFill_) {\r\n      return null;\r\n    }\r\n\r\n    return `${COMMON_HEADER}\r\n${this.uniforms_\r\n  .map(function (uniform) {\r\n    return 'uniform ' + uniform + ';';\r\n  })\r\n  .join('\\n')}\r\nattribute vec2 a_position;\r\nattribute vec4 a_hitColor;\r\n${this.attributes_\r\n  .map(function (attribute) {\r\n    return 'attribute ' + attribute + ';';\r\n  })\r\n  .join('\\n')}\r\nvarying vec4 v_hitColor;\r\n${this.varyings_\r\n  .map(function (varying) {\r\n    return 'varying ' + varying.type + ' ' + varying.name + ';';\r\n  })\r\n  .join('\\n')}\r\n${this.vertexShaderFunctions_.join('\\n')}\r\nvoid main(void) {\r\n  gl_Position = u_projectionMatrix * vec4(a_position, u_depth, 1.0);\r\n  v_hitColor = a_hitColor;\r\n${this.varyings_\r\n  .map(function (varying) {\r\n    return '  ' + varying.name + ' = ' + varying.expression + ';';\r\n  })\r\n  .join('\\n')}\r\n}`;\r\n  }\r\n\r\n  /**\r\n   * Generates a fill fragment shader from the builder parameters\r\n   * @return {string|null} The full shader as a string; null if no color specified\r\n   */\r\n  getFillFragmentShader() {\r\n    if (!this.hasFill_) {\r\n      return null;\r\n    }\r\n\r\n    return `${COMMON_HEADER}\r\n${this.uniforms_\r\n  .map(function (uniform) {\r\n    return 'uniform ' + uniform + ';';\r\n  })\r\n  .join('\\n')}\r\nvarying vec4 v_hitColor;\r\n${this.varyings_\r\n  .map(function (varying) {\r\n    return 'varying ' + varying.type + ' ' + varying.name + ';';\r\n  })\r\n  .join('\\n')}\r\n${this.fragmentShaderFunctions_.join('\\n')}\r\nvec2 pxToWorld(vec2 pxPos) {\r\n  vec2 screenPos = 2.0 * pxPos / u_viewportSizePx - 1.0;\r\n  return (u_screenToWorldMatrix * vec4(screenPos, 0.0, 1.0)).xy;\r\n}\r\n\r\nvec2 worldToPx(vec2 worldPos) {\r\n  vec4 screenPos = u_projectionMatrix * vec4(worldPos, 0.0, 1.0);\r\n  return (0.5 * screenPos.xy + 0.5) * u_viewportSizePx;\r\n}\r\n\r\nvoid main(void) {\r\n  vec2 pxPos = gl_FragCoord.xy / u_pixelRatio;\r\n  vec2 pxOrigin = worldToPx(u_patternOrigin);\r\n  #ifdef GL_FRAGMENT_PRECISION_HIGH\r\n  vec2 worldPos = pxToWorld(pxPos);\r\n  if (\r\n    abs(u_renderExtent[0] - u_renderExtent[2]) > 0.0 && (\r\n      worldPos[0] < u_renderExtent[0] ||\r\n      worldPos[1] < u_renderExtent[1] ||\r\n      worldPos[0] > u_renderExtent[2] ||\r\n      worldPos[1] > u_renderExtent[3]\r\n    )\r\n  ) {\r\n    discard;\r\n  }\r\n  #endif\r\n  if (${this.discardExpression_}) { discard; }\r\n  gl_FragColor = ${this.fillColorExpression_};\r\n  gl_FragColor.a *= u_globalAlpha;\r\n  gl_FragColor.rgb *= gl_FragColor.a;\r\n  if (u_hitDetection > 0) {\r\n    if (gl_FragColor.a < 0.1) { discard; };\r\n    gl_FragColor = v_hitColor;\r\n  }\r\n}`;\r\n  }\r\n}\r\n", "/**\r\n * @module ol/renderer/canvas/VectorImageLayer\r\n */\r\nimport RBush from 'rbush';\r\nimport ImageCanvas from '../../ImageCanvas.js';\r\nimport ImageState from '../../ImageState.js';\r\nimport ViewHint from '../../ViewHint.js';\r\nimport EventType from '../../events/EventType.js';\r\nimport {getHeight, getWidth, isEmpty, scaleFromCenter} from '../../extent.js';\r\nimport {fromResolutionLike} from '../../resolution.js';\r\nimport {apply, compose, create} from '../../transform.js';\r\nimport CanvasImageLayerRenderer from './ImageLayer.js';\r\nimport CanvasVectorLayerRenderer from './VectorLayer.js';\r\n\r\n/**\r\n * @classdesc\r\n * Canvas renderer for image layers.\r\n * @api\r\n */\r\nclass CanvasVectorImageLayerRenderer extends CanvasImageLayerRenderer {\r\n  /**\r\n   * @param {import(\"../../layer/VectorImage.js\").default} layer Vector image layer.\r\n   */\r\n  constructor(layer) {\r\n    super(layer);\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./VectorLayer.js\").default}\r\n     */\r\n    this.vectorRenderer_ = new CanvasVectorLayerRenderer(layer);\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.layerImageRatio_ = layer.getImageRatio();\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../transform.js\").Transform}\r\n     */\r\n    this.coordinateToVectorPixelTransform_ = create();\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../transform.js\").Transform}\r\n     */\r\n    this.renderedPixelToCoordinateTransform_ = null;\r\n  }\r\n\r\n  /**\r\n   * Clean up.\r\n   * @override\r\n   */\r\n  disposeInternal() {\r\n    this.vectorRenderer_.dispose();\r\n    super.disposeInternal();\r\n  }\r\n\r\n  /**\r\n   * Asynchronous layer level hit detection.\r\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\r\n   * @return {Promise<Array<import(\"../../Feature\").default>>} Promise that resolves with an array of features.\r\n   * @override\r\n   */\r\n  getFeatures(pixel) {\r\n    if (!this.vectorRenderer_) {\r\n      return Promise.resolve([]);\r\n    }\r\n    const vectorPixel = apply(\r\n      this.coordinateToVectorPixelTransform_,\r\n      apply(this.renderedPixelToCoordinateTransform_, pixel.slice()),\r\n    );\r\n    return this.vectorRenderer_.getFeatures(vectorPixel);\r\n  }\r\n\r\n  /**\r\n   * Perform action necessary to get the layer rendered after new fonts have loaded\r\n   * @override\r\n   */\r\n  handleFontsChanged() {\r\n    this.vectorRenderer_.handleFontsChanged();\r\n  }\r\n\r\n  /**\r\n   * Determine whether render should be called.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @return {boolean} Layer is ready to be rendered.\r\n   * @override\r\n   */\r\n  prepareFrame(frameState) {\r\n    const pixelRatio = frameState.pixelRatio;\r\n    const viewState = frameState.viewState;\r\n    const viewResolution = viewState.resolution;\r\n\r\n    const hints = frameState.viewHints;\r\n    const vectorRenderer = this.vectorRenderer_;\r\n    let renderedExtent = frameState.extent;\r\n    if (this.layerImageRatio_ !== 1) {\r\n      renderedExtent = renderedExtent.slice(0);\r\n      scaleFromCenter(renderedExtent, this.layerImageRatio_);\r\n    }\r\n    const width = getWidth(renderedExtent) / viewResolution;\r\n    const height = getHeight(renderedExtent) / viewResolution;\r\n\r\n    if (\r\n      !hints[ViewHint.ANIMATING] &&\r\n      !hints[ViewHint.INTERACTING] &&\r\n      !isEmpty(renderedExtent)\r\n    ) {\r\n      vectorRenderer.useContainer(null, null);\r\n      const context = vectorRenderer.context;\r\n      const layerState = frameState.layerStatesArray[frameState.layerIndex];\r\n      const imageLayerState = Object.assign({}, layerState, {opacity: 1});\r\n      const imageFrameState = /** @type {import(\"../../Map.js\").FrameState} */ (\r\n        Object.assign({}, frameState, {\r\n          extent: renderedExtent,\r\n          size: [width, height],\r\n          viewState: /** @type {import(\"../../View.js\").State} */ (\r\n            Object.assign({}, frameState.viewState, {\r\n              rotation: 0,\r\n            })\r\n          ),\r\n          layerStatesArray: [imageLayerState],\r\n          layerIndex: 0,\r\n          declutter: null,\r\n        })\r\n      );\r\n      const declutter = this.getLayer().getDeclutter();\r\n      if (declutter) {\r\n        imageFrameState.declutter = {\r\n          [declutter]: new RBush(9),\r\n        };\r\n      }\r\n      let emptyImage = true;\r\n      const image = new ImageCanvas(\r\n        renderedExtent,\r\n        viewResolution,\r\n        pixelRatio,\r\n        context.canvas,\r\n        function (callback) {\r\n          if (\r\n            vectorRenderer.prepareFrame(imageFrameState) &&\r\n            vectorRenderer.replayGroupChanged\r\n          ) {\r\n            vectorRenderer.clipping = false;\r\n            if (vectorRenderer.renderFrame(imageFrameState, null)) {\r\n              vectorRenderer.renderDeclutter(imageFrameState);\r\n              vectorRenderer.renderDeferred(imageFrameState);\r\n              emptyImage = false;\r\n            }\r\n            callback();\r\n          }\r\n        },\r\n      );\r\n\r\n      image.addEventListener(EventType.CHANGE, () => {\r\n        if (image.getState() !== ImageState.LOADED) {\r\n          return;\r\n        }\r\n        this.image = emptyImage ? null : image;\r\n        const imagePixelRatio = image.getPixelRatio();\r\n        const renderedResolution =\r\n          (fromResolutionLike(image.getResolution()) * pixelRatio) /\r\n          imagePixelRatio;\r\n        this.renderedResolution = renderedResolution;\r\n        this.coordinateToVectorPixelTransform_ = compose(\r\n          this.coordinateToVectorPixelTransform_,\r\n          width / 2,\r\n          height / 2,\r\n          1 / renderedResolution,\r\n          -1 / renderedResolution,\r\n          0,\r\n          -viewState.center[0],\r\n          -viewState.center[1],\r\n        );\r\n      });\r\n      image.load();\r\n    }\r\n\r\n    if (this.image) {\r\n      this.renderedPixelToCoordinateTransform_ =\r\n        frameState.pixelToCoordinateTransform.slice();\r\n    }\r\n\r\n    return !!this.image;\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  preRender() {}\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  postRender() {}\r\n\r\n  /**\r\n   */\r\n  renderDeclutter() {}\r\n\r\n  /**\r\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @param {number} hitTolerance Hit tolerance in pixels.\r\n   * @param {import(\"../vector.js\").FeatureCallback<T>} callback Feature callback.\r\n   * @param {Array<import(\"../Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\r\n   * @return {T|undefined} Callback result.\r\n   * @template T\r\n   * @override\r\n   */\r\n  forEachFeatureAtCoordinate(\r\n    coordinate,\r\n    frameState,\r\n    hitTolerance,\r\n    callback,\r\n    matches,\r\n  ) {\r\n    if (this.vectorRenderer_) {\r\n      return this.vectorRenderer_.forEachFeatureAtCoordinate(\r\n        coordinate,\r\n        frameState,\r\n        hitTolerance,\r\n        callback,\r\n        matches,\r\n      );\r\n    }\r\n    return super.forEachFeatureAtCoordinate(\r\n      coordinate,\r\n      frameState,\r\n      hitTolerance,\r\n      callback,\r\n      matches,\r\n    );\r\n  }\r\n}\r\n\r\nexport default CanvasVectorImageLayerRenderer;\r\n", "/**\r\n * @module ol/layer/VectorImage\r\n */\r\nimport CanvasVectorImageLayerRenderer from '../renderer/canvas/VectorImageLayer.js';\r\nimport BaseVectorLayer from './BaseVector.js';\r\n\r\n/**\r\n * @template {import(\"../source/Vector.js\").default<FeatureType>} [VectorSourceType=import(\"../source/Vector.js\").default<*>]\r\n * @template {import('../Feature.js').FeatureLike} [FeatureType=import(\"./BaseVector.js\").ExtractedFeatureType<VectorSourceType>]\r\n * @typedef {Object} Options\r\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\r\n * @property {number} [opacity=1] Opacity (0, 1).\r\n * @property {boolean} [visible=true] Visibility.\r\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\r\n * rendered outside of this extent.\r\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\r\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\r\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\r\n * method was used.\r\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\r\n * visible.\r\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\r\n * be visible.\r\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\r\n * visible.\r\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\r\n * be visible.\r\n * @property {import(\"../render.js\").OrderFunction} [renderOrder] Render order. Function to be used when sorting\r\n * features before rendering. By default features are drawn in the order that they are created. Use\r\n * `null` to avoid the sort, but get an undefined draw order.\r\n * @property {number} [renderBuffer=100] The buffer in pixels around the viewport extent used by the\r\n * renderer when getting features from the vector source for the rendering or hit-detection.\r\n * Recommended value: the size of the largest symbol, line width or label.\r\n * @property {VectorSourceType} [source] Source.\r\n * @property {import(\"../Map.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\r\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\r\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\r\n * use [map.addLayer()]{@link import(\"../Map.js\").default#addLayer}.\r\n * @property {boolean|string|number} [declutter=false] Declutter images and text on this layer. Any truthy value will enable\r\n * decluttering. The priority is defined by the `zIndex` of the style and the render order of features. Higher z-index means higher\r\n * priority. Within the same z-index, a feature rendered before another has higher priority. Items will\r\n * not be decluttered against or together with items on other layers with the same `declutter` value. If\r\n * that is needed, use {@link import(\"../layer/Vector.js\").default} instead.\r\n * @property {import(\"../style/Style.js\").StyleLike|import(\"../style/flat.js\").FlatStyleLike|null} [style] Layer style. When set to `null`, only\r\n * features that have their own style will be rendered. See {@link module:ol/style/Style~Style} for the default style\r\n * which will be used if this is not set.\r\n * @property {import(\"./Base.js\").BackgroundColor} [background] Background color for the layer. If not specified, no background\r\n * will be rendered.\r\n * @property {number} [imageRatio=1] Ratio by which the rendered extent should be larger than the\r\n * viewport extent. A larger ratio avoids cut images during panning, but will cause a decrease in performance.\r\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Vector data is rendered client-side, to an image. This layer type provides great performance\r\n * during panning and zooming, but point symbols and texts are always rotated with the view and\r\n * pixels are scaled during zoom animations. For more accurate rendering of vector data, use\r\n * {@link module:ol/layer/Vector~VectorLayer} instead.\r\n *\r\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\r\n * property on the layer object; for example, setting `title: 'My Title'` in the\r\n * options means that `title` is observable, and has get/set accessors.\r\n *\r\n * @template {import(\"../source/Vector.js\").default<FeatureType>} [VectorSourceType=import(\"../source/Vector.js\").default<*>]\r\n * @template {import('../Feature.js').FeatureLike} [FeatureType=import(\"./BaseVector.js\").ExtractedFeatureType<VectorSourceType>]\r\n * @extends {BaseVectorLayer<FeatureType, VectorSourceType, CanvasVectorImageLayerRenderer>}\r\n * @api\r\n */\r\nclass VectorImageLayer extends BaseVectorLayer {\r\n  /**\r\n   * @param {Options<VectorSourceType, FeatureType>} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    options = options ? options : {};\r\n\r\n    const baseOptions = Object.assign({}, options);\r\n    delete baseOptions.imageRatio;\r\n    super(baseOptions);\r\n\r\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.imageRatio_ =\r\n      options.imageRatio !== undefined ? options.imageRatio : 1;\r\n  }\r\n\r\n  /**\r\n   * @return {number} Ratio between rendered extent size and viewport extent size.\r\n   */\r\n  getImageRatio() {\r\n    return this.imageRatio_;\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  createRenderer() {\r\n    return new CanvasVectorImageLayerRenderer(this);\r\n  }\r\n}\r\n\r\nexport default VectorImageLayer;\r\n", "/**\r\n * @module ol/layer/VectorTile\r\n */\r\nimport {assert} from '../asserts.js';\r\nimport CanvasVectorTileLayerRenderer from '../renderer/canvas/VectorTileLayer.js';\r\nimport BaseVectorLayer from './BaseVector.js';\r\nimport TileProperty from './TileProperty.js';\r\n\r\n/***\r\n * @template Return\r\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\r\n *   import(\"../Observable\").OnSignature<import(\"./Base\").BaseLayerObjectEventTypes|\r\n *     import(\"./Layer.js\").LayerEventType|'change:preload'|'change:useInterimTilesOnError', import(\"../Object\").ObjectEvent, Return> &\r\n *   import(\"../Observable\").OnSignature<import(\"../render/EventType\").LayerRenderEventTypes, import(\"../render/Event\").default, Return> &\r\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"./Base\").BaseLayerObjectEventTypes|\r\n *     import(\"./Layer.js\").LayerEventType|'change:preload'|'change:useInterimTilesOnError'|import(\"../render/EventType\").LayerRenderEventTypes, Return>} VectorTileLayerOnSignature\r\n */\r\n\r\n/**\r\n * @typedef {'hybrid' | 'vector'} VectorTileRenderType\r\n */\r\n\r\n/***\r\n * @template T\r\n * @typedef {T extends import(\"../source/VectorTile.js\").default<infer U extends import(\"../Feature.js\").FeatureLike> ? U : never} ExtractedFeatureType\r\n */\r\n\r\n/**\r\n * @template {import(\"../source/VectorTile.js\").default<FeatureType>} [VectorTileSourceType=import(\"../source/VectorTile.js\").default<*>]\r\n * @template {import(\"../Feature\").FeatureLike} [FeatureType=ExtractedFeatureType<VectorTileSourceType>]\r\n * @typedef {Object} Options\r\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\r\n * @property {number} [opacity=1] Opacity (0, 1).\r\n * @property {boolean} [visible=true] Visibility.\r\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\r\n * rendered outside of this extent.\r\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\r\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\r\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\r\n * method was used.\r\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\r\n * visible.\r\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\r\n * be visible.\r\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\r\n * visible.\r\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\r\n * be visible.\r\n * @property {import(\"../render.js\").OrderFunction} [renderOrder] Render order. Function to be used when sorting\r\n * features before rendering. By default features are drawn in the order that they are created. Use\r\n * `null` to avoid the sort, but get an undefined draw order.\r\n * @property {number} [renderBuffer=100] The buffer in pixels around the tile extent used by the\r\n * renderer when getting features from the vector tile for the rendering or hit-detection.\r\n * Recommended value: Vector tiles are usually generated with a buffer, so this value should match\r\n * the largest possible buffer of the used tiles. It should be at least the size of the largest\r\n * point symbol or line width.\r\n * @property {VectorTileRenderType} [renderMode='hybrid'] Render mode for vector tiles:\r\n *  `'hybrid'`: Polygon and line elements are rendered as images, so pixels are scaled during zoom\r\n *    animations. Point symbols and texts are accurately rendered as vectors and can stay upright on\r\n *    rotated views, but get lifted above all polygon and line elements.\r\n *  `'vector'`: Everything is rendered as vectors and the original render order is maintained. Use\r\n *    this mode for improved performance and visual epxerience on vector tile layers with not too many\r\n *    rendered features (e.g. for highlighting a subset of features of another layer with the same\r\n *    source).\r\n * @property {VectorTileSourceType} [source] Source.\r\n * @property {import(\"../Map.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\r\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\r\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\r\n * use [map.addLayer()]{@link import(\"../Map.js\").default#addLayer}.\r\n * @property {boolean|string|number} [declutter=false] Declutter images and text. Any truthy value will enable\r\n * decluttering. Within a layer, a feature rendered before another has higher priority. All layers with the\r\n * same `declutter` value will be decluttered together. The priority is determined by the drawing order of the\r\n * layers with the same `declutter` value. Higher in the layer stack means higher priority. To declutter distinct\r\n * layers or groups of layers separately, use different truthy values for `declutter`.\r\n * @property {import(\"../style/Style.js\").StyleLike|null} [style] Layer style. When set to `null`, only\r\n * features that have their own style will be rendered. See {@link module:ol/style/Style~Style} for the default style\r\n * which will be used if this is not set.\r\n * @property {import(\"./Base.js\").BackgroundColor} [background] Background color for the layer. If not specified, no\r\n * background will be rendered.\r\n * @property {boolean} [updateWhileAnimating=false] When set to `true`, feature batches will be\r\n * recreated during animations. This means that no vectors will be shown clipped, but the setting\r\n * will have a performance impact for large amounts of vector data. When set to `false`, batches\r\n * will be recreated when no animation is active.\r\n * @property {boolean} [updateWhileInteracting=false] When set to `true`, feature batches will be\r\n * recreated during interactions. See also `updateWhileAnimating`.\r\n * @property {number} [preload=0] Preload. Load low-resolution tiles up to `preload` levels. `0`\r\n * means no preloading.\r\n * @property {boolean} [useInterimTilesOnError=true] Deprecated.  Use interim tiles on error.\r\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\r\n * @property {number} [cacheSize=0] The internal tile cache size.  If too small, this will auto-grow to hold\r\n * two zoom levels worth of tiles.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Layer for vector tile data that is rendered client-side.\r\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\r\n * property on the layer object; for example, setting `title: 'My Title'` in the\r\n * options means that `title` is observable, and has get/set accessors.\r\n *\r\n * @template {import(\"../source/VectorTile.js\").default<FeatureType>} [VectorTileSourceType=import(\"../source/VectorTile.js\").default<*>]\r\n * @template {import(\"../Feature.js\").FeatureLike} [FeatureType=ExtractedFeatureType<VectorTileSourceType>]\r\n * @extends {BaseVectorLayer<FeatureType, VectorTileSourceType, CanvasVectorTileLayerRenderer>}\r\n * @api\r\n */\r\nclass VectorTileLayer extends BaseVectorLayer {\r\n  /**\r\n   * @param {Options<VectorTileSourceType, FeatureType>} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    options = options ? options : {};\r\n\r\n    const baseOptions = Object.assign({}, options);\r\n    delete baseOptions.preload;\r\n    const cacheSize = options.cacheSize === undefined ? 0 : options.cacheSize;\r\n    delete options.cacheSize;\r\n    delete baseOptions.useInterimTilesOnError;\r\n\r\n    super(baseOptions);\r\n\r\n    /***\r\n     * @type {VectorTileLayerOnSignature<import(\"../events\").EventsKey>}\r\n     */\r\n    this.on;\r\n\r\n    /***\r\n     * @type {VectorTileLayerOnSignature<import(\"../events\").EventsKey>}\r\n     */\r\n    this.once;\r\n\r\n    /***\r\n     * @type {VectorTileLayerOnSignature<void>}\r\n     */\r\n    this.un;\r\n\r\n    /**\r\n     * @type {number|undefined}\r\n     * @private\r\n     */\r\n    this.cacheSize_ = cacheSize;\r\n\r\n    const renderMode = options.renderMode || 'hybrid';\r\n    assert(\r\n      renderMode == 'hybrid' || renderMode == 'vector',\r\n      \"`renderMode` must be `'hybrid'` or `'vector'`\",\r\n    );\r\n\r\n    /**\r\n     * @private\r\n     * @type {VectorTileRenderType}\r\n     */\r\n    this.renderMode_ = renderMode;\r\n\r\n    this.setPreload(options.preload ? options.preload : 0);\r\n    this.setUseInterimTilesOnError(\r\n      options.useInterimTilesOnError !== undefined\r\n        ? options.useInterimTilesOnError\r\n        : true,\r\n    );\r\n\r\n    /**\r\n     * @return {import(\"./Base.js\").BackgroundColor} Background color.\r\n     * @function\r\n     * @api\r\n     */\r\n    this.getBackground;\r\n\r\n    /**\r\n     * @param {import(\"./Base.js\").BackgroundColor} background Background color.\r\n     * @function\r\n     * @api\r\n     */\r\n    this.setBackground;\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  createRenderer() {\r\n    return new CanvasVectorTileLayerRenderer(this, {\r\n      cacheSize: this.cacheSize_,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get the topmost feature that intersects the given pixel on the viewport. Returns a promise\r\n   * that resolves with an array of features. The array will either contain the topmost feature\r\n   * when a hit was detected, or it will be empty.\r\n   *\r\n   * The hit detection algorithm used for this method is optimized for performance, but is less\r\n   * accurate than the one used in [map.getFeaturesAtPixel()]{@link import(\"../Map.js\").default#getFeaturesAtPixel}.\r\n   * Text is not considered, and icons are only represented by their bounding box instead of the exact\r\n   * image.\r\n   *\r\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel.\r\n   * @return {Promise<Array<import(\"../Feature\").FeatureLike>>} Promise that resolves with an array of features.\r\n   * @api\r\n   * @override\r\n   */\r\n  getFeatures(pixel) {\r\n    return super.getFeatures(pixel);\r\n  }\r\n\r\n  /**\r\n   * Get features whose bounding box intersects the provided extent. Only features for cached\r\n   * tiles for the last rendered zoom level are available in the source. So this method is only\r\n   * suitable for requesting tiles for extents that are currently rendered.\r\n   *\r\n   * Features are returned in random tile order and as they are included in the tiles. This means\r\n   * they can be clipped, duplicated across tiles, and simplified to the render resolution.\r\n   *\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @return {Array<FeatureType>} Features.\r\n   * @api\r\n   */\r\n  getFeaturesInExtent(extent) {\r\n    return /** @type {Array<FeatureType>} */ (\r\n      /** @type {*} */ (this.getRenderer().getFeaturesInExtent(extent))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @return {VectorTileRenderType} The render mode.\r\n   */\r\n  getRenderMode() {\r\n    return this.renderMode_;\r\n  }\r\n\r\n  /**\r\n   * Return the level as number to which we will preload tiles up to.\r\n   * @return {number} The level to preload tiles up to.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getPreload() {\r\n    return /** @type {number} */ (this.get(TileProperty.PRELOAD));\r\n  }\r\n\r\n  /**\r\n   * Deprecated.  Whether we use interim tiles on error.\r\n   * @return {boolean} Use interim tiles on error.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getUseInterimTilesOnError() {\r\n    return /** @type {boolean} */ (\r\n      this.get(TileProperty.USE_INTERIM_TILES_ON_ERROR)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Set the level as number to which we will preload tiles up to.\r\n   * @param {number} preload The level to preload tiles up to.\r\n   * @observable\r\n   * @api\r\n   */\r\n  setPreload(preload) {\r\n    this.set(TileProperty.PRELOAD, preload);\r\n  }\r\n\r\n  /**\r\n   * Deprecated.  Set whether we use interim tiles on error.\r\n   * @param {boolean} useInterimTilesOnError Use interim tiles on error.\r\n   * @observable\r\n   * @api\r\n   */\r\n  setUseInterimTilesOnError(useInterimTilesOnError) {\r\n    this.set(TileProperty.USE_INTERIM_TILES_ON_ERROR, useInterimTilesOnError);\r\n  }\r\n}\r\n\r\nexport default VectorTileLayer;\r\n", "/**\r\n * @module ol/renderer/canvas/VectorTileLayer\r\n */\r\nimport TileState from '../../TileState.js';\r\nimport ViewHint from '../../ViewHint.js';\r\nimport {ascending} from '../../array.js';\r\nimport {wrapX} from '../../coordinate.js';\r\nimport {\r\n  boundingExtent,\r\n  buffer,\r\n  containsExtent,\r\n  equals,\r\n  getIntersection,\r\n  getTopLeft,\r\n  intersects,\r\n} from '../../extent.js';\r\nimport CanvasBuilderGroup from '../../render/canvas/BuilderGroup.js';\r\nimport CanvasExecutorGroup, {\r\n  DECLUTTER,\r\n} from '../../render/canvas/ExecutorGroup.js';\r\nimport ZIndexContext from '../../render/canvas/ZIndexContext.js';\r\nimport {\r\n  HIT_DETECT_RESOLUTION,\r\n  createHitDetectionImageData,\r\n  hitDetect,\r\n} from '../../render/canvas/hitdetect.js';\r\nimport {toSize} from '../../size.js';\r\nimport {\r\n  apply as applyTransform,\r\n  create as createTransform,\r\n  multiply,\r\n  reset as resetTransform,\r\n  scale,\r\n  scale as scaleTransform,\r\n  translate as translateTransform,\r\n} from '../../transform.js';\r\nimport {getUid} from '../../util.js';\r\nimport {\r\n  getSquaredTolerance as getSquaredRenderTolerance,\r\n  renderFeature,\r\n} from '../vector.js';\r\nimport CanvasTileLayerRenderer from './TileLayer.js';\r\n\r\n/**\r\n * @type {!Object<string, Array<import(\"../../render/canvas.js\").BuilderType>>}\r\n */\r\nconst IMAGE_REPLAYS = {\r\n  'image': ['Polygon', 'Circle', 'LineString', 'Image', 'Text'],\r\n  'hybrid': ['Polygon', 'LineString'],\r\n  'vector': [],\r\n};\r\n\r\n/**\r\n * @type {!Object<string, Array<import(\"../../render/canvas.js\").BuilderType>>}\r\n */\r\nconst VECTOR_REPLAYS = {\r\n  'hybrid': ['Image', 'Text', 'Default'],\r\n  'vector': ['Polygon', 'Circle', 'LineString', 'Image', 'Text', 'Default'],\r\n};\r\n\r\n/**\r\n * @classdesc\r\n * Canvas renderer for vector tile layers.\r\n * @api\r\n * @extends {CanvasTileLayerRenderer<import(\"../../layer/VectorTile.js\").default<import('../../source/VectorTile.js').default<import('../../Feature.js').FeatureLike>>>}\r\n */\r\nclass CanvasVectorTileLayerRenderer extends CanvasTileLayerRenderer {\r\n  /**\r\n   * @param {import(\"../../layer/VectorTile.js\").default} layer VectorTile layer.\r\n   * @param {import(\"./TileLayer.js\").Options} options Options.\r\n   */\r\n  constructor(layer, options) {\r\n    super(layer, options);\r\n\r\n    /** @private */\r\n    this.boundHandleStyleImageChange_ = this.handleStyleImageChange_.bind(this);\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.renderedLayerRevision_;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../transform\").Transform}\r\n     */\r\n    this.renderedPixelToCoordinateTransform_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.renderedRotation_;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.renderedOpacity_ = 1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../transform.js\").Transform}\r\n     */\r\n    this.tmpTransform_ = createTransform();\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<ZIndexContext>}\r\n     */\r\n    this.tileClipContexts_ = null;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../VectorRenderTile.js\").default} tile Tile.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @param {number} x Left of the tile.\r\n   * @param {number} y Top of the tile.\r\n   * @param {number} w Width of the tile.\r\n   * @param {number} h Height of the tile.\r\n   * @param {number} gutter Tile gutter.\r\n   * @param {boolean} transition Apply an alpha transition.\r\n   * @override\r\n   */\r\n  drawTile(tile, frameState, x, y, w, h, gutter, transition) {\r\n    this.updateExecutorGroup_(\r\n      tile,\r\n      frameState.pixelRatio,\r\n      frameState.viewState.projection,\r\n    );\r\n    if (this.tileImageNeedsRender_(tile)) {\r\n      this.renderTileImage_(tile, frameState);\r\n    }\r\n    super.drawTile(tile, frameState, x, y, w, h, gutter, transition);\r\n  }\r\n\r\n  /**\r\n   * @param {number} z Tile coordinate z.\r\n   * @param {number} x Tile coordinate x.\r\n   * @param {number} y Tile coordinate y.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @return {import(\"../../Tile.js\").default|null} Tile (or null if outside source extent).\r\n   * @override\r\n   */\r\n  getTile(z, x, y, frameState) {\r\n    const tile = /** @type {import(\"../../VectorRenderTile.js\").default} */ (\r\n      this.getOrCreateTile(z, x, y, frameState)\r\n    );\r\n    if (!tile) {\r\n      return null;\r\n    }\r\n\r\n    const viewState = frameState.viewState;\r\n    const resolution = viewState.resolution;\r\n    const viewHints = frameState.viewHints;\r\n    const hifi = !(\r\n      viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]\r\n    );\r\n    if (hifi || !tile.wantedResolution) {\r\n      tile.wantedResolution = resolution;\r\n    }\r\n    return tile;\r\n  }\r\n\r\n  /**\r\n   * Determine whether render should be called.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @return {boolean} Layer is ready to be rendered.\r\n   * @override\r\n   */\r\n  prepareFrame(frameState) {\r\n    const layerRevision = this.getLayer().getRevision();\r\n    if (this.renderedLayerRevision_ !== layerRevision) {\r\n      this.renderedLayerRevision_ = layerRevision;\r\n      this.renderedTiles.length = 0;\r\n    }\r\n    return super.prepareFrame(frameState);\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../VectorRenderTile.js\").default} tile Tile.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"../../proj/Projection.js\").default} projection Projection.\r\n   * @private\r\n   */\r\n  updateExecutorGroup_(tile, pixelRatio, projection) {\r\n    const layer = /** @type {import(\"../../layer/VectorTile.js\").default} */ (\r\n      this.getLayer()\r\n    );\r\n    const revision = layer.getRevision();\r\n    const renderOrder = layer.getRenderOrder() || null;\r\n\r\n    const resolution = tile.wantedResolution;\r\n    const builderState = tile.getReplayState(layer);\r\n    if (\r\n      !builderState.dirty &&\r\n      builderState.renderedResolution === resolution &&\r\n      builderState.renderedRevision == revision &&\r\n      builderState.renderedRenderOrder == renderOrder\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    const source = layer.getSource();\r\n    const declutter = !!layer.getDeclutter();\r\n    const sourceTileGrid = source.getTileGrid();\r\n    const tileGrid = source.getTileGridForProjection(projection);\r\n    const tileExtent = tileGrid.getTileCoordExtent(tile.wrappedTileCoord);\r\n\r\n    const sourceTiles = source.getSourceTiles(pixelRatio, projection, tile);\r\n    const layerUid = getUid(layer);\r\n    delete tile.hitDetectionImageData[layerUid];\r\n    tile.executorGroups[layerUid] = [];\r\n    builderState.dirty = false;\r\n    for (let t = 0, tt = sourceTiles.length; t < tt; ++t) {\r\n      const sourceTile = sourceTiles[t];\r\n      if (sourceTile.getState() != TileState.LOADED) {\r\n        continue;\r\n      }\r\n      const sourceTileCoord = sourceTile.tileCoord;\r\n      const sourceTileExtent =\r\n        sourceTileGrid.getTileCoordExtent(sourceTileCoord);\r\n      const sharedExtent = getIntersection(tileExtent, sourceTileExtent);\r\n      const builderExtent = buffer(\r\n        sharedExtent,\r\n        layer.getRenderBuffer() * resolution,\r\n        this.tempExtent,\r\n      );\r\n      const bufferedExtent = equals(sourceTileExtent, sharedExtent)\r\n        ? null\r\n        : builderExtent;\r\n      const builderGroup = new CanvasBuilderGroup(\r\n        0,\r\n        sharedExtent,\r\n        resolution,\r\n        pixelRatio,\r\n      );\r\n      const squaredTolerance = getSquaredRenderTolerance(\r\n        resolution,\r\n        pixelRatio,\r\n      );\r\n\r\n      /**\r\n       * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n       * @param {number} [index] Render order index.\r\n       * @this {CanvasVectorTileLayerRenderer}\r\n       */\r\n      const render = function (feature, index) {\r\n        let styles;\r\n        const styleFunction =\r\n          feature.getStyleFunction() || layer.getStyleFunction();\r\n        if (styleFunction) {\r\n          styles = styleFunction(feature, resolution);\r\n        }\r\n        if (styles) {\r\n          const dirty = this.renderFeature(\r\n            feature,\r\n            squaredTolerance,\r\n            styles,\r\n            builderGroup,\r\n            declutter,\r\n            index,\r\n          );\r\n          builderState.dirty = builderState.dirty || dirty;\r\n        }\r\n      };\r\n\r\n      const features = sourceTile.getFeatures();\r\n      if (renderOrder && renderOrder !== builderState.renderedRenderOrder) {\r\n        features.sort(renderOrder);\r\n      }\r\n      for (let i = 0, ii = features.length; i < ii; ++i) {\r\n        const feature = features[i];\r\n        if (\r\n          !bufferedExtent ||\r\n          intersects(bufferedExtent, feature.getGeometry().getExtent())\r\n        ) {\r\n          render.call(this, feature, i);\r\n        }\r\n      }\r\n      const executorGroupInstructions = builderGroup.finish();\r\n      // no need to clip when the render tile is covered by a single source tile\r\n      const replayExtent =\r\n        layer.getRenderMode() !== 'vector' &&\r\n        declutter &&\r\n        sourceTiles.length === 1\r\n          ? null\r\n          : sharedExtent;\r\n      const renderingReplayGroup = new CanvasExecutorGroup(\r\n        replayExtent,\r\n        resolution,\r\n        pixelRatio,\r\n        source.getOverlaps(),\r\n        executorGroupInstructions,\r\n        layer.getRenderBuffer(),\r\n        true,\r\n      );\r\n      tile.executorGroups[layerUid].push(renderingReplayGroup);\r\n    }\r\n    builderState.renderedRevision = revision;\r\n    builderState.renderedRenderOrder = renderOrder;\r\n    builderState.renderedResolution = resolution;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @param {number} hitTolerance Hit tolerance in pixels.\r\n   * @param {import(\"../vector.js\").FeatureCallback<T>} callback Feature callback.\r\n   * @param {Array<import(\"../Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\r\n   * @return {T|undefined} Callback result.\r\n   * @template T\r\n   * @override\r\n   */\r\n  forEachFeatureAtCoordinate(\r\n    coordinate,\r\n    frameState,\r\n    hitTolerance,\r\n    callback,\r\n    matches,\r\n  ) {\r\n    const resolution = frameState.viewState.resolution;\r\n    const rotation = frameState.viewState.rotation;\r\n    hitTolerance = hitTolerance == undefined ? 0 : hitTolerance;\r\n    const layer = this.getLayer();\r\n    const source = layer.getSource();\r\n    const tileGrid = source.getTileGridForProjection(\r\n      frameState.viewState.projection,\r\n    );\r\n\r\n    const hitExtent = boundingExtent([coordinate]);\r\n    buffer(hitExtent, resolution * hitTolerance, hitExtent);\r\n\r\n    /** @type {!Object<string, import(\"../Map.js\").HitMatch<T>|true>} */\r\n    const features = {};\r\n\r\n    /**\r\n     * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n     * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\r\n     * @param {number} distanceSq The squared distance to the click position.\r\n     * @return {T|undefined} Callback result.\r\n     */\r\n    const featureCallback = function (feature, geometry, distanceSq) {\r\n      let key = feature.getId();\r\n      if (key === undefined) {\r\n        key = getUid(feature);\r\n      }\r\n      const match = features[key];\r\n      if (!match) {\r\n        if (distanceSq === 0) {\r\n          features[key] = true;\r\n          return callback(feature, layer, geometry);\r\n        }\r\n        matches.push(\r\n          (features[key] = {\r\n            feature: feature,\r\n            layer: layer,\r\n            geometry: geometry,\r\n            distanceSq: distanceSq,\r\n            callback: callback,\r\n          }),\r\n        );\r\n      } else if (match !== true && distanceSq < match.distanceSq) {\r\n        if (distanceSq === 0) {\r\n          features[key] = true;\r\n          matches.splice(matches.lastIndexOf(match), 1);\r\n          return callback(feature, layer, geometry);\r\n        }\r\n        match.geometry = geometry;\r\n        match.distanceSq = distanceSq;\r\n      }\r\n      return undefined;\r\n    };\r\n\r\n    const renderedTiles =\r\n      /** @type {Array<import(\"../../VectorRenderTile.js\").default>} */ (\r\n        this.renderedTiles\r\n      );\r\n    const layerUid = getUid(layer);\r\n    const declutter = layer.getDeclutter();\r\n    const declutteredFeatures = declutter\r\n      ? frameState.declutter?.[declutter]?.all().map((item) => item.value)\r\n      : null;\r\n    let found;\r\n    foundFeature: for (let i = 0, ii = renderedTiles.length; i < ii; ++i) {\r\n      const tile = renderedTiles[i];\r\n      const tileExtent = tileGrid.getTileCoordExtent(tile.wrappedTileCoord);\r\n      if (!intersects(tileExtent, hitExtent)) {\r\n        continue;\r\n      }\r\n\r\n      const executorGroups = tile.executorGroups[layerUid];\r\n      for (let t = 0, tt = executorGroups.length; t < tt; ++t) {\r\n        found = executorGroups[t].forEachFeatureAtCoordinate(\r\n          coordinate,\r\n          resolution,\r\n          rotation,\r\n          hitTolerance,\r\n          featureCallback,\r\n          declutteredFeatures,\r\n        );\r\n        if (found) {\r\n          break foundFeature;\r\n        }\r\n      }\r\n    }\r\n    return found;\r\n  }\r\n\r\n  /**\r\n   * Asynchronous layer level hit detection.\r\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\r\n   * @return {Promise<Array<import(\"../../Feature.js\").FeatureLike>>} Promise that resolves with an array of features.\r\n   * @override\r\n   */\r\n  getFeatures(pixel) {\r\n    if (this.renderedTiles.length === 0) {\r\n      return Promise.resolve([]);\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n      const layer = this.getLayer();\r\n      const source = layer.getSource();\r\n      const projection = this.renderedProjection;\r\n      const projectionExtent = projection.getExtent();\r\n      const resolution = this.renderedResolution;\r\n      const tileGrid = source.getTileGridForProjection(projection);\r\n      const coordinate = applyTransform(\r\n        this.renderedPixelToCoordinateTransform_,\r\n        pixel.slice(),\r\n      );\r\n      const tileCoordString = tileGrid\r\n        .getTileCoordForCoordAndResolution(coordinate, resolution)\r\n        .toString();\r\n      const tile =\r\n        /** @type {Array<import(\"../../VectorRenderTile.js\").default>} */ (\r\n          this.renderedTiles\r\n        ).find(\r\n          (tile) =>\r\n            tile.tileCoord.toString() === tileCoordString &&\r\n            tile.getState() === TileState.LOADED,\r\n        );\r\n      if (!tile || tile.loadingSourceTiles > 0) {\r\n        resolve([]);\r\n        return;\r\n      }\r\n      if (\r\n        source.getWrapX() &&\r\n        projection.canWrapX() &&\r\n        !containsExtent(\r\n          projectionExtent,\r\n          tileGrid.getTileCoordExtent(tile.tileCoord),\r\n        )\r\n      ) {\r\n        wrapX(coordinate, projection);\r\n      }\r\n      const layerUid = getUid(layer);\r\n      const extent = tileGrid.getTileCoordExtent(tile.wrappedTileCoord);\r\n      const corner = getTopLeft(extent);\r\n      const tilePixel = [\r\n        (coordinate[0] - corner[0]) / resolution,\r\n        (corner[1] - coordinate[1]) / resolution,\r\n      ];\r\n      const features = tile\r\n        .getSourceTiles()\r\n        .reduce(\r\n          (accumulator, sourceTile) =>\r\n            accumulator.concat(sourceTile.getFeatures()),\r\n          /** @type {Array<import(\"../../Feature.js\").FeatureLike>} */ ([]),\r\n        );\r\n      let hitDetectionImageData = tile.hitDetectionImageData[layerUid];\r\n      if (!hitDetectionImageData) {\r\n        const tileSize = toSize(\r\n          tileGrid.getTileSize(\r\n            tileGrid.getZForResolution(resolution, source.zDirection),\r\n          ),\r\n        );\r\n        const rotation = this.renderedRotation_;\r\n        const transforms = [\r\n          this.getRenderTransform(\r\n            tileGrid.getTileCoordCenter(tile.wrappedTileCoord),\r\n            resolution,\r\n            0,\r\n            HIT_DETECT_RESOLUTION,\r\n            tileSize[0] * HIT_DETECT_RESOLUTION,\r\n            tileSize[1] * HIT_DETECT_RESOLUTION,\r\n            0,\r\n          ),\r\n        ];\r\n        hitDetectionImageData = createHitDetectionImageData(\r\n          tileSize,\r\n          transforms,\r\n          features,\r\n          layer.getStyleFunction(),\r\n          tileGrid.getTileCoordExtent(tile.wrappedTileCoord),\r\n          tile.getReplayState(layer).renderedResolution,\r\n          rotation,\r\n        );\r\n        tile.hitDetectionImageData[layerUid] = hitDetectionImageData;\r\n      }\r\n      resolve(hitDetect(tilePixel, features, hitDetectionImageData));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../extent.js\").Extent} extent Extent.\r\n   * @return {Array<import('../../Feature.js').FeatureLike>} Features.\r\n   */\r\n  getFeaturesInExtent(extent) {\r\n    /** @type {Array<import('../../Feature.js').FeatureLike>} */\r\n    const features = [];\r\n    const tileCache = this.getTileCache();\r\n    if (tileCache.getCount() === 0) {\r\n      return features;\r\n    }\r\n    const source = this.getLayer().getSource();\r\n    const tileGrid = source.getTileGridForProjection(\r\n      this.frameState.viewState.projection,\r\n    );\r\n    const z = tileGrid.getZForResolution(this.renderedResolution);\r\n    /** @type {Object<string, true>} */\r\n    const visitedSourceTiles = {};\r\n    tileCache.forEach((tile) => {\r\n      if (tile.tileCoord[0] !== z || tile.getState() !== TileState.LOADED) {\r\n        return;\r\n      }\r\n      const sourceTiles = tile.getSourceTiles();\r\n      for (let i = 0, ii = sourceTiles.length; i < ii; ++i) {\r\n        const sourceTile = sourceTiles[i];\r\n        const key = sourceTile.getKey();\r\n        if (key in visitedSourceTiles) {\r\n          continue;\r\n        }\r\n        visitedSourceTiles[key] = true;\r\n        const tileCoord = sourceTile.tileCoord;\r\n        if (intersects(extent, tileGrid.getTileCoordExtent(tileCoord))) {\r\n          const tileFeatures = sourceTile.getFeatures();\r\n          if (tileFeatures) {\r\n            for (let j = 0, jj = tileFeatures.length; j < jj; ++j) {\r\n              const candidate = tileFeatures[j];\r\n              const geometry = candidate.getGeometry();\r\n              if (intersects(extent, geometry.getExtent())) {\r\n                features.push(candidate);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n    return features;\r\n  }\r\n\r\n  /**\r\n   * Perform action necessary to get the layer rendered after new fonts have loaded\r\n   * @override\r\n   */\r\n  handleFontsChanged() {\r\n    const layer = this.getLayer();\r\n    if (layer.getVisible() && this.renderedLayerRevision_ !== undefined) {\r\n      layer.changed();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle changes in image style state.\r\n   * @param {import(\"../../events/Event.js\").default} event Image style change event.\r\n   * @private\r\n   */\r\n  handleStyleImageChange_(event) {\r\n    this.renderIfReadyAndVisible();\r\n  }\r\n\r\n  /**\r\n   * Render declutter items for this layer\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @param {import(\"../../layer/Layer.js\").State} layerState Layer state.\r\n   */\r\n  renderDeclutter(frameState, layerState) {\r\n    const context = this.context;\r\n    const alpha = context.globalAlpha;\r\n    context.globalAlpha = layerState.opacity;\r\n    const viewHints = frameState.viewHints;\r\n    const hifi = !(\r\n      viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]\r\n    );\r\n    const scaledCanvasSize = [\r\n      this.context.canvas.width,\r\n      this.context.canvas.height,\r\n    ];\r\n    const declutter = this.getLayer().getDeclutter();\r\n    const declutterTree = declutter\r\n      ? frameState.declutter?.[declutter]\r\n      : undefined;\r\n    const layerUid = getUid(this.getLayer());\r\n    const tiles =\r\n      /** @type {Array<import(\"../../VectorRenderTile.js\").default>} */ (\r\n        this.renderedTiles\r\n      );\r\n    for (let i = 0, ii = tiles.length; i < ii; ++i) {\r\n      const tile = tiles[i];\r\n      const executorGroups = tile.executorGroups[layerUid];\r\n      if (executorGroups) {\r\n        for (let j = executorGroups.length - 1; j >= 0; --j) {\r\n          executorGroups[j].execute(\r\n            this.context,\r\n            scaledCanvasSize,\r\n            this.getTileRenderTransform(tile, frameState),\r\n            frameState.viewState.rotation,\r\n            hifi,\r\n            DECLUTTER,\r\n            declutterTree,\r\n          );\r\n        }\r\n      }\r\n    }\r\n    context.globalAlpha = alpha;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @override\r\n   */\r\n  renderDeferredInternal(frameState) {\r\n    const tiles =\r\n      /** @type {Array<import(\"../../VectorRenderTile.js\").default>} */ (\r\n        this.renderedTiles\r\n      );\r\n    const layerUid = getUid(this.getLayer());\r\n    const executorGroups = tiles.reduce((acc, tile, index) => {\r\n      tile.executorGroups[layerUid].forEach((executorGroup) =>\r\n        acc.push({\r\n          executorGroup,\r\n          index,\r\n        }),\r\n      );\r\n      return acc;\r\n    }, /** @type {Array<{executorGroup: CanvasExecutorGroup, index: number}>} */ ([]));\r\n\r\n    const executorGroupZIndexContexts = executorGroups.map(({executorGroup}) =>\r\n      executorGroup.getDeferredZIndexContexts(),\r\n    );\r\n    /** @type {Object<number, true>} */\r\n    const usedZIndices = {};\r\n    for (let i = 0, ii = executorGroups.length; i < ii; ++i) {\r\n      const executorGroupZindexContext =\r\n        executorGroups[i].executorGroup.getDeferredZIndexContexts();\r\n      for (const key in executorGroupZindexContext) {\r\n        usedZIndices[key] = true;\r\n      }\r\n    }\r\n    const zIndexKeys = Object.keys(usedZIndices).map(Number).sort(ascending);\r\n    zIndexKeys.forEach((zIndex) => {\r\n      executorGroupZIndexContexts.forEach((zIndexContexts, i) => {\r\n        if (!zIndexContexts[zIndex]) {\r\n          return;\r\n        }\r\n        zIndexContexts[zIndex].forEach((zIndexContext) => {\r\n          const {executorGroup, index} = executorGroups[i];\r\n          const context = executorGroup.getRenderedContext();\r\n          const alpha = context.globalAlpha;\r\n          context.globalAlpha = this.renderedOpacity_;\r\n          const tileClipContext = this.tileClipContexts_[index];\r\n          if (tileClipContext) {\r\n            tileClipContext.draw(context);\r\n          }\r\n          zIndexContext.draw(context);\r\n          if (tileClipContext) {\r\n            context.restore();\r\n          }\r\n          context.globalAlpha = alpha;\r\n          zIndexContext.clear();\r\n        });\r\n        zIndexContexts[zIndex].length = 0;\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../VectorRenderTile.js\").default} tile The tile\r\n   * @param {import('../../Map.js').FrameState} frameState Current frame state\r\n   * @return {import('../../transform.js').Transform} Transform to use to render this tile\r\n   */\r\n  getTileRenderTransform(tile, frameState) {\r\n    const pixelRatio = frameState.pixelRatio;\r\n    const viewState = frameState.viewState;\r\n    const center = viewState.center;\r\n    const resolution = viewState.resolution;\r\n    const rotation = viewState.rotation;\r\n    const size = frameState.size;\r\n    const width = Math.round(size[0] * pixelRatio);\r\n    const height = Math.round(size[1] * pixelRatio);\r\n\r\n    const source = this.getLayer().getSource();\r\n    const tileGrid = source.getTileGridForProjection(\r\n      frameState.viewState.projection,\r\n    );\r\n    const tileCoord = tile.tileCoord;\r\n    const tileExtent = tileGrid.getTileCoordExtent(tile.wrappedTileCoord);\r\n    const worldOffset =\r\n      tileGrid.getTileCoordExtent(tileCoord, this.tempExtent)[0] -\r\n      tileExtent[0];\r\n    const transform = multiply(\r\n      scale(this.inversePixelTransform.slice(), 1 / pixelRatio, 1 / pixelRatio),\r\n      this.getRenderTransform(\r\n        center,\r\n        resolution,\r\n        rotation,\r\n        pixelRatio,\r\n        width,\r\n        height,\r\n        worldOffset,\r\n      ),\r\n    );\r\n    return transform;\r\n  }\r\n\r\n  /**\r\n   * Render the vectors for this layer.\r\n   * @param {CanvasRenderingContext2D} context Target context.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @override\r\n   */\r\n  postRender(context, frameState) {\r\n    const viewHints = frameState.viewHints;\r\n    const hifi = !(\r\n      viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]\r\n    );\r\n\r\n    this.renderedPixelToCoordinateTransform_ =\r\n      frameState.pixelToCoordinateTransform.slice();\r\n    this.renderedRotation_ = frameState.viewState.rotation;\r\n    this.renderedOpacity_ =\r\n      frameState.layerStatesArray[frameState.layerIndex].opacity;\r\n\r\n    const layer = /** @type {import(\"../../layer/VectorTile.js\").default} */ (\r\n      this.getLayer()\r\n    );\r\n    const renderMode = layer.getRenderMode();\r\n    const alpha = context.globalAlpha;\r\n    context.globalAlpha = this.renderedOpacity_;\r\n    const declutter = layer.getDeclutter();\r\n    const replayTypes = declutter\r\n      ? VECTOR_REPLAYS[renderMode].filter((type) => !DECLUTTER.includes(type))\r\n      : VECTOR_REPLAYS[renderMode];\r\n    const viewState = frameState.viewState;\r\n    const rotation = viewState.rotation;\r\n    const tileSource = layer.getSource();\r\n    const tileGrid = tileSource.getTileGridForProjection(viewState.projection);\r\n    const z = tileGrid.getZForResolution(\r\n      viewState.resolution,\r\n      tileSource.zDirection,\r\n    );\r\n\r\n    const tiles =\r\n      /** @type {Array<import(\"../../VectorRenderTile.js\").default>} */ (\r\n        this.renderedTiles\r\n      );\r\n    const clips = [];\r\n    const clipZs = [];\r\n    const tileClipContexts = [];\r\n    const layerUid = getUid(layer);\r\n    let ready = true;\r\n    for (let i = tiles.length - 1; i >= 0; --i) {\r\n      const tile = tiles[i];\r\n      ready = ready && !tile.getReplayState(layer).dirty;\r\n      const executorGroups = tile.executorGroups[layerUid].filter((group) =>\r\n        group.hasExecutors(replayTypes),\r\n      );\r\n      if (executorGroups.length === 0) {\r\n        continue;\r\n      }\r\n      const transform = this.getTileRenderTransform(tile, frameState);\r\n      const currentZ = tile.tileCoord[0];\r\n      let contextSaved = false;\r\n      // Clip mask for regions in this tile that already filled by a higher z tile\r\n      const currentClip = executorGroups[0].getClipCoords(transform);\r\n      let clipContext = context;\r\n      let tileClipContext;\r\n      if (currentClip) {\r\n        tileClipContext = new ZIndexContext();\r\n        clipContext = tileClipContext.getContext();\r\n        for (let j = 0, jj = clips.length; j < jj; ++j) {\r\n          if (z !== currentZ && currentZ < clipZs[j]) {\r\n            const clip = clips[j];\r\n            if (\r\n              intersects(\r\n                [\r\n                  currentClip[0],\r\n                  currentClip[3],\r\n                  currentClip[4],\r\n                  currentClip[7],\r\n                ],\r\n                [clip[0], clip[3], clip[4], clip[7]],\r\n              )\r\n            ) {\r\n              if (!contextSaved) {\r\n                clipContext.save();\r\n                contextSaved = true;\r\n              }\r\n              clipContext.beginPath();\r\n              // counter-clockwise (outer ring) for current tile\r\n              clipContext.moveTo(currentClip[0], currentClip[1]);\r\n              clipContext.lineTo(currentClip[2], currentClip[3]);\r\n              clipContext.lineTo(currentClip[4], currentClip[5]);\r\n              clipContext.lineTo(currentClip[6], currentClip[7]);\r\n              // clockwise (inner ring) for higher z tile\r\n              clipContext.moveTo(clip[6], clip[7]);\r\n              clipContext.lineTo(clip[4], clip[5]);\r\n              clipContext.lineTo(clip[2], clip[3]);\r\n              clipContext.lineTo(clip[0], clip[1]);\r\n              clipContext.clip();\r\n            }\r\n          }\r\n        }\r\n        clips.push(currentClip);\r\n        clipZs.push(currentZ);\r\n      }\r\n      for (let t = 0, tt = executorGroups.length; t < tt; ++t) {\r\n        const executorGroup = executorGroups[t];\r\n        executorGroup.execute(\r\n          context,\r\n          [context.canvas.width, context.canvas.height],\r\n          transform,\r\n          rotation,\r\n          hifi,\r\n          replayTypes,\r\n          frameState.declutter?.[declutter],\r\n        );\r\n      }\r\n      if (contextSaved) {\r\n        if (clipContext === context) {\r\n          clipContext.restore();\r\n        } else {\r\n          tileClipContexts[i] = tileClipContext;\r\n        }\r\n      }\r\n    }\r\n    context.globalAlpha = alpha;\r\n    this.ready = ready;\r\n    this.tileClipContexts_ = tileClipContexts;\r\n    if (!frameState.declutter) {\r\n      this.renderDeferredInternal(frameState);\r\n    }\r\n\r\n    super.postRender(context, frameState);\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @param {import(\"../../style/Style.js\").default|Array<import(\"../../style/Style.js\").default>} styles The style or array of styles.\r\n   * @param {import(\"../../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\r\n   * @param {boolean} [declutter] Enable decluttering.\r\n   * @param {number} [index] Render order index.\r\n   * @return {boolean} `true` if an image is loading.\r\n   */\r\n  renderFeature(\r\n    feature,\r\n    squaredTolerance,\r\n    styles,\r\n    builderGroup,\r\n    declutter,\r\n    index,\r\n  ) {\r\n    if (!styles) {\r\n      return false;\r\n    }\r\n    let loading = false;\r\n    if (Array.isArray(styles)) {\r\n      for (let i = 0, ii = styles.length; i < ii; ++i) {\r\n        loading =\r\n          renderFeature(\r\n            builderGroup,\r\n            feature,\r\n            styles[i],\r\n            squaredTolerance,\r\n            this.boundHandleStyleImageChange_,\r\n            undefined,\r\n            declutter,\r\n            index,\r\n          ) || loading;\r\n      }\r\n    } else {\r\n      loading = renderFeature(\r\n        builderGroup,\r\n        feature,\r\n        styles,\r\n        squaredTolerance,\r\n        this.boundHandleStyleImageChange_,\r\n        undefined,\r\n        declutter,\r\n        index,\r\n      );\r\n    }\r\n    return loading;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../VectorRenderTile.js\").default} tile Tile.\r\n   * @return {boolean} A new tile image was rendered.\r\n   * @private\r\n   */\r\n  tileImageNeedsRender_(tile) {\r\n    const layer = /** @type {import(\"../../layer/VectorTile.js\").default} */ (\r\n      this.getLayer()\r\n    );\r\n    if (layer.getRenderMode() === 'vector') {\r\n      return false;\r\n    }\r\n    const replayState = tile.getReplayState(layer);\r\n    const revision = layer.getRevision();\r\n    const resolution = tile.wantedResolution;\r\n    return (\r\n      replayState.renderedTileResolution !== resolution ||\r\n      replayState.renderedTileRevision !== revision\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../VectorRenderTile.js\").default} tile Tile.\r\n   * @param {import(\"../../Map\").FrameState} frameState Frame state.\r\n   * @private\r\n   */\r\n  renderTileImage_(tile, frameState) {\r\n    const layer = /** @type {import(\"../../layer/VectorTile.js\").default} */ (\r\n      this.getLayer()\r\n    );\r\n    const replayState = tile.getReplayState(layer);\r\n    const revision = layer.getRevision();\r\n    const executorGroups = tile.executorGroups[getUid(layer)];\r\n    replayState.renderedTileRevision = revision;\r\n\r\n    const tileCoord = tile.wrappedTileCoord;\r\n    const z = tileCoord[0];\r\n    const source = layer.getSource();\r\n    let pixelRatio = frameState.pixelRatio;\r\n    const viewState = frameState.viewState;\r\n    const projection = viewState.projection;\r\n    const tileGrid = source.getTileGridForProjection(projection);\r\n    const tileResolution = tileGrid.getResolution(tile.tileCoord[0]);\r\n    const renderPixelRatio =\r\n      (frameState.pixelRatio / tile.wantedResolution) * tileResolution;\r\n    const resolution = tileGrid.getResolution(z);\r\n    const context = tile.getContext();\r\n\r\n    // Increase tile size when overzooming for low pixel ratio, to avoid blurry tiles\r\n    pixelRatio = Math.round(\r\n      Math.max(pixelRatio, renderPixelRatio / pixelRatio),\r\n    );\r\n    const size = source.getTilePixelSize(z, pixelRatio, projection);\r\n    context.canvas.width = size[0];\r\n    context.canvas.height = size[1];\r\n    const renderScale = pixelRatio / renderPixelRatio;\r\n    if (renderScale !== 1) {\r\n      const canvasTransform = resetTransform(this.tmpTransform_);\r\n      scaleTransform(canvasTransform, renderScale, renderScale);\r\n      context.setTransform.apply(context, canvasTransform);\r\n    }\r\n    const tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tempExtent);\r\n    const pixelScale = renderPixelRatio / resolution;\r\n    const transform = resetTransform(this.tmpTransform_);\r\n    scaleTransform(transform, pixelScale, -pixelScale);\r\n    translateTransform(transform, -tileExtent[0], -tileExtent[3]);\r\n    for (let i = 0, ii = executorGroups.length; i < ii; ++i) {\r\n      const executorGroup = executorGroups[i];\r\n      executorGroup.execute(\r\n        context,\r\n        [\r\n          context.canvas.width * renderScale,\r\n          context.canvas.height * renderScale,\r\n        ],\r\n        transform,\r\n        0,\r\n        true,\r\n        IMAGE_REPLAYS[layer.getRenderMode()],\r\n        null,\r\n      );\r\n    }\r\n    replayState.renderedTileResolution = tile.wantedResolution;\r\n  }\r\n}\r\n\r\nexport default CanvasVectorTileLayerRenderer;\r\n", "/**\r\n * Utilities for parsing literal style objects\r\n * @module ol/webgl/styleparser\r\n */\r\nimport {assert} from '../asserts.js';\r\nimport {asArray} from '../color.js';\r\nimport {\r\n  BooleanType,\r\n  ColorType,\r\n  NumberArrayType,\r\n  NumberType,\r\n  SizeType,\r\n  StringType,\r\n  computeGeometryType,\r\n  newParsingContext,\r\n} from '../expr/expression.js';\r\nimport {\r\n  FEATURE_ID_PROPERTY_NAME,\r\n  GEOMETRY_TYPE_PROPERTY_NAME,\r\n  buildExpression,\r\n  getStringNumberEquivalent,\r\n  newCompilationContext,\r\n  stringToGlsl,\r\n  uniformNameForVariable,\r\n} from '../expr/gpu.js';\r\nimport {ShaderBuilder} from './ShaderBuilder.js';\r\n\r\n/**\r\n * Recursively parses a style expression and outputs a GLSL-compatible string. Takes in a compilation context that\r\n * will be read and modified during the parsing operation.\r\n * @param {import(\"../expr/gpu.js\").CompilationContext} compilationContext Compilation context\r\n * @param {import(\"../expr/expression.js\").EncodedExpression} value Value\r\n * @param {number} [expectedType] Expected final type (can be several types combined)\r\n * @return {string} GLSL-compatible output\r\n */\r\nexport function expressionToGlsl(compilationContext, value, expectedType) {\r\n  const parsingContext = newParsingContext();\r\n  return buildExpression(\r\n    value,\r\n    expectedType,\r\n    parsingContext,\r\n    compilationContext,\r\n  );\r\n}\r\n\r\n/**\r\n * Packs all components of a color into a two-floats array\r\n * @param {import(\"../color.js\").Color|string} color Color as array of numbers or string\r\n * @return {Array<number>} Vec2 array containing the color in compressed form\r\n */\r\nexport function packColor(color) {\r\n  const array = asArray(color);\r\n  const r = array[0] * 256;\r\n  const g = array[1];\r\n  const b = array[2] * 256;\r\n  const a = Math.round(array[3] * 255);\r\n  return [r + g, b + a];\r\n}\r\n\r\nconst UNPACK_COLOR_FN = `vec4 unpackColor(vec2 packedColor) {\r\n  return vec4(\r\n    fract(floor(packedColor[0] / 256.0) / 256.0),\r\n    fract(packedColor[0] / 256.0),\r\n    fract(floor(packedColor[1] / 256.0) / 256.0),\r\n    fract(packedColor[1] / 256.0)\r\n  );\r\n}`;\r\n\r\n/**\r\n * @param {number} type Value type\r\n * @return {1|2|3|4} The amount of components for this value\r\n */\r\nfunction getGlslSizeFromType(type) {\r\n  if (type === ColorType || type === SizeType) {\r\n    return 2;\r\n  }\r\n  if (type === NumberArrayType) {\r\n    return 4;\r\n  }\r\n  return 1;\r\n}\r\n\r\n/**\r\n * @param {number} type Value type\r\n * @return {'float'|'vec2'|'vec3'|'vec4'} The corresponding GLSL type for this value\r\n */\r\nfunction getGlslTypeFromType(type) {\r\n  const size = getGlslSizeFromType(type);\r\n  if (size > 1) {\r\n    return /** @type {'vec2'|'vec3'|'vec4'} */ (`vec${size}`);\r\n  }\r\n  return 'float';\r\n}\r\n\r\n/**\r\n * see https://stackoverflow.com/questions/7616461/generate-a-hash-from-string-in-javascript\r\n * @param {Object|string} input The hash input, either an object or string\r\n * @return {string} Hash (if the object cannot be serialized, it is based on `getUid`)\r\n */\r\nexport function computeHash(input) {\r\n  const hash = JSON.stringify(input)\r\n    .split('')\r\n    .reduce((prev, curr) => (prev << 5) - prev + curr.charCodeAt(0), 0);\r\n  return (hash >>> 0).toString();\r\n}\r\n\r\n/**\r\n * @param {import(\"../style/flat.js\").FlatStyle} style Style\r\n * @param {ShaderBuilder} builder Shader builder\r\n * @param {import(\"../expr/gpu.js\").CompilationContext} vertContext Vertex shader compilation context\r\n * @param {'shape-'|'circle-'|'icon-'} prefix Properties prefix\r\n */\r\nfunction parseCommonSymbolProperties(style, builder, vertContext, prefix) {\r\n  if (`${prefix}radius` in style && prefix !== 'icon-') {\r\n    let radius = expressionToGlsl(\r\n      vertContext,\r\n      style[`${prefix}radius`],\r\n      NumberType,\r\n    );\r\n    if (`${prefix}radius2` in style) {\r\n      const radius2 = expressionToGlsl(\r\n        vertContext,\r\n        style[`${prefix}radius2`],\r\n        NumberType,\r\n      );\r\n      radius = `max(${radius}, ${radius2})`;\r\n    }\r\n    if (`${prefix}stroke-width` in style) {\r\n      radius = `(${radius} + ${expressionToGlsl(\r\n        vertContext,\r\n        style[`${prefix}stroke-width`],\r\n        NumberType,\r\n      )} * 0.5)`;\r\n    }\r\n    builder.setSymbolSizeExpression(`vec2(${radius} * 2. + 0.5)`); // adding some padding for antialiasing\r\n  }\r\n  if (`${prefix}scale` in style) {\r\n    const scale = expressionToGlsl(\r\n      vertContext,\r\n      style[`${prefix}scale`],\r\n      SizeType,\r\n    );\r\n    builder.setSymbolSizeExpression(\r\n      `${builder.getSymbolSizeExpression()} * ${scale}`,\r\n    );\r\n  }\r\n  if (`${prefix}displacement` in style) {\r\n    builder.setSymbolOffsetExpression(\r\n      expressionToGlsl(\r\n        vertContext,\r\n        style[`${prefix}displacement`],\r\n        NumberArrayType,\r\n      ),\r\n    );\r\n  }\r\n  if (`${prefix}rotation` in style) {\r\n    builder.setSymbolRotationExpression(\r\n      expressionToGlsl(vertContext, style[`${prefix}rotation`], NumberType),\r\n    );\r\n  }\r\n  if (`${prefix}rotate-with-view` in style) {\r\n    builder.setSymbolRotateWithView(!!style[`${prefix}rotate-with-view`]);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {string} distanceField The distance field expression\r\n * @param {string|null} fillColor The fill color expression; null if no fill\r\n * @param {string|null} strokeColor The stroke color expression; null if no stroke\r\n * @param {string|null} strokeWidth The stroke width expression; null if no stroke\r\n * @param {string|null} opacity The opacity expression; null if no stroke\r\n * @return {string} The final color expression, based on the distance field and given params\r\n */\r\nfunction getColorFromDistanceField(\r\n  distanceField,\r\n  fillColor,\r\n  strokeColor,\r\n  strokeWidth,\r\n  opacity,\r\n) {\r\n  let color = 'vec4(0.)';\r\n  if (fillColor !== null) {\r\n    color = fillColor;\r\n  }\r\n  if (strokeColor !== null && strokeWidth !== null) {\r\n    const strokeFillRatio = `smoothstep(-${strokeWidth} + 0.63, -${strokeWidth} - 0.58, ${distanceField})`;\r\n    color = `mix(${strokeColor}, ${color}, ${strokeFillRatio})`;\r\n  }\r\n  const shapeOpacity = `(1.0 - smoothstep(-0.63, 0.58, ${distanceField}))`;\r\n  let result = `${color} * vec4(1.0, 1.0, 1.0, ${shapeOpacity})`;\r\n  if (opacity !== null) {\r\n    result = `${result} * vec4(1.0, 1.0, 1.0, ${opacity})`;\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * This will parse an image property provided by `<prefix>-src`\r\n * The image size expression in GLSL will be returned\r\n * @param {import(\"../style/flat.js\").FlatStyle} style Style\r\n * @param {ShaderBuilder} builder Shader builder\r\n * @param {Object<string,import(\"../webgl/Helper\").UniformValue>} uniforms Uniforms\r\n * @param {'icon-'|'fill-pattern-'|'stroke-pattern-'} prefix Property prefix\r\n * @param {string} textureId A identifier that will be used in the generated uniforms: `sample2d u_texture<id>` and `vec2 u_texture<id>_size`\r\n * @return {string} The image size expression\r\n */\r\nfunction parseImageProperties(style, builder, uniforms, prefix, textureId) {\r\n  const image = new Image();\r\n  image.crossOrigin =\r\n    style[`${prefix}cross-origin`] === undefined\r\n      ? 'anonymous'\r\n      : style[`${prefix}cross-origin`];\r\n  assert(\r\n    typeof style[`${prefix}src`] === 'string',\r\n    `WebGL layers do not support expressions for the ${prefix}src style property`,\r\n  );\r\n  image.src = /** @type {string} */ (style[`${prefix}src`]);\r\n\r\n  // the size is provided asynchronously using a uniform\r\n  uniforms[`u_texture${textureId}_size`] = () => {\r\n    return image.complete ? [image.width, image.height] : [0, 0];\r\n  };\r\n  builder.addUniform(`vec2 u_texture${textureId}_size`);\r\n  const size = `u_texture${textureId}_size`;\r\n\r\n  uniforms[`u_texture${textureId}`] = image;\r\n  builder.addUniform(`sampler2D u_texture${textureId}`);\r\n  return size;\r\n}\r\n\r\n/**\r\n * This will parse an image's offset properties provided by `<prefix>-offset`, `<prefix>-offset-origin` and `<prefix>-size`\r\n * @param {import(\"../style/flat.js\").FlatStyle} style Style\r\n * @param {'icon-'|'fill-pattern-'|'stroke-pattern-'} prefix Property prefix\r\n * @param {import(\"../expr/gpu.js\").CompilationContext} context Shader compilation context (vertex or fragment)\r\n * @param {string} imageSize Pixel size of the full image as a GLSL expression\r\n * @param {string} sampleSize Pixel size of the sample in the image as a GLSL expression\r\n * @return {string} The offset expression\r\n */\r\nfunction parseImageOffsetProperties(\r\n  style,\r\n  prefix,\r\n  context,\r\n  imageSize,\r\n  sampleSize,\r\n) {\r\n  let offsetExpression = expressionToGlsl(\r\n    context,\r\n    style[`${prefix}offset`],\r\n    NumberArrayType,\r\n  );\r\n  if (`${prefix}offset-origin` in style) {\r\n    switch (style[`${prefix}offset-origin`]) {\r\n      case 'top-right':\r\n        offsetExpression = `vec2(${imageSize}.x, 0.) + ${sampleSize} * vec2(-1., 0.) + ${offsetExpression} * vec2(-1., 1.)`;\r\n        break;\r\n      case 'bottom-left':\r\n        offsetExpression = `vec2(0., ${imageSize}.y) + ${sampleSize} * vec2(0., -1.) + ${offsetExpression} * vec2(1., -1.)`;\r\n        break;\r\n      case 'bottom-right':\r\n        offsetExpression = `${imageSize} - ${sampleSize} - ${offsetExpression}`;\r\n        break;\r\n      default: // pass\r\n    }\r\n  }\r\n  return offsetExpression;\r\n}\r\n\r\n/**\r\n * @param {import(\"../style/flat.js\").FlatStyle} style Style\r\n * @param {ShaderBuilder} builder Shader builder\r\n * @param {Object<string,import(\"../webgl/Helper\").UniformValue>} uniforms Uniforms\r\n * @param {import(\"../expr/gpu.js\").CompilationContext} vertContext Vertex shader compilation context\r\n * @param {import(\"../expr/gpu.js\").CompilationContext} fragContext Fragment shader compilation context\r\n */\r\nfunction parseCircleProperties(\r\n  style,\r\n  builder,\r\n  uniforms,\r\n  vertContext,\r\n  fragContext,\r\n) {\r\n  // this function takes in screen coordinates in pixels and returns the signed distance field\r\n  // (0 on the boundary, negative inside the circle, positive outside, values in pixels)\r\n  fragContext.functions['circleDistanceField'] =\r\n    `float circleDistanceField(vec2 point, float radius) {\r\n  return length(point) - radius;\r\n}`;\r\n\r\n  parseCommonSymbolProperties(style, builder, vertContext, 'circle-');\r\n\r\n  // OPACITY\r\n  let opacity = null;\r\n  if ('circle-opacity' in style) {\r\n    opacity = expressionToGlsl(\r\n      fragContext,\r\n      style['circle-opacity'],\r\n      NumberType,\r\n    );\r\n  }\r\n\r\n  // SCALE\r\n  let currentPoint = 'coordsPx';\r\n  if ('circle-scale' in style) {\r\n    const scale = expressionToGlsl(\r\n      fragContext,\r\n      style['circle-scale'],\r\n      SizeType,\r\n    );\r\n    currentPoint = `coordsPx / ${scale}`;\r\n  }\r\n\r\n  // FILL COLOR\r\n  let fillColor = null;\r\n  if ('circle-fill-color' in style) {\r\n    fillColor = expressionToGlsl(\r\n      fragContext,\r\n      style['circle-fill-color'],\r\n      ColorType,\r\n    );\r\n  }\r\n\r\n  // STROKE COLOR\r\n  let strokeColor = null;\r\n  if ('circle-stroke-color' in style) {\r\n    strokeColor = expressionToGlsl(\r\n      fragContext,\r\n      style['circle-stroke-color'],\r\n      ColorType,\r\n    );\r\n  }\r\n\r\n  // RADIUS\r\n  let radius = expressionToGlsl(\r\n    fragContext,\r\n    style['circle-radius'],\r\n    NumberType,\r\n  );\r\n\r\n  // STROKE WIDTH\r\n  let strokeWidth = null;\r\n  if ('circle-stroke-width' in style) {\r\n    strokeWidth = expressionToGlsl(\r\n      fragContext,\r\n      style['circle-stroke-width'],\r\n      NumberType,\r\n    );\r\n    radius = `(${radius} + ${strokeWidth} * 0.5)`;\r\n  }\r\n\r\n  // FINAL COLOR\r\n  const distanceField = `circleDistanceField(${currentPoint}, ${radius})`;\r\n  const colorExpression = getColorFromDistanceField(\r\n    distanceField,\r\n    fillColor,\r\n    strokeColor,\r\n    strokeWidth,\r\n    opacity,\r\n  );\r\n  builder.setSymbolColorExpression(colorExpression);\r\n}\r\n\r\n/**\r\n * @param {import(\"../style/flat.js\").FlatStyle} style Style\r\n * @param {ShaderBuilder} builder Shader builder\r\n * @param {Object<string,import(\"../webgl/Helper\").UniformValue>} uniforms Uniforms\r\n * @param {import(\"../expr/gpu.js\").CompilationContext} vertContext Vertex shader compilation context\r\n * @param {import(\"../expr/gpu.js\").CompilationContext} fragContext Fragment shader compilation context\r\n */\r\nfunction parseShapeProperties(\r\n  style,\r\n  builder,\r\n  uniforms,\r\n  vertContext,\r\n  fragContext,\r\n) {\r\n  fragContext.functions['round'] = `float round(float v) {\r\n  return sign(v) * floor(abs(v) + 0.5);\r\n}`;\r\n\r\n  // these functions take in screen coordinates in pixels and returns the signed distance field\r\n  // (0 on the boundary, negative inside the polygon, positive outside, values in pixels)\r\n  // inspired by https://github.com/zranger1/PixelblazePatterns/blob/master/Toolkit/sdf2d.md#n-sided-regular-polygon\r\n  fragContext.functions['starDistanceField'] =\r\n    `float starDistanceField(vec2 point, float numPoints, float radius, float radius2, float angle) {\r\n  float startAngle = -PI * 0.5 + angle; // tip starts upwards and rotates clockwise with angle\r\n  float c = cos(startAngle);\r\n  float s = sin(startAngle);\r\n  vec2 pointRotated = vec2(c * point.x - s * point.y, s * point.x + c * point.y);\r\n  float alpha = TWO_PI / numPoints; // the angle of one sector\r\n  float beta = atan(pointRotated.y, pointRotated.x);\r\n  float gamma = round(beta / alpha) * alpha; // angle in sector\r\n  c = cos(-gamma);\r\n  s = sin(-gamma);\r\n  vec2 inSector = vec2(c * pointRotated.x - s * pointRotated.y, abs(s * pointRotated.x + c * pointRotated.y));\r\n  vec2 tipToPoint = inSector + vec2(-radius, 0.);\r\n  vec2 edgeNormal = vec2(radius2 * sin(alpha * 0.5), -radius2 * cos(alpha * 0.5) + radius);\r\n  return dot(normalize(edgeNormal), tipToPoint);\r\n}`;\r\n  fragContext.functions['regularDistanceField'] =\r\n    `float regularDistanceField(vec2 point, float numPoints, float radius, float angle) {\r\n  float startAngle = -PI * 0.5 + angle; // tip starts upwards and rotates clockwise with angle\r\n  float c = cos(startAngle);\r\n  float s = sin(startAngle);\r\n  vec2 pointRotated = vec2(c * point.x - s * point.y, s * point.x + c * point.y);\r\n  float alpha = TWO_PI / numPoints; // the angle of one sector\r\n  float radiusIn = radius * cos(PI / numPoints);\r\n  float beta = atan(pointRotated.y, pointRotated.x);\r\n  float gamma = round((beta - alpha * 0.5) / alpha) * alpha + alpha * 0.5; // angle in sector from mid\r\n  c = cos(-gamma);\r\n  s = sin(-gamma);\r\n  vec2 inSector = vec2(c * pointRotated.x - s * pointRotated.y, abs(s * pointRotated.x + c * pointRotated.y));\r\n  return inSector.x - radiusIn;\r\n}`;\r\n\r\n  parseCommonSymbolProperties(style, builder, vertContext, 'shape-');\r\n\r\n  // OPACITY\r\n  let opacity = null;\r\n  if ('shape-opacity' in style) {\r\n    opacity = expressionToGlsl(fragContext, style['shape-opacity'], NumberType);\r\n  }\r\n\r\n  // SCALE\r\n  let currentPoint = 'coordsPx';\r\n  if ('shape-scale' in style) {\r\n    const scale = expressionToGlsl(fragContext, style['shape-scale'], SizeType);\r\n    currentPoint = `coordsPx / ${scale}`;\r\n  }\r\n\r\n  // FILL COLOR\r\n  let fillColor = null;\r\n  if ('shape-fill-color' in style) {\r\n    fillColor = expressionToGlsl(\r\n      fragContext,\r\n      style['shape-fill-color'],\r\n      ColorType,\r\n    );\r\n  }\r\n\r\n  // STROKE COLOR\r\n  let strokeColor = null;\r\n  if ('shape-stroke-color' in style) {\r\n    strokeColor = expressionToGlsl(\r\n      fragContext,\r\n      style['shape-stroke-color'],\r\n      ColorType,\r\n    );\r\n  }\r\n\r\n  // STROKE WIDTH\r\n  let strokeWidth = null;\r\n  if ('shape-stroke-width' in style) {\r\n    strokeWidth = expressionToGlsl(\r\n      fragContext,\r\n      style['shape-stroke-width'],\r\n      NumberType,\r\n    );\r\n  }\r\n\r\n  // SHAPE TYPE\r\n  const numPoints = expressionToGlsl(\r\n    fragContext,\r\n    style['shape-points'],\r\n    NumberType,\r\n  );\r\n  let angle = '0.';\r\n  if ('shape-angle' in style) {\r\n    angle = expressionToGlsl(fragContext, style['shape-angle'], NumberType);\r\n  }\r\n  let shapeField;\r\n  let radius = expressionToGlsl(fragContext, style['shape-radius'], NumberType);\r\n  if (strokeWidth !== null) {\r\n    radius = `${radius} + ${strokeWidth} * 0.5`;\r\n  }\r\n  if ('shape-radius2' in style) {\r\n    let radius2 = expressionToGlsl(\r\n      fragContext,\r\n      style['shape-radius2'],\r\n      NumberType,\r\n    );\r\n    if (strokeWidth !== null) {\r\n      radius2 = `${radius2} + ${strokeWidth} * 0.5`;\r\n    }\r\n    shapeField = `starDistanceField(${currentPoint}, ${numPoints}, ${radius}, ${radius2}, ${angle})`;\r\n  } else {\r\n    shapeField = `regularDistanceField(${currentPoint}, ${numPoints}, ${radius}, ${angle})`;\r\n  }\r\n\r\n  // FINAL COLOR\r\n  const colorExpression = getColorFromDistanceField(\r\n    shapeField,\r\n    fillColor,\r\n    strokeColor,\r\n    strokeWidth,\r\n    opacity,\r\n  );\r\n  builder.setSymbolColorExpression(colorExpression);\r\n}\r\n\r\n/**\r\n * @param {import(\"../style/flat.js\").FlatStyle} style Style\r\n * @param {ShaderBuilder} builder Shader builder\r\n * @param {Object<string,import(\"../webgl/Helper\").UniformValue>} uniforms Uniforms\r\n * @param {import(\"../expr/gpu.js\").CompilationContext} vertContext Vertex shader compilation context\r\n * @param {import(\"../expr/gpu.js\").CompilationContext} fragContext Fragment shader compilation context\r\n */\r\nfunction parseIconProperties(\r\n  style,\r\n  builder,\r\n  uniforms,\r\n  vertContext,\r\n  fragContext,\r\n) {\r\n  // COLOR\r\n  let color = 'vec4(1.0)';\r\n  if ('icon-color' in style) {\r\n    color = expressionToGlsl(fragContext, style['icon-color'], ColorType);\r\n  }\r\n\r\n  // OPACITY\r\n  if ('icon-opacity' in style) {\r\n    color = `${color} * vec4(1.0, 1.0, 1.0, ${expressionToGlsl(\r\n      fragContext,\r\n      style['icon-opacity'],\r\n      NumberType,\r\n    )})`;\r\n  }\r\n\r\n  // IMAGE & SIZE\r\n  const textureId = computeHash(style['icon-src']);\r\n  const sizeExpression = parseImageProperties(\r\n    style,\r\n    builder,\r\n    uniforms,\r\n    'icon-',\r\n    textureId,\r\n  );\r\n  builder\r\n    .setSymbolColorExpression(\r\n      `${color} * texture2D(u_texture${textureId}, v_texCoord)`,\r\n    )\r\n    .setSymbolSizeExpression(sizeExpression);\r\n\r\n  // override size if width/height were specified\r\n  if ('icon-width' in style && 'icon-height' in style) {\r\n    builder.setSymbolSizeExpression(\r\n      `vec2(${expressionToGlsl(\r\n        vertContext,\r\n        style['icon-width'],\r\n        NumberType,\r\n      )}, ${expressionToGlsl(vertContext, style['icon-height'], NumberType)})`,\r\n    );\r\n  }\r\n\r\n  // tex coord\r\n  if ('icon-offset' in style && 'icon-size' in style) {\r\n    const sampleSize = expressionToGlsl(\r\n      vertContext,\r\n      style['icon-size'],\r\n      NumberArrayType,\r\n    );\r\n    const fullsize = builder.getSymbolSizeExpression();\r\n    builder.setSymbolSizeExpression(sampleSize);\r\n    const offset = parseImageOffsetProperties(\r\n      style,\r\n      'icon-',\r\n      vertContext,\r\n      'v_quadSizePx',\r\n      sampleSize,\r\n    );\r\n    builder.setTextureCoordinateExpression(\r\n      `(vec4((${offset}).xyxy) + vec4(0., 0., ${sampleSize})) / (${fullsize}).xyxy`,\r\n    );\r\n  }\r\n\r\n  parseCommonSymbolProperties(style, builder, vertContext, 'icon-');\r\n\r\n  if ('icon-anchor' in style) {\r\n    const anchor = expressionToGlsl(\r\n      vertContext,\r\n      style['icon-anchor'],\r\n      NumberArrayType,\r\n    );\r\n    let scale = `1.0`;\r\n    if (`icon-scale` in style) {\r\n      scale = expressionToGlsl(vertContext, style[`icon-scale`], SizeType);\r\n    }\r\n    let shiftPx;\r\n    if (\r\n      style['icon-anchor-x-units'] === 'pixels' &&\r\n      style['icon-anchor-y-units'] === 'pixels'\r\n    ) {\r\n      shiftPx = `${anchor} * ${scale}`;\r\n    } else if (style['icon-anchor-x-units'] === 'pixels') {\r\n      shiftPx = `${anchor} * vec2(vec2(${scale}).x, v_quadSizePx.y)`;\r\n    } else if (style['icon-anchor-y-units'] === 'pixels') {\r\n      shiftPx = `${anchor} * vec2(v_quadSizePx.x, vec2(${scale}).x)`;\r\n    } else {\r\n      shiftPx = `${anchor} * v_quadSizePx`;\r\n    }\r\n    // default origin is top-left\r\n    let offsetPx = `v_quadSizePx * vec2(0.5, -0.5) + ${shiftPx} * vec2(-1., 1.)`;\r\n    if ('icon-anchor-origin' in style) {\r\n      switch (style['icon-anchor-origin']) {\r\n        case 'top-right':\r\n          offsetPx = `v_quadSizePx * -0.5 + ${shiftPx}`;\r\n          break;\r\n        case 'bottom-left':\r\n          offsetPx = `v_quadSizePx * 0.5 - ${shiftPx}`;\r\n          break;\r\n        case 'bottom-right':\r\n          offsetPx = `v_quadSizePx * vec2(-0.5, 0.5) + ${shiftPx} * vec2(1., -1.)`;\r\n          break;\r\n        default: // pass\r\n      }\r\n    }\r\n    builder.setSymbolOffsetExpression(\r\n      `${builder.getSymbolOffsetExpression()} + ${offsetPx}`,\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import(\"../style/flat.js\").FlatStyle} style Style\r\n * @param {ShaderBuilder} builder Shader Builder\r\n * @param {Object<string,import(\"../webgl/Helper\").UniformValue>} uniforms Uniforms\r\n * @param {import(\"../expr/gpu.js\").CompilationContext} vertContext Vertex shader compilation context\r\n * @param {import(\"../expr/gpu.js\").CompilationContext} fragContext Fragment shader compilation context\r\n */\r\nfunction parseStrokeProperties(\r\n  style,\r\n  builder,\r\n  uniforms,\r\n  vertContext,\r\n  fragContext,\r\n) {\r\n  if ('stroke-color' in style) {\r\n    builder.setStrokeColorExpression(\r\n      expressionToGlsl(fragContext, style['stroke-color'], ColorType),\r\n    );\r\n  }\r\n  if ('stroke-pattern-src' in style) {\r\n    const textureId = computeHash(style['stroke-pattern-src']);\r\n    const sizeExpression = parseImageProperties(\r\n      style,\r\n      builder,\r\n      uniforms,\r\n      'stroke-pattern-',\r\n      textureId,\r\n    );\r\n    let sampleSizeExpression = sizeExpression;\r\n    let offsetExpression = 'vec2(0.)';\r\n    if ('stroke-pattern-offset' in style && 'stroke-pattern-size' in style) {\r\n      sampleSizeExpression = expressionToGlsl(\r\n        fragContext,\r\n        style[`stroke-pattern-size`],\r\n        NumberArrayType,\r\n      );\r\n      offsetExpression = parseImageOffsetProperties(\r\n        style,\r\n        'stroke-pattern-',\r\n        fragContext,\r\n        sizeExpression,\r\n        sampleSizeExpression,\r\n      );\r\n    }\r\n    let spacingExpression = '0.';\r\n    if ('stroke-pattern-spacing' in style) {\r\n      spacingExpression = expressionToGlsl(\r\n        fragContext,\r\n        style['stroke-pattern-spacing'],\r\n        NumberType,\r\n      );\r\n    }\r\n    fragContext.functions['sampleStrokePattern'] =\r\n      `vec4 sampleStrokePattern(sampler2D texture, vec2 textureSize, vec2 textureOffset, vec2 sampleSize, float spacingPx, float currentLengthPx, float currentRadiusRatio, float lineWidth) {\r\n  float currentLengthScaled = currentLengthPx * sampleSize.y / lineWidth;\r\n  float spacingScaled = spacingPx * sampleSize.y / lineWidth;\r\n  float uCoordPx = mod(currentLengthScaled, (sampleSize.x + spacingScaled));\r\n  // make sure that we're not sampling too close to the borders to avoid interpolation with outside pixels\r\n  uCoordPx = clamp(uCoordPx, 0.5, sampleSize.x - 0.5);\r\n  float vCoordPx = (-currentRadiusRatio * 0.5 + 0.5) * sampleSize.y;\r\n  vec2 texCoord = (vec2(uCoordPx, vCoordPx) + textureOffset) / textureSize;\r\n  return texture2D(texture, texCoord);\r\n}`;\r\n    const textureName = `u_texture${textureId}`;\r\n    let tintExpression = '1.';\r\n    if ('stroke-color' in style) {\r\n      tintExpression = builder.getStrokeColorExpression();\r\n    }\r\n    builder.setStrokeColorExpression(\r\n      `${tintExpression} * sampleStrokePattern(${textureName}, ${sizeExpression}, ${offsetExpression}, ${sampleSizeExpression}, ${spacingExpression}, currentLengthPx, currentRadiusRatio, v_width)`,\r\n    );\r\n  }\r\n\r\n  if ('stroke-width' in style) {\r\n    builder.setStrokeWidthExpression(\r\n      expressionToGlsl(vertContext, style['stroke-width'], NumberType),\r\n    );\r\n  }\r\n\r\n  if ('stroke-offset' in style) {\r\n    builder.setStrokeOffsetExpression(\r\n      expressionToGlsl(vertContext, style['stroke-offset'], NumberType),\r\n    );\r\n  }\r\n\r\n  if ('stroke-line-cap' in style) {\r\n    builder.setStrokeCapExpression(\r\n      expressionToGlsl(vertContext, style['stroke-line-cap'], StringType),\r\n    );\r\n  }\r\n\r\n  if ('stroke-line-join' in style) {\r\n    builder.setStrokeJoinExpression(\r\n      expressionToGlsl(vertContext, style['stroke-line-join'], StringType),\r\n    );\r\n  }\r\n\r\n  if ('stroke-miter-limit' in style) {\r\n    builder.setStrokeMiterLimitExpression(\r\n      expressionToGlsl(vertContext, style['stroke-miter-limit'], NumberType),\r\n    );\r\n  }\r\n\r\n  if ('stroke-line-dash' in style) {\r\n    fragContext.functions['getSingleDashDistance'] =\r\n      `float getSingleDashDistance(float distance, float radius, float dashOffset, float dashLength, float dashLengthTotal, float capType) {\r\n  float localDistance = mod(distance, dashLengthTotal);\r\n  float distanceSegment = abs(localDistance - dashOffset - dashLength * 0.5) - dashLength * 0.5;\r\n  distanceSegment = min(distanceSegment, dashLengthTotal - localDistance);\r\n  if (capType == ${stringToGlsl('square')}) {\r\n    distanceSegment -= v_width * 0.5;\r\n  } else if (capType == ${stringToGlsl('round')}) {\r\n    distanceSegment = min(distanceSegment, sqrt(distanceSegment * distanceSegment + radius * radius) - v_width * 0.5);\r\n  }\r\n  return distanceSegment;\r\n}`;\r\n\r\n    let dashPattern = style['stroke-line-dash'].map((v) =>\r\n      expressionToGlsl(fragContext, v, NumberType),\r\n    );\r\n    // if pattern has odd length, concatenate it with itself to be even\r\n    if (dashPattern.length % 2 === 1) {\r\n      dashPattern = [...dashPattern, ...dashPattern];\r\n    }\r\n\r\n    let offsetExpression = '0.';\r\n    if ('stroke-line-dash-offset' in style) {\r\n      offsetExpression = expressionToGlsl(\r\n        vertContext,\r\n        style['stroke-line-dash-offset'],\r\n        NumberType,\r\n      );\r\n    }\r\n\r\n    // define a function for this dash specifically\r\n    const uniqueDashKey = computeHash(style['stroke-line-dash']);\r\n    const dashFunctionName = `dashDistanceField_${uniqueDashKey}`;\r\n\r\n    const dashLengthsDef = dashPattern.map(\r\n      (v, i) => `float dashLength${i} = ${v};`,\r\n    );\r\n    const totalLengthDef = dashPattern\r\n      .map((v, i) => `dashLength${i}`)\r\n      .join(' + ');\r\n    let currentDashOffset = '0.';\r\n    let distanceExpression = `getSingleDashDistance(distance, radius, ${currentDashOffset}, dashLength0, totalDashLength, capType)`;\r\n    for (let i = 2; i < dashPattern.length; i += 2) {\r\n      currentDashOffset = `${currentDashOffset} + dashLength${\r\n        i - 2\r\n      } + dashLength${i - 1}`;\r\n      distanceExpression = `min(${distanceExpression}, getSingleDashDistance(distance, radius, ${currentDashOffset}, dashLength${i}, totalDashLength, capType))`;\r\n    }\r\n\r\n    fragContext.functions[dashFunctionName] =\r\n      `float ${dashFunctionName}(float distance, float radius, float capType) {\r\n  ${dashLengthsDef.join('\\n  ')}\r\n  float totalDashLength = ${totalLengthDef};\r\n  return ${distanceExpression};\r\n}`;\r\n    builder.setStrokeDistanceFieldExpression(\r\n      `${dashFunctionName}(currentLengthPx + ${offsetExpression}, currentRadiusPx, capType)`,\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import(\"../style/flat.js\").FlatStyle} style Style\r\n * @param {ShaderBuilder} builder Shader Builder\r\n * @param {Object<string,import(\"../webgl/Helper\").UniformValue>} uniforms Uniforms\r\n * @param {import(\"../expr/gpu.js\").CompilationContext} vertContext Vertex shader compilation context\r\n * @param {import(\"../expr/gpu.js\").CompilationContext} fragContext Fragment shader compilation context\r\n */\r\nfunction parseFillProperties(\r\n  style,\r\n  builder,\r\n  uniforms,\r\n  vertContext,\r\n  fragContext,\r\n) {\r\n  if ('fill-color' in style) {\r\n    builder.setFillColorExpression(\r\n      expressionToGlsl(fragContext, style['fill-color'], ColorType),\r\n    );\r\n  }\r\n  if ('fill-pattern-src' in style) {\r\n    const textureId = computeHash(style['fill-pattern-src']);\r\n    const sizeExpression = parseImageProperties(\r\n      style,\r\n      builder,\r\n      uniforms,\r\n      'fill-pattern-',\r\n      textureId,\r\n    );\r\n    let sampleSizeExpression = sizeExpression;\r\n    let offsetExpression = 'vec2(0.)';\r\n    if ('fill-pattern-offset' in style && 'fill-pattern-size' in style) {\r\n      sampleSizeExpression = expressionToGlsl(\r\n        fragContext,\r\n        style[`fill-pattern-size`],\r\n        NumberArrayType,\r\n      );\r\n      offsetExpression = parseImageOffsetProperties(\r\n        style,\r\n        'fill-pattern-',\r\n        fragContext,\r\n        sizeExpression,\r\n        sampleSizeExpression,\r\n      );\r\n    }\r\n    fragContext.functions['sampleFillPattern'] =\r\n      `vec4 sampleFillPattern(sampler2D texture, vec2 textureSize, vec2 textureOffset, vec2 sampleSize, vec2 pxOrigin, vec2 pxPosition) {\r\n  float scaleRatio = pow(2., mod(u_zoom + 0.5, 1.) - 0.5);\r\n  vec2 pxRelativePos = pxPosition - pxOrigin;\r\n  // rotate the relative position from origin by the current view rotation\r\n  pxRelativePos = vec2(pxRelativePos.x * cos(u_rotation) - pxRelativePos.y * sin(u_rotation), pxRelativePos.x * sin(u_rotation) + pxRelativePos.y * cos(u_rotation));\r\n  // sample position is computed according to the sample offset & size\r\n  vec2 samplePos = mod(pxRelativePos / scaleRatio, sampleSize);\r\n  // also make sure that we're not sampling too close to the borders to avoid interpolation with outside pixels\r\n  samplePos = clamp(samplePos, vec2(0.5), sampleSize - vec2(0.5));\r\n  samplePos.y = sampleSize.y - samplePos.y; // invert y axis so that images appear upright\r\n  return texture2D(texture, (samplePos + textureOffset) / textureSize);\r\n}`;\r\n    const textureName = `u_texture${textureId}`;\r\n    let tintExpression = '1.';\r\n    if ('fill-color' in style) {\r\n      tintExpression = builder.getFillColorExpression();\r\n    }\r\n    builder.setFillColorExpression(\r\n      `${tintExpression} * sampleFillPattern(${textureName}, ${sizeExpression}, ${offsetExpression}, ${sampleSizeExpression}, pxOrigin, pxPos)`,\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * @typedef {Object} StyleParseResult\r\n * @property {ShaderBuilder} builder Shader builder pre-configured according to a given style\r\n * @property {import(\"../render/webgl/VectorStyleRenderer.js\").UniformDefinitions} uniforms Uniform definitions\r\n * @property {import(\"../render/webgl/VectorStyleRenderer.js\").AttributeDefinitions} attributes Attribute definitions\r\n */\r\n\r\n/**\r\n * Parses a {@link import(\"../style/flat.js\").FlatStyle} object and returns a {@link ShaderBuilder}\r\n * object that has been configured according to the given style, as well as `attributes` and `uniforms`\r\n * arrays to be fed to the `WebGLPointsRenderer` class.\r\n *\r\n * Also returns `uniforms` and `attributes` properties as expected by the\r\n * {@link module:ol/renderer/webgl/PointsLayer~WebGLPointsLayerRenderer}.\r\n *\r\n * @param {import(\"../style/flat.js\").FlatStyle} style Flat style.\r\n * @param {import('../style/flat.js').StyleVariables} [variables] Style variables.\r\n * @param {import(\"../expr/expression.js\").EncodedExpression} [filter] Filter (if any)\r\n * @return {StyleParseResult} Result containing shader params, attributes and uniforms.\r\n */\r\nexport function parseLiteralStyle(style, variables, filter) {\r\n  const vertContext = newCompilationContext();\r\n\r\n  /**\r\n   * @type {import(\"../expr/gpu.js\").CompilationContext}\r\n   */\r\n  const fragContext = {\r\n    ...newCompilationContext(),\r\n    inFragmentShader: true,\r\n    variables: vertContext.variables,\r\n  };\r\n\r\n  const builder = new ShaderBuilder();\r\n\r\n  /** @type {Object<string,import(\"../webgl/Helper\").UniformValue>} */\r\n  const uniforms = {};\r\n\r\n  if ('icon-src' in style) {\r\n    parseIconProperties(style, builder, uniforms, vertContext, fragContext);\r\n  } else if ('shape-points' in style) {\r\n    parseShapeProperties(style, builder, uniforms, vertContext, fragContext);\r\n  } else if ('circle-radius' in style) {\r\n    parseCircleProperties(style, builder, uniforms, vertContext, fragContext);\r\n  }\r\n  parseStrokeProperties(style, builder, uniforms, vertContext, fragContext);\r\n  parseFillProperties(style, builder, uniforms, vertContext, fragContext);\r\n\r\n  // note that the style filter may have already been applied earlier when building the rendering instructions\r\n  // this is still needed in case a filter cannot be evaluated statically beforehand (e.g. depending on time)\r\n  if (filter) {\r\n    const parsedFilter = expressionToGlsl(fragContext, filter, BooleanType);\r\n    builder.setFragmentDiscardExpression(`!${parsedFilter}`);\r\n  }\r\n\r\n  // define one uniform per variable\r\n  for (const varName in fragContext.variables) {\r\n    const variable = fragContext.variables[varName];\r\n    const uniformName = uniformNameForVariable(variable.name);\r\n    let glslType = getGlslTypeFromType(variable.type);\r\n    if (variable.type === ColorType) {\r\n      // we're not packing colors when they're passed as uniforms\r\n      glslType = 'vec4';\r\n    }\r\n    builder.addUniform(`${glslType} ${uniformName}`);\r\n\r\n    uniforms[uniformName] = () => {\r\n      const value = variables[variable.name];\r\n      if (typeof value === 'number') {\r\n        return value;\r\n      }\r\n      if (typeof value === 'boolean') {\r\n        return value ? 1 : 0;\r\n      }\r\n      if (variable.type === ColorType) {\r\n        return asArray(value || '#eee');\r\n      }\r\n      if (typeof value === 'string') {\r\n        return getStringNumberEquivalent(value);\r\n      }\r\n      return value;\r\n    };\r\n  }\r\n\r\n  // for each feature attribute used in the fragment shader, define a varying that will be used to pass data\r\n  // from the vertex to the fragment shader, as well as an attribute in the vertex shader (if not already present)\r\n  for (const propName in fragContext.properties) {\r\n    const property = fragContext.properties[propName];\r\n    if (!vertContext.properties[propName]) {\r\n      vertContext.properties[propName] = property;\r\n    }\r\n    let type = getGlslTypeFromType(property.type);\r\n    let expression = `a_prop_${property.name}`;\r\n    if (property.type === ColorType) {\r\n      type = 'vec4';\r\n      expression = `unpackColor(${expression})`;\r\n      builder.addVertexShaderFunction(UNPACK_COLOR_FN);\r\n    }\r\n    builder.addVarying(`v_prop_${property.name}`, type, expression);\r\n  }\r\n\r\n  // for each feature attribute used in the vertex shader, define an attribute in the vertex shader.\r\n  for (const propName in vertContext.properties) {\r\n    const property = vertContext.properties[propName];\r\n    builder.addAttribute(\r\n      `${getGlslTypeFromType(property.type)} a_prop_${property.name}`,\r\n    );\r\n  }\r\n\r\n  // add functions that were collected in the compilation contexts\r\n  for (const functionName in vertContext.functions) {\r\n    builder.addVertexShaderFunction(vertContext.functions[functionName]);\r\n  }\r\n  for (const functionName in fragContext.functions) {\r\n    builder.addFragmentShaderFunction(fragContext.functions[functionName]);\r\n  }\r\n\r\n  /**\r\n   * @type {import('../render/webgl/VectorStyleRenderer.js').AttributeDefinitions}\r\n   */\r\n  const attributes = {};\r\n\r\n  // Define attributes with their callback for each property used in the vertex shader\r\n  for (const propName in vertContext.properties) {\r\n    const property = vertContext.properties[propName];\r\n    const callback = (feature) => {\r\n      const value = feature.get(property.name);\r\n      if (property.type === ColorType) {\r\n        return packColor([...asArray(value || '#eee')]);\r\n      }\r\n      if (typeof value === 'string') {\r\n        return getStringNumberEquivalent(value);\r\n      }\r\n      if (typeof value === 'boolean') {\r\n        return value ? 1 : 0;\r\n      }\r\n      return value;\r\n    };\r\n\r\n    attributes[`prop_${property.name}`] = {\r\n      size: getGlslSizeFromType(property.type),\r\n      callback,\r\n    };\r\n  }\r\n\r\n  // Define attributes for special inputs\r\n  function defineSpecialInput(contextPropName, glslPropName, type, callback) {\r\n    const inVertContext = vertContext[contextPropName];\r\n    const inFragContext = fragContext[contextPropName];\r\n    if (!inVertContext && !inFragContext) {\r\n      return;\r\n    }\r\n    const glslType = getGlslTypeFromType(type);\r\n    const attrSize = getGlslSizeFromType(type);\r\n    builder.addAttribute(`${glslType} a_${glslPropName}`);\r\n    if (inFragContext) {\r\n      builder.addVarying(`v_${glslPropName}`, glslType, `a_${glslPropName}`);\r\n    }\r\n    attributes[glslPropName] = {\r\n      size: attrSize,\r\n      callback,\r\n    };\r\n  }\r\n  defineSpecialInput(\r\n    'geometryType',\r\n    GEOMETRY_TYPE_PROPERTY_NAME,\r\n    StringType,\r\n    (feature) =>\r\n      getStringNumberEquivalent(computeGeometryType(feature.getGeometry())),\r\n  );\r\n  defineSpecialInput(\r\n    'featureId',\r\n    FEATURE_ID_PROPERTY_NAME,\r\n    StringType | NumberType,\r\n    (feature) => {\r\n      const id = feature.getId() ?? null;\r\n      return typeof id === 'string' ? getStringNumberEquivalent(id) : id;\r\n    },\r\n  );\r\n\r\n  return {builder, attributes, uniforms};\r\n}\r\n", "/**\r\n * @module ol/layer/WebGLPoints\r\n */\r\nimport WebGLPointsLayerRenderer from '../renderer/webgl/PointsLayer.js';\r\nimport {parseLiteralStyle} from '../webgl/styleparser.js';\r\nimport Layer from './Layer.js';\r\n\r\n/**\r\n * @template {import(\"../source/Vector.js\").default<import('../Feature').FeatureLike>} VectorSourceType\r\n * @typedef {Object} Options\r\n * @property {import('../style/flat.js').FlatStyle} style Literal style to apply to the layer features.\r\n * @property {import(\"../expr/expression.js\").EncodedExpression} [filter] The filter used\r\n * to determine if a style applies. If no filter is included, the rule always applies.\r\n * @property {import('../style/flat.js').StyleVariables} [variables] Style variables. Each variable must hold a literal value (not\r\n * an expression). These variables can be used as {@link import(\"../expr/expression.js\").ExpressionValue expressions} in the styles properties\r\n * using the `['var', 'varName']` operator.\r\n * To update style variables, use the {@link import(\"./WebGLPoints.js\").default#updateStyleVariables} method.\r\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\r\n * @property {number} [opacity=1] Opacity (0, 1).\r\n * @property {boolean} [visible=true] Visibility.\r\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\r\n * rendered outside of this extent.\r\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\r\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\r\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\r\n * method was used.\r\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\r\n * visible.\r\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\r\n * be visible.\r\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\r\n * visible.\r\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\r\n * be visible.\r\n * @property {VectorSourceType} [source] Point source.\r\n * @property {boolean} [disableHitDetection=false] Setting this to true will provide a slight performance boost, but will\r\n * prevent all hit detection on the layer.\r\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Layer optimized for rendering large point datasets. Takes a `style` property which\r\n * is a serializable JSON object describing how the layer should be rendered.\r\n *\r\n * Here are a few samples of literal style objects:\r\n * ```js\r\n * const style = {\r\n *   'circle-radius': 8,\r\n *   'circle-fill-color': '#33AAFF',\r\n *   'circle-opacity': 0.9\r\n * }\r\n * ```\r\n *\r\n * ```js\r\n * const style = {\r\n *   'icon-src': '../static/exclamation-mark.png',\r\n *   'icon-offset': [0, 12],\r\n *   'icon-width': 4,\r\n *   'icon-height': 8\r\n * }\r\n * ```\r\n *\r\n * **Important: a `WebGLPoints` layer must be manually disposed when removed, otherwise the underlying WebGL context\r\n * will not be garbage collected.**\r\n *\r\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\r\n * property on the layer object; for example, setting `title: 'My Title'` in the\r\n * options means that `title` is observable, and has get/set accessors.\r\n *\r\n * @template {import(\"../source/Vector.js\").default<import('../Feature').FeatureLike>} VectorSourceType\r\n * @extends {Layer<VectorSourceType, WebGLPointsLayerRenderer>}\r\n * @fires import(\"../render/Event.js\").RenderEvent#prerender\r\n * @fires import(\"../render/Event.js\").RenderEvent#postrender\r\n * @deprecated Use ol/layer/WebGLVector instead\r\n */\r\nclass WebGLPointsLayer extends Layer {\r\n  /**\r\n   * @param {Options<VectorSourceType>} options Options.\r\n   */\r\n  constructor(options) {\r\n    const baseOptions = Object.assign({}, options);\r\n\r\n    super(baseOptions);\r\n\r\n    /**\r\n     * @type {import('../style/flat.js').StyleVariables}\r\n     * @private\r\n     */\r\n    this.styleVariables_ = options.variables || {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {import('../webgl/styleparser.js').StyleParseResult}\r\n     */\r\n    this.parseResult_ = parseLiteralStyle(\r\n      options.style,\r\n      this.styleVariables_,\r\n      options.filter,\r\n    );\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.hitDetectionDisabled_ = !!options.disableHitDetection;\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  createRenderer() {\r\n    const attributes = Object.keys(this.parseResult_.attributes).map(\r\n      (name) => ({\r\n        name,\r\n        ...this.parseResult_.attributes[name],\r\n      }),\r\n    );\r\n    return new WebGLPointsLayerRenderer(this, {\r\n      vertexShader: this.parseResult_.builder.getSymbolVertexShader(),\r\n      fragmentShader: this.parseResult_.builder.getSymbolFragmentShader(),\r\n      hitDetectionEnabled: !this.hitDetectionDisabled_,\r\n      uniforms: this.parseResult_.uniforms,\r\n      attributes:\r\n        /** @type {Array<import('../renderer/webgl/PointsLayer.js').CustomAttribute>} */ (\r\n          attributes\r\n        ),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update any variables used by the layer style and trigger a re-render.\r\n   * @param {Object<string, number>} variables Variables to update.\r\n   */\r\n  updateStyleVariables(variables) {\r\n    Object.assign(this.styleVariables_, variables);\r\n    this.changed();\r\n  }\r\n}\r\n\r\nexport default WebGLPointsLayer;\r\n", "/**\r\n * @module ol/layer/WebGLTile\r\n */\r\nimport {ColorType, NumberType} from '../expr/expression.js';\r\nimport {\r\n  PALETTE_TEXTURE_ARRAY,\r\n  getStringNumberEquivalent,\r\n  newCompilationContext,\r\n  uniformNameForVariable,\r\n} from '../expr/gpu.js';\r\nimport LayerProperty from '../layer/Property.js';\r\nimport WebGLTileLayerRenderer, {\r\n  Attributes,\r\n  Uniforms,\r\n} from '../renderer/webgl/TileLayer.js';\r\nimport {expressionToGlsl} from '../webgl/styleparser.js';\r\nimport BaseTileLayer from './BaseTile.js';\r\n\r\n/**\r\n * @typedef {import(\"../source/DataTile.js\").default<import(\"../DataTile.js\").default|import(\"../ImageTile.js\").default>} SourceType\r\n */\r\n\r\n/**\r\n * @typedef {Object} Style\r\n * Translates tile data to rendered pixels.\r\n *\r\n * @property {Object<string, (string|number)>} [variables] Style variables.  Each variable must hold a number or string.  These\r\n * variables can be used in the `color`, `brightness`, `contrast`, `exposure`, `saturation` and `gamma`\r\n * {@link import(\"../expr/expression.js\").ExpressionValue expressions}, using the `['var', 'varName']` operator.\r\n * To update style variables, use the {@link import(\"./WebGLTile.js\").default#updateStyleVariables} method.\r\n * @property {import(\"../expr/expression.js\").ExpressionValue} [color] An expression applied to color values.\r\n * @property {import(\"../expr/expression.js\").ExpressionValue} [brightness=0] Value used to decrease or increase\r\n * the layer brightness.  Values range from -1 to 1.\r\n * @property {import(\"../expr/expression.js\").ExpressionValue} [contrast=0] Value used to decrease or increase\r\n * the layer contrast.  Values range from -1 to 1.\r\n * @property {import(\"../expr/expression.js\").ExpressionValue} [exposure=0] Value used to decrease or increase\r\n * the layer exposure.  Values range from -1 to 1.\r\n * @property {import(\"../expr/expression.js\").ExpressionValue} [saturation=0] Value used to decrease or increase\r\n * the layer saturation.  Values range from -1 to 1.\r\n * @property {import(\"../expr/expression.js\").ExpressionValue} [gamma=1] Apply a gamma correction to the layer.\r\n * Values range from 0 to infinity.\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {Style} [style] Style to apply to the layer.\r\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\r\n * @property {number} [opacity=1] Opacity (0, 1).\r\n * @property {boolean} [visible=true] Visibility.\r\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\r\n * rendered outside of this extent.\r\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\r\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\r\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\r\n * method was used.\r\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\r\n * visible.\r\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\r\n * be visible.\r\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\r\n * visible.\r\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\r\n * be visible.\r\n * @property {number} [preload=0] Preload. Load low-resolution tiles up to `preload` levels. `0`\r\n * means no preloading.\r\n * @property {SourceType} [source] Source for this layer.\r\n * @property {Array<SourceType>|function(import(\"../extent.js\").Extent, number):Array<SourceType>} [sources] Array\r\n * of sources for this layer. Takes precedence over `source`. Can either be an array of sources, or a function that\r\n * expects an extent and a resolution (in view projection units per pixel) and returns an array of sources. See\r\n * {@link module:ol/source.sourcesFromTileGrid} for a helper function to generate sources that are organized in a\r\n * pyramid following the same pattern as a tile grid. **Note:** All sources must have the same band count and content.\r\n * @property {import(\"../Map.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\r\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\r\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\r\n * use {@link module:ol/Map~Map#addLayer}.\r\n * @property {boolean} [useInterimTilesOnError=true] Deprecated.  Use interim tiles on error.\r\n * @property {number} [cacheSize=512] The internal texture cache size.  This needs to be large enough to render\r\n * two zoom levels worth of tiles.\r\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\r\n */\r\n\r\n/**\r\n * @typedef {Object} ParsedStyle\r\n * @property {string} vertexShader The vertex shader.\r\n * @property {string} fragmentShader The fragment shader.\r\n * @property {Object<string,import(\"../webgl/Helper.js\").UniformValue>} uniforms Uniform definitions.\r\n * @property {Array<import(\"../webgl/PaletteTexture.js\").default>} paletteTextures Palette textures.\r\n */\r\n\r\n/**\r\n * @param {Style} style The layer style.\r\n * @param {number} [bandCount] The number of bands.\r\n * @return {ParsedStyle} Shaders and uniforms generated from the style.\r\n */\r\nfunction parseStyle(style, bandCount) {\r\n  const vertexShader = `\r\n    attribute vec2 ${Attributes.TEXTURE_COORD};\r\n    uniform mat4 ${Uniforms.TILE_TRANSFORM};\r\n    uniform float ${Uniforms.TEXTURE_PIXEL_WIDTH};\r\n    uniform float ${Uniforms.TEXTURE_PIXEL_HEIGHT};\r\n    uniform float ${Uniforms.TEXTURE_RESOLUTION};\r\n    uniform float ${Uniforms.TEXTURE_ORIGIN_X};\r\n    uniform float ${Uniforms.TEXTURE_ORIGIN_Y};\r\n    uniform float ${Uniforms.DEPTH};\r\n\r\n    varying vec2 v_textureCoord;\r\n    varying vec2 v_mapCoord;\r\n\r\n    void main() {\r\n      v_textureCoord = ${Attributes.TEXTURE_COORD};\r\n      v_mapCoord = vec2(\r\n        ${Uniforms.TEXTURE_ORIGIN_X} + ${Uniforms.TEXTURE_RESOLUTION} * ${Uniforms.TEXTURE_PIXEL_WIDTH} * v_textureCoord[0],\r\n        ${Uniforms.TEXTURE_ORIGIN_Y} - ${Uniforms.TEXTURE_RESOLUTION} * ${Uniforms.TEXTURE_PIXEL_HEIGHT} * v_textureCoord[1]\r\n      );\r\n      gl_Position = ${Uniforms.TILE_TRANSFORM} * vec4(${Attributes.TEXTURE_COORD}, ${Uniforms.DEPTH}, 1.0);\r\n    }\r\n  `;\r\n\r\n  /**\r\n   * @type {import(\"../expr/gpu.js\").CompilationContext}\r\n   */\r\n  const context = {\r\n    ...newCompilationContext(),\r\n    inFragmentShader: true,\r\n    bandCount: bandCount,\r\n  };\r\n\r\n  const pipeline = [];\r\n\r\n  if (style.color !== undefined) {\r\n    const color = expressionToGlsl(context, style.color, ColorType);\r\n    pipeline.push(`color = ${color};`);\r\n  }\r\n\r\n  if (style.contrast !== undefined) {\r\n    const contrast = expressionToGlsl(context, style.contrast, NumberType);\r\n    pipeline.push(\r\n      `color.rgb = clamp((${contrast} + 1.0) * color.rgb - (${contrast} / 2.0), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));`,\r\n    );\r\n  }\r\n\r\n  if (style.exposure !== undefined) {\r\n    const exposure = expressionToGlsl(context, style.exposure, NumberType);\r\n    pipeline.push(\r\n      `color.rgb = clamp((${exposure} + 1.0) * color.rgb, vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));`,\r\n    );\r\n  }\r\n\r\n  if (style.saturation !== undefined) {\r\n    const saturation = expressionToGlsl(context, style.saturation, NumberType);\r\n    pipeline.push(`\r\n      float saturation = ${saturation} + 1.0;\r\n      float sr = (1.0 - saturation) * 0.2126;\r\n      float sg = (1.0 - saturation) * 0.7152;\r\n      float sb = (1.0 - saturation) * 0.0722;\r\n      mat3 saturationMatrix = mat3(\r\n        sr + saturation, sr, sr,\r\n        sg, sg + saturation, sg,\r\n        sb, sb, sb + saturation\r\n      );\r\n      color.rgb = clamp(saturationMatrix * color.rgb, vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));\r\n    `);\r\n  }\r\n\r\n  if (style.gamma !== undefined) {\r\n    const gamma = expressionToGlsl(context, style.gamma, NumberType);\r\n    pipeline.push(`color.rgb = pow(color.rgb, vec3(1.0 / ${gamma}));`);\r\n  }\r\n\r\n  if (style.brightness !== undefined) {\r\n    const brightness = expressionToGlsl(context, style.brightness, NumberType);\r\n    pipeline.push(\r\n      `color.rgb = clamp(color.rgb + ${brightness}, vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));`,\r\n    );\r\n  }\r\n\r\n  /** @type {Object<string,import(\"../webgl/Helper\").UniformValue>} */\r\n  const uniforms = {};\r\n\r\n  const numVariables = Object.keys(context.variables).length;\r\n  if (numVariables > 1 && !style.variables) {\r\n    throw new Error(\r\n      `Missing variables in style (expected ${context.variables})`,\r\n    );\r\n  }\r\n\r\n  for (let i = 0; i < numVariables; ++i) {\r\n    const variable = context.variables[Object.keys(context.variables)[i]];\r\n    if (!(variable.name in style.variables)) {\r\n      throw new Error(`Missing '${variable.name}' in style variables`);\r\n    }\r\n    const uniformName = uniformNameForVariable(variable.name);\r\n    uniforms[uniformName] = function () {\r\n      let value = style.variables[variable.name];\r\n      if (typeof value === 'string') {\r\n        value = getStringNumberEquivalent(value);\r\n      }\r\n      return value !== undefined ? value : -9999999; // to avoid matching with the first string literal\r\n    };\r\n  }\r\n\r\n  const uniformDeclarations = Object.keys(uniforms).map(function (name) {\r\n    return `uniform float ${name};`;\r\n  });\r\n\r\n  const textureCount = Math.ceil(bandCount / 4);\r\n  uniformDeclarations.push(\r\n    `uniform sampler2D ${Uniforms.TILE_TEXTURE_ARRAY}[${textureCount}];`,\r\n  );\r\n\r\n  if (context.paletteTextures) {\r\n    uniformDeclarations.push(\r\n      `uniform sampler2D ${PALETTE_TEXTURE_ARRAY}[${context.paletteTextures.length}];`,\r\n    );\r\n  }\r\n\r\n  const functionDefintions = Object.keys(context.functions).map(\r\n    function (name) {\r\n      return context.functions[name];\r\n    },\r\n  );\r\n\r\n  const fragmentShader = `\r\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\r\n    precision highp float;\r\n    #else\r\n    precision mediump float;\r\n    #endif\r\n\r\n    varying vec2 v_textureCoord;\r\n    varying vec2 v_mapCoord;\r\n    uniform vec4 ${Uniforms.RENDER_EXTENT};\r\n    uniform float ${Uniforms.TRANSITION_ALPHA};\r\n    uniform float ${Uniforms.TEXTURE_PIXEL_WIDTH};\r\n    uniform float ${Uniforms.TEXTURE_PIXEL_HEIGHT};\r\n    uniform float ${Uniforms.RESOLUTION};\r\n    uniform float ${Uniforms.ZOOM};\r\n\r\n    ${uniformDeclarations.join('\\n')}\r\n\r\n    ${functionDefintions.join('\\n')}\r\n\r\n    void main() {\r\n      if (\r\n        v_mapCoord[0] < ${Uniforms.RENDER_EXTENT}[0] ||\r\n        v_mapCoord[1] < ${Uniforms.RENDER_EXTENT}[1] ||\r\n        v_mapCoord[0] > ${Uniforms.RENDER_EXTENT}[2] ||\r\n        v_mapCoord[1] > ${Uniforms.RENDER_EXTENT}[3]\r\n      ) {\r\n        discard;\r\n      }\r\n\r\n      vec4 color = texture2D(${\r\n        Uniforms.TILE_TEXTURE_ARRAY\r\n      }[0],  v_textureCoord);\r\n\r\n      ${pipeline.join('\\n')}\r\n\r\n      gl_FragColor = color;\r\n      gl_FragColor.rgb *= gl_FragColor.a;\r\n      gl_FragColor *= ${Uniforms.TRANSITION_ALPHA};\r\n    }`;\r\n\r\n  return {\r\n    vertexShader: vertexShader,\r\n    fragmentShader: fragmentShader,\r\n    uniforms: uniforms,\r\n    paletteTextures: context.paletteTextures,\r\n  };\r\n}\r\n\r\n/**\r\n * @classdesc\r\n * For layer sources that provide pre-rendered, tiled images in grids that are\r\n * organized by zoom levels for specific resolutions.\r\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\r\n * property on the layer object; for example, setting `title: 'My Title'` in the\r\n * options means that `title` is observable, and has get/set accessors.\r\n *\r\n * @extends BaseTileLayer<SourceType, WebGLTileLayerRenderer>\r\n * @fires import(\"../render/Event.js\").RenderEvent#prerender\r\n * @fires import(\"../render/Event.js\").RenderEvent#postrender\r\n * @api\r\n */\r\nclass WebGLTileLayer extends BaseTileLayer {\r\n  /**\r\n   * @param {Options} options Tile layer options.\r\n   */\r\n  constructor(options) {\r\n    options = options ? Object.assign({}, options) : {};\r\n\r\n    const style = options.style || {};\r\n    delete options.style;\r\n\r\n    super(options);\r\n\r\n    /**\r\n     * @type {Array<SourceType>|function(import(\"../extent.js\").Extent, number):Array<SourceType>}\r\n     * @private\r\n     */\r\n    this.sources_ = options.sources;\r\n\r\n    /**\r\n     * @type {SourceType|null}\r\n     * @private\r\n     */\r\n    this.renderedSource_ = null;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.renderedResolution_ = NaN;\r\n\r\n    /**\r\n     * @type {Style}\r\n     * @private\r\n     */\r\n    this.style_ = style;\r\n\r\n    /**\r\n     * @type {Object<string, (string|number)>}\r\n     * @private\r\n     */\r\n    this.styleVariables_ = this.style_.variables || {};\r\n\r\n    this.handleSourceUpdate_();\r\n    this.addChangeListener(LayerProperty.SOURCE, this.handleSourceUpdate_);\r\n  }\r\n\r\n  /**\r\n   * Gets the sources for this layer, for a given extent and resolution.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {number} resolution Resolution.\r\n   * @return {Array<SourceType>} Sources.\r\n   */\r\n  getSources(extent, resolution) {\r\n    const source = this.getSource();\r\n    return this.sources_\r\n      ? typeof this.sources_ === 'function'\r\n        ? this.sources_(extent, resolution)\r\n        : this.sources_\r\n      : source\r\n        ? [source]\r\n        : [];\r\n  }\r\n\r\n  /**\r\n   * @return {SourceType} The source being rendered.\r\n   * @override\r\n   */\r\n  getRenderSource() {\r\n    return this.renderedSource_ || this.getSource();\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"../source/Source.js\").State} Source state.\r\n   * @override\r\n   */\r\n  getSourceState() {\r\n    const source = this.getRenderSource();\r\n    return source ? source.getState() : 'undefined';\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  handleSourceUpdate_() {\r\n    if (this.hasRenderer()) {\r\n      this.getRenderer().clearCache();\r\n    }\r\n    const source = this.getSource();\r\n    if (source) {\r\n      if (source.getState() === 'loading') {\r\n        const onChange = () => {\r\n          if (source.getState() === 'ready') {\r\n            source.removeEventListener('change', onChange);\r\n            this.setStyle(this.style_);\r\n          }\r\n        };\r\n        source.addEventListener('change', onChange);\r\n      } else {\r\n        this.setStyle(this.style_);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @return {number} The number of source bands.\r\n   */\r\n  getSourceBandCount_() {\r\n    const max = Number.MAX_SAFE_INTEGER;\r\n    const sources = this.getSources([-max, -max, max, max], max);\r\n    return sources && sources.length && 'bandCount' in sources[0]\r\n      ? sources[0].bandCount\r\n      : 4;\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  createRenderer() {\r\n    const parsedStyle = parseStyle(this.style_, this.getSourceBandCount_());\r\n\r\n    return new WebGLTileLayerRenderer(this, {\r\n      vertexShader: parsedStyle.vertexShader,\r\n      fragmentShader: parsedStyle.fragmentShader,\r\n      uniforms: parsedStyle.uniforms,\r\n      cacheSize: this.getCacheSize(),\r\n      paletteTextures: parsedStyle.paletteTextures,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../Map\").FrameState} frameState Frame state.\r\n   * @param {Array<SourceType>} sources Sources.\r\n   * @return {HTMLElement} Canvas.\r\n   */\r\n  renderSources(frameState, sources) {\r\n    const layerRenderer = this.getRenderer();\r\n    let canvas;\r\n    for (let i = 0, ii = sources.length; i < ii; ++i) {\r\n      this.renderedSource_ = sources[i];\r\n      if (layerRenderer.prepareFrame(frameState)) {\r\n        canvas = layerRenderer.renderFrame(frameState);\r\n      }\r\n    }\r\n    return canvas;\r\n  }\r\n\r\n  /**\r\n   * @param {?import(\"../Map.js\").FrameState} frameState Frame state.\r\n   * @param {HTMLElement} target Target which the renderer may (but need not) use\r\n   * for rendering its content.\r\n   * @return {HTMLElement} The rendered element.\r\n   * @override\r\n   */\r\n  render(frameState, target) {\r\n    this.rendered = true;\r\n    const viewState = frameState.viewState;\r\n    const sources = this.getSources(frameState.extent, viewState.resolution);\r\n    let ready = true;\r\n    for (let i = 0, ii = sources.length; i < ii; ++i) {\r\n      const source = sources[i];\r\n      const sourceState = source.getState();\r\n      if (sourceState == 'loading') {\r\n        const onChange = () => {\r\n          if (source.getState() == 'ready') {\r\n            source.removeEventListener('change', onChange);\r\n            this.changed();\r\n          }\r\n        };\r\n        source.addEventListener('change', onChange);\r\n      }\r\n      ready = ready && sourceState == 'ready';\r\n    }\r\n    const canvas = this.renderSources(frameState, sources);\r\n    if (this.getRenderer().renderComplete && ready) {\r\n      // Fully rendered, done.\r\n      this.renderedResolution_ = viewState.resolution;\r\n      return canvas;\r\n    }\r\n    // Render sources from previously fully rendered frames\r\n    if (this.renderedResolution_ > 0.5 * viewState.resolution) {\r\n      const altSources = this.getSources(\r\n        frameState.extent,\r\n        this.renderedResolution_,\r\n      ).filter((source) => !sources.includes(source));\r\n      if (altSources.length > 0) {\r\n        return this.renderSources(frameState, altSources);\r\n      }\r\n    }\r\n    return canvas;\r\n  }\r\n\r\n  /**\r\n   * Update the layer style.  The `updateStyleVariables` function is a more efficient\r\n   * way to update layer rendering.  In cases where the whole style needs to be updated,\r\n   * this method may be called instead.  Note that calling this method will also replace\r\n   * any previously set variables, so the new style also needs to include new variables,\r\n   * if needed.\r\n   * @param {Style} style The new style.\r\n   */\r\n  setStyle(style) {\r\n    this.styleVariables_ = style.variables || {};\r\n    this.style_ = style;\r\n    if (this.hasRenderer()) {\r\n      const parsedStyle = parseStyle(this.style_, this.getSourceBandCount_());\r\n      const renderer = this.getRenderer();\r\n      renderer.reset({\r\n        vertexShader: parsedStyle.vertexShader,\r\n        fragmentShader: parsedStyle.fragmentShader,\r\n        uniforms: parsedStyle.uniforms,\r\n        paletteTextures: parsedStyle.paletteTextures,\r\n      });\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update any variables used by the layer style and trigger a re-render.\r\n   * @param {Object<string, number>} variables Variables to update.\r\n   * @api\r\n   */\r\n  updateStyleVariables(variables) {\r\n    Object.assign(this.styleVariables_, variables);\r\n    this.changed();\r\n  }\r\n}\r\n\r\n/**\r\n * Clean up underlying WebGL resources.\r\n * @function\r\n * @api\r\n */\r\nWebGLTileLayer.prototype.dispose;\r\n\r\nexport default WebGLTileLayer;\r\n", "/**\r\n * @module ol/renderer/webgl/VectorLayer\r\n */\r\nimport ViewHint from '../../ViewHint.js';\r\nimport {assert} from '../../asserts.js';\r\nimport {listen, unlistenByKey} from '../../events.js';\r\nimport {buffer, createEmpty, equals} from '../../extent.js';\r\nimport BaseVector from '../../layer/BaseVector.js';\r\nimport {\r\n  getTransformFromProjections,\r\n  getUserProjection,\r\n  toUserExtent,\r\n  toUserResolution,\r\n} from '../../proj.js';\r\nimport MixedGeometryBatch from '../../render/webgl/MixedGeometryBatch.js';\r\nimport VectorStyleRenderer from '../../render/webgl/VectorStyleRenderer.js';\r\nimport {breakDownFlatStyle, colorDecodeId} from '../../render/webgl/utils.js';\r\nimport VectorEventType from '../../source/VectorEventType.js';\r\nimport {\r\n  apply as applyTransform,\r\n  create as createTransform,\r\n  makeInverse as makeInverseTransform,\r\n  multiply as multiplyTransform,\r\n  setFromArray as setFromTransform,\r\n  translate as translateTransform,\r\n} from '../../transform.js';\r\nimport {\r\n  create as createMat4,\r\n  fromTransform as mat4FromTransform,\r\n} from '../../vec/mat4.js';\r\nimport {DefaultUniform} from '../../webgl/Helper.js';\r\nimport WebGLRenderTarget from '../../webgl/RenderTarget.js';\r\nimport WebGLLayerRenderer from './Layer.js';\r\nimport {getWorldParameters} from './worldUtil.js';\r\n\r\nexport const Uniforms = {\r\n  ...DefaultUniform,\r\n  RENDER_EXTENT: 'u_renderExtent', // intersection of layer, source, and view extent\r\n  PATTERN_ORIGIN: 'u_patternOrigin',\r\n  GLOBAL_ALPHA: 'u_globalAlpha',\r\n};\r\n\r\n/**\r\n * @typedef {import('../../render/webgl/VectorStyleRenderer.js').AsShaders} StyleAsShaders\r\n */\r\n/**\r\n * @typedef {import('../../render/webgl/VectorStyleRenderer.js').AsRule} StyleAsRule\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {string} [className='ol-layer'] A CSS class name to set to the canvas element.\r\n * @property {import('../../style/flat.js').FlatStyleLike | Array<StyleAsShaders> | StyleAsShaders} style Flat vector style; also accepts shaders\r\n * @property {Object<string, number|Array<number>|string|boolean>} variables Style variables\r\n * @property {boolean} [disableHitDetection=false] Setting this to true will provide a slight performance boost, but will\r\n * prevent all hit detection on the layer.\r\n * @property {Array<import(\"./Layer\").PostProcessesOptions>} [postProcesses] Post-processes definitions\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Experimental WebGL vector renderer. Supports polygons, lines and points:\r\n *  Polygons are broken down into triangles\r\n *  Lines are rendered as strips of quads\r\n *  Points are rendered as quads\r\n *\r\n * You need to provide vertex and fragment shaders as well as custom attributes for each type of geometry. All shaders\r\n * can access the uniforms in the {@link module:ol/webgl/Helper~DefaultUniform} enum.\r\n * The vertex shaders can access the following attributes depending on the geometry type:\r\n *  For polygons: {@link module:ol/render/webgl/PolygonBatchRenderer~Attributes}\r\n *  For line strings: {@link module:ol/render/webgl/LineStringBatchRenderer~Attributes}\r\n *  For points: {@link module:ol/render/webgl/PointBatchRenderer~Attributes}\r\n *\r\n * Please note that the fragment shaders output should have premultiplied alpha, otherwise visual anomalies may occur.\r\n *\r\n * Note: this uses {@link module:ol/webgl/Helper~WebGLHelper} internally.\r\n */\r\nclass WebGLVectorLayerRenderer extends WebGLLayerRenderer {\r\n  /**\r\n   * @param {import(\"../../layer/Layer.js\").default} layer Layer.\r\n   * @param {Options} options Options.\r\n   */\r\n  constructor(layer, options) {\r\n    const uniforms = {\r\n      [Uniforms.RENDER_EXTENT]: [0, 0, 0, 0],\r\n      [Uniforms.PATTERN_ORIGIN]: [0, 0],\r\n      [Uniforms.GLOBAL_ALPHA]: 1,\r\n    };\r\n\r\n    super(layer, {\r\n      uniforms: uniforms,\r\n      postProcesses: options.postProcesses,\r\n    });\r\n\r\n    /**\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.hitDetectionEnabled_ = !options.disableHitDetection;\r\n\r\n    /**\r\n     * @type {WebGLRenderTarget}\r\n     * @private\r\n     */\r\n    this.hitRenderTarget_;\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    this.sourceRevision_ = -1;\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    this.previousExtent_ = createEmpty();\r\n\r\n    /**\r\n     * This transform is updated on every frame and is the composition of:\r\n     * - invert of the world->screen transform that was used when rebuilding buffers (see `this.renderTransform_`)\r\n     * - current world->screen transform\r\n     * @type {import(\"../../transform.js\").Transform}\r\n     * @private\r\n     */\r\n    this.currentTransform_ = createTransform();\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    this.tmpCoords_ = [0, 0];\r\n    /**\r\n     * @private\r\n     */\r\n    this.tmpTransform_ = createTransform();\r\n    /**\r\n     * @private\r\n     */\r\n    this.tmpMat4_ = createMat4();\r\n\r\n    /**\r\n     * @type {import(\"../../transform.js\").Transform}\r\n     * @private\r\n     */\r\n    this.currentFrameStateTransform_ = createTransform();\r\n\r\n    /**\r\n     * @type {import('../../style/flat.js').StyleVariables}\r\n     * @private\r\n     */\r\n    this.styleVariables_ = {};\r\n\r\n    /**\r\n     * @type {Array<StyleAsRule | StyleAsShaders>}\r\n     * @private\r\n     */\r\n    this.styles_ = [];\r\n\r\n    /**\r\n     * @type {Array<VectorStyleRenderer>}\r\n     * @private\r\n     */\r\n    this.styleRenderers_ = [];\r\n\r\n    /**\r\n     * @type {Array<import('../../render/webgl/VectorStyleRenderer.js').WebGLBuffers>}\r\n     * @private\r\n     */\r\n    this.buffers_ = [];\r\n\r\n    this.applyOptions_(options);\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    this.batch_ = new MixedGeometryBatch();\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.initialFeaturesAdded_ = false;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<import(\"../../events.js\").EventsKey|null>}\r\n     */\r\n    this.sourceListenKeys_ = null;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   */\r\n  addInitialFeatures_(frameState) {\r\n    const source = this.getLayer().getSource();\r\n    const userProjection = getUserProjection();\r\n    let projectionTransform;\r\n    if (userProjection) {\r\n      projectionTransform = getTransformFromProjections(\r\n        userProjection,\r\n        frameState.viewState.projection,\r\n      );\r\n    }\r\n    this.batch_.addFeatures(source.getFeatures(), projectionTransform);\r\n    this.sourceListenKeys_ = [\r\n      listen(\r\n        source,\r\n        VectorEventType.ADDFEATURE,\r\n        this.handleSourceFeatureAdded_.bind(this, projectionTransform),\r\n      ),\r\n      listen(\r\n        source,\r\n        VectorEventType.CHANGEFEATURE,\r\n        this.handleSourceFeatureChanged_,\r\n        this,\r\n      ),\r\n      listen(\r\n        source,\r\n        VectorEventType.REMOVEFEATURE,\r\n        this.handleSourceFeatureDelete_,\r\n        this,\r\n      ),\r\n      listen(\r\n        source,\r\n        VectorEventType.CLEAR,\r\n        this.handleSourceFeatureClear_,\r\n        this,\r\n      ),\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * @param {Options} options Options.\r\n   * @private\r\n   */\r\n  applyOptions_(options) {\r\n    this.styleVariables_ = options.variables;\r\n    this.styles_ = breakDownFlatStyle(options.style);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  createRenderers_() {\r\n    this.buffers_ = [];\r\n    this.styleRenderers_ = this.styles_.map(\r\n      (style) =>\r\n        new VectorStyleRenderer(\r\n          style,\r\n          this.styleVariables_,\r\n          this.helper,\r\n          this.hitDetectionEnabled_,\r\n          'filter' in style ? style.filter : null,\r\n        ),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  reset(options) {\r\n    this.applyOptions_(options);\r\n    if (this.helper) {\r\n      this.createRenderers_();\r\n    }\r\n    super.reset(options);\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  afterHelperCreated() {\r\n    if (this.styleRenderers_.length) {\r\n      // To reuse buffers\r\n      this.styleRenderers_.forEach((renderer, i) =>\r\n        renderer.setHelper(this.helper, this.buffers_[i]),\r\n      );\r\n    } else {\r\n      this.createRenderers_();\r\n    }\r\n\r\n    if (this.hitDetectionEnabled_) {\r\n      this.hitRenderTarget_ = new WebGLRenderTarget(this.helper);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../proj.js\").TransformFunction} projectionTransform Transform function.\r\n   * @param {import(\"../../source/Vector.js\").VectorSourceEvent} event Event.\r\n   * @private\r\n   */\r\n  handleSourceFeatureAdded_(projectionTransform, event) {\r\n    const feature = event.feature;\r\n    this.batch_.addFeature(feature, projectionTransform);\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../source/Vector.js\").VectorSourceEvent} event Event.\r\n   * @private\r\n   */\r\n  handleSourceFeatureChanged_(event) {\r\n    const feature = event.feature;\r\n    this.batch_.changeFeature(feature);\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../source/Vector.js\").VectorSourceEvent} event Event.\r\n   * @private\r\n   */\r\n  handleSourceFeatureDelete_(event) {\r\n    const feature = event.feature;\r\n    this.batch_.removeFeature(feature);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  handleSourceFeatureClear_() {\r\n    this.batch_.clear();\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../transform.js\").Transform} batchInvertTransform Inverse of the transformation in which geometries are expressed\r\n   * @private\r\n   */\r\n  applyUniforms_(batchInvertTransform) {\r\n    // world to screen matrix\r\n    setFromTransform(this.tmpTransform_, this.currentFrameStateTransform_);\r\n    multiplyTransform(this.tmpTransform_, batchInvertTransform);\r\n    this.helper.setUniformMatrixValue(\r\n      Uniforms.PROJECTION_MATRIX,\r\n      mat4FromTransform(this.tmpMat4_, this.tmpTransform_),\r\n    );\r\n\r\n    // screen to world matrix\r\n    makeInverseTransform(this.tmpTransform_, this.tmpTransform_);\r\n    this.helper.setUniformMatrixValue(\r\n      Uniforms.SCREEN_TO_WORLD_MATRIX,\r\n      mat4FromTransform(this.tmpMat4_, this.tmpTransform_),\r\n    );\r\n\r\n    // pattern origin should always be [0, 0] in world coordinates\r\n    this.tmpCoords_[0] = 0;\r\n    this.tmpCoords_[1] = 0;\r\n    makeInverseTransform(this.tmpTransform_, batchInvertTransform);\r\n    applyTransform(this.tmpTransform_, this.tmpCoords_);\r\n    this.helper.setUniformFloatVec2(Uniforms.PATTERN_ORIGIN, this.tmpCoords_);\r\n  }\r\n\r\n  /**\r\n   * Render the layer.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @return {HTMLElement} The rendered element.\r\n   * @override\r\n   */\r\n  renderFrame(frameState) {\r\n    const gl = this.helper.getGL();\r\n    this.preRender(gl, frameState);\r\n\r\n    const [startWorld, endWorld, worldWidth] = getWorldParameters(\r\n      frameState,\r\n      this.getLayer(),\r\n    );\r\n\r\n    // draw the normal canvas\r\n    this.helper.prepareDraw(frameState);\r\n    this.renderWorlds(frameState, false, startWorld, endWorld, worldWidth);\r\n    this.helper.finalizeDraw(\r\n      frameState,\r\n      this.dispatchPreComposeEvent,\r\n      this.dispatchPostComposeEvent,\r\n    );\r\n\r\n    const canvas = this.helper.getCanvas();\r\n\r\n    if (this.hitDetectionEnabled_) {\r\n      this.renderWorlds(frameState, true, startWorld, endWorld, worldWidth);\r\n      this.hitRenderTarget_.clearCachedData();\r\n    }\r\n\r\n    this.postRender(gl, frameState);\r\n\r\n    return canvas;\r\n  }\r\n\r\n  /**\r\n   * Determine whether renderFrame should be called.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @return {boolean} Layer is ready to be rendered.\r\n   * @override\r\n   */\r\n  prepareFrameInternal(frameState) {\r\n    if (!this.initialFeaturesAdded_) {\r\n      this.addInitialFeatures_(frameState);\r\n      this.initialFeaturesAdded_ = true;\r\n    }\r\n\r\n    const layer = this.getLayer();\r\n    const vectorSource = layer.getSource();\r\n    const viewState = frameState.viewState;\r\n    const viewNotMoving =\r\n      !frameState.viewHints[ViewHint.ANIMATING] &&\r\n      !frameState.viewHints[ViewHint.INTERACTING];\r\n    const extentChanged = !equals(this.previousExtent_, frameState.extent);\r\n    const sourceChanged = this.sourceRevision_ < vectorSource.getRevision();\r\n\r\n    if (sourceChanged) {\r\n      this.sourceRevision_ = vectorSource.getRevision();\r\n    }\r\n\r\n    if (viewNotMoving && (extentChanged || sourceChanged)) {\r\n      const projection = viewState.projection;\r\n      const resolution = viewState.resolution;\r\n\r\n      const renderBuffer =\r\n        layer instanceof BaseVector ? layer.getRenderBuffer() : 0;\r\n      const extent = buffer(frameState.extent, renderBuffer * resolution);\r\n\r\n      const userProjection = getUserProjection();\r\n      if (userProjection) {\r\n        vectorSource.loadFeatures(\r\n          toUserExtent(extent, userProjection),\r\n          toUserResolution(resolution, projection),\r\n          userProjection,\r\n        );\r\n      } else {\r\n        vectorSource.loadFeatures(extent, resolution, projection);\r\n      }\r\n\r\n      this.ready = false;\r\n\r\n      const transform = this.helper.makeProjectionTransform(\r\n        frameState,\r\n        createTransform(),\r\n      );\r\n\r\n      const generatePromises = this.styleRenderers_.map((renderer, i) =>\r\n        renderer.generateBuffers(this.batch_, transform).then((buffers) => {\r\n          if (this.buffers_[i]) {\r\n            this.disposeBuffers(this.buffers_[i]);\r\n          }\r\n          this.buffers_[i] = buffers;\r\n        }),\r\n      );\r\n      Promise.all(generatePromises).then(() => {\r\n        this.ready = true;\r\n        this.getLayer().changed();\r\n      });\r\n\r\n      this.previousExtent_ = frameState.extent.slice();\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Render the world, either to the main framebuffer or to the hit framebuffer\r\n   * @param {import(\"../../Map.js\").FrameState} frameState current frame state\r\n   * @param {boolean} forHitDetection whether the rendering is for hit detection\r\n   * @param {number} startWorld the world to render in the first iteration\r\n   * @param {number} endWorld the last world to render\r\n   * @param {number} worldWidth the width of the worlds being rendered\r\n   */\r\n  renderWorlds(frameState, forHitDetection, startWorld, endWorld, worldWidth) {\r\n    let world = startWorld;\r\n\r\n    if (forHitDetection) {\r\n      this.hitRenderTarget_.setSize([\r\n        Math.floor(frameState.size[0] / 2),\r\n        Math.floor(frameState.size[1] / 2),\r\n      ]);\r\n      this.helper.prepareDrawToRenderTarget(\r\n        frameState,\r\n        this.hitRenderTarget_,\r\n        true,\r\n      );\r\n    }\r\n\r\n    do {\r\n      this.helper.makeProjectionTransform(\r\n        frameState,\r\n        this.currentFrameStateTransform_,\r\n      );\r\n      translateTransform(\r\n        this.currentFrameStateTransform_,\r\n        world * worldWidth,\r\n        0,\r\n      );\r\n      for (let i = 0, ii = this.styleRenderers_.length; i < ii; i++) {\r\n        const renderer = this.styleRenderers_[i];\r\n        const buffers = this.buffers_[i];\r\n        if (!buffers) {\r\n          continue;\r\n        }\r\n        renderer.render(buffers, frameState, () => {\r\n          this.applyUniforms_(buffers.invertVerticesTransform);\r\n          this.helper.applyHitDetectionUniform(forHitDetection);\r\n        });\r\n      }\r\n    } while (++world < endWorld);\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @param {number} hitTolerance Hit tolerance in pixels.\r\n   * @param {import(\"../vector.js\").FeatureCallback<T>} callback Feature callback.\r\n   * @param {Array<import(\"../Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\r\n   * @return {T|undefined} Callback result.\r\n   * @template T\r\n   * @override\r\n   */\r\n  forEachFeatureAtCoordinate(\r\n    coordinate,\r\n    frameState,\r\n    hitTolerance,\r\n    callback,\r\n    matches,\r\n  ) {\r\n    assert(\r\n      this.hitDetectionEnabled_,\r\n      '`forEachFeatureAtCoordinate` cannot be used on a WebGL layer if the hit detection logic has been disabled using the `disableHitDetection: true` option.',\r\n    );\r\n    if (!this.styleRenderers_.length || !this.hitDetectionEnabled_) {\r\n      return undefined;\r\n    }\r\n\r\n    const pixel = applyTransform(\r\n      frameState.coordinateToPixelTransform,\r\n      coordinate.slice(),\r\n    );\r\n\r\n    const data = this.hitRenderTarget_.readPixel(pixel[0] / 2, pixel[1] / 2);\r\n    const color = [data[0] / 255, data[1] / 255, data[2] / 255, data[3] / 255];\r\n    const ref = colorDecodeId(color);\r\n    const feature = this.batch_.getFeatureFromRef(ref);\r\n    if (feature) {\r\n      return callback(feature, this.getLayer(), null);\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Will release a set of Webgl buffers\r\n   * @param {import('../../render/webgl/VectorStyleRenderer.js').WebGLBuffers} buffers Buffers\r\n   */\r\n  disposeBuffers(buffers) {\r\n    /**\r\n     * @param {Array<import('../../webgl/Buffer.js').default>} typeBuffers Buffers\r\n     */\r\n    const disposeBuffersOfType = (typeBuffers) => {\r\n      for (const buffer of typeBuffers) {\r\n        if (buffer) {\r\n          this.helper.deleteBuffer(buffer);\r\n        }\r\n      }\r\n    };\r\n    if (buffers.pointBuffers) {\r\n      disposeBuffersOfType(buffers.pointBuffers);\r\n    }\r\n    if (buffers.lineStringBuffers) {\r\n      disposeBuffersOfType(buffers.lineStringBuffers);\r\n    }\r\n    if (buffers.polygonBuffers) {\r\n      disposeBuffersOfType(buffers.polygonBuffers);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clean up.\r\n   * @override\r\n   */\r\n  disposeInternal() {\r\n    this.buffers_.forEach((buffers) => {\r\n      if (buffers) {\r\n        this.disposeBuffers(buffers);\r\n      }\r\n    });\r\n    if (this.sourceListenKeys_) {\r\n      this.sourceListenKeys_.forEach(function (key) {\r\n        unlistenByKey(key);\r\n      });\r\n      this.sourceListenKeys_ = null;\r\n    }\r\n    super.disposeInternal();\r\n  }\r\n}\r\n\r\nexport default WebGLVectorLayerRenderer;\r\n", "/**\r\n * @module ol/render/webgl/MixedGeometryBatch\r\n */\r\nimport {inflateEnds} from '../../geom/flat/orient.js';\r\nimport RenderFeature from '../../render/Feature.js';\r\nimport {getUid} from '../../util.js';\r\n\r\n/**\r\n * @typedef {import(\"../../Feature.js\").default} Feature\r\n */\r\n/**\r\n * @typedef {import(\"../../geom/Geometry.js\").Type} GeometryType\r\n */\r\n\r\n/**\r\n * @typedef {Object} GeometryBatchItem Object that holds a reference to a feature as well as the raw coordinates of its various geometries\r\n * @property {Feature|RenderFeature} feature Feature\r\n * @property {Array<Array<number>>} flatCoordss Array of flat coordinates arrays, one for each geometry related to the feature\r\n * @property {number} [verticesCount] Only defined for linestring and polygon batches\r\n * @property {number} [ringsCount] Only defined for polygon batches\r\n * @property {Array<Array<number>>} [ringsVerticesCounts] Array of vertices counts in each ring for each geometry; only defined for polygons batches\r\n * @property {number} [ref] The reference in the global batch (used for hit detection)\r\n */\r\n\r\n/**\r\n * @typedef {PointGeometryBatch|LineStringGeometryBatch|PolygonGeometryBatch} GeometryBatch\r\n */\r\n\r\n/**\r\n * @typedef {Object} PolygonGeometryBatch A geometry batch specific to polygons\r\n * @property {Object<string, GeometryBatchItem>} entries Dictionary of all entries in the batch with associated computed values.\r\n * One entry corresponds to one feature. Key is feature uid.\r\n * @property {number} geometriesCount Amount of geometries in the batch.\r\n * @property {number} verticesCount Amount of vertices from geometries in the batch.\r\n * @property {number} ringsCount How many outer and inner rings in this batch.\r\n */\r\n\r\n/**\r\n * @typedef {Object} LineStringGeometryBatch A geometry batch specific to lines\r\n * @property {Object<string, GeometryBatchItem>} entries Dictionary of all entries in the batch with associated computed values.\r\n * One entry corresponds to one feature. Key is feature uid.\r\n * @property {number} geometriesCount Amount of geometries in the batch.\r\n * @property {number} verticesCount Amount of vertices from geometries in the batch.\r\n */\r\n\r\n/**\r\n * @typedef {Object} PointGeometryBatch A geometry batch specific to points\r\n * @property {Object<string, GeometryBatchItem>} entries Dictionary of all entries in the batch with associated computed values.\r\n * One entry corresponds to one feature. Key is feature uid.\r\n * @property {number} geometriesCount Amount of geometries in the batch.\r\n */\r\n\r\n/**\r\n * @classdesc This class is used to group several geometries of various types together for faster rendering.\r\n * Three inner batches are maintained for polygons, lines and points. Each time a feature is added, changed or removed\r\n * from the batch, these inner batches are modified accordingly in order to keep them up-to-date.\r\n *\r\n * A feature can be present in several inner batches, for example a polygon geometry will be present in the polygon batch\r\n * and its linear rings will be present in the line batch. Multi geometries are also broken down into individual geometries\r\n * and added to the corresponding batches in a recursive manner.\r\n *\r\n * Corresponding {@link module:ol/render/webgl/BatchRenderer} instances are then used to generate the render instructions\r\n * and WebGL buffers (vertices and indices) for each inner batches; render instructions are stored on the inner batches,\r\n * alongside the transform used to convert world coords to screen coords at the time these instructions were generated.\r\n * The resulting WebGL buffers are stored on the batches as well.\r\n *\r\n * An important aspect of geometry batches is that there is no guarantee that render instructions and WebGL buffers\r\n * are synchronized, i.e. render instructions can describe a new state while WebGL buffers might not have been written yet.\r\n * This is why two world-to-screen transforms are stored on each batch: one for the render instructions and one for\r\n * the WebGL buffers.\r\n */\r\nclass MixedGeometryBatch {\r\n  constructor() {\r\n    /**\r\n     * @private\r\n     */\r\n    this.globalCounter_ = 0;\r\n\r\n    /**\r\n     * Refs are used as keys for hit detection.\r\n     * @type {Map<number, Feature|RenderFeature>}\r\n     * @private\r\n     */\r\n    this.refToFeature_ = new Map();\r\n\r\n    /**\r\n     * Features are split in \"entries\", which are individual geometries. We use the following map to share a single ref for all those entries.\r\n     * @type {Map<string, number>}\r\n     * @private\r\n     */\r\n    this.uidToRef_ = new Map();\r\n\r\n    /**\r\n     * The precision in WebGL shaders is limited.\r\n     * To keep the refs as small as possible we maintain an array of freed up references.\r\n     * @type {Array<number>}\r\n     * @private\r\n     */\r\n    this.freeGlobalRef_ = [];\r\n\r\n    /**\r\n     * @type {PolygonGeometryBatch}\r\n     */\r\n    this.polygonBatch = {\r\n      entries: {},\r\n      geometriesCount: 0,\r\n      verticesCount: 0,\r\n      ringsCount: 0,\r\n    };\r\n\r\n    /**\r\n     * @type {PointGeometryBatch}\r\n     */\r\n    this.pointBatch = {\r\n      entries: {},\r\n      geometriesCount: 0,\r\n    };\r\n\r\n    /**\r\n     * @type {LineStringGeometryBatch}\r\n     */\r\n    this.lineStringBatch = {\r\n      entries: {},\r\n      geometriesCount: 0,\r\n      verticesCount: 0,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @param {Array<Feature|RenderFeature>} features Array of features to add to the batch\r\n   * @param {import(\"../../proj.js\").TransformFunction} [projectionTransform] Projection transform.\r\n   */\r\n  addFeatures(features, projectionTransform) {\r\n    for (let i = 0; i < features.length; i++) {\r\n      this.addFeature(features[i], projectionTransform);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Feature|RenderFeature} feature Feature to add to the batch\r\n   * @param {import(\"../../proj.js\").TransformFunction} [projectionTransform] Projection transform.\r\n   */\r\n  addFeature(feature, projectionTransform) {\r\n    let geometry = feature.getGeometry();\r\n    if (!geometry) {\r\n      return;\r\n    }\r\n    if (projectionTransform) {\r\n      geometry = geometry.clone();\r\n      geometry.applyTransform(projectionTransform);\r\n    }\r\n    this.addGeometry_(geometry, feature);\r\n  }\r\n\r\n  /**\r\n   * @param {Feature|RenderFeature} feature Feature\r\n   * @return {GeometryBatchItem|void} the cleared entry\r\n   * @private\r\n   */\r\n  clearFeatureEntryInPointBatch_(feature) {\r\n    const featureUid = getUid(feature);\r\n    const entry = this.pointBatch.entries[featureUid];\r\n    if (!entry) {\r\n      return;\r\n    }\r\n    this.pointBatch.geometriesCount -= entry.flatCoordss.length;\r\n    delete this.pointBatch.entries[featureUid];\r\n    return entry;\r\n  }\r\n\r\n  /**\r\n   * @param {Feature|RenderFeature} feature Feature\r\n   * @return {GeometryBatchItem|void} the cleared entry\r\n   * @private\r\n   */\r\n  clearFeatureEntryInLineStringBatch_(feature) {\r\n    const featureUid = getUid(feature);\r\n    const entry = this.lineStringBatch.entries[featureUid];\r\n    if (!entry) {\r\n      return;\r\n    }\r\n    this.lineStringBatch.verticesCount -= entry.verticesCount;\r\n    this.lineStringBatch.geometriesCount -= entry.flatCoordss.length;\r\n    delete this.lineStringBatch.entries[featureUid];\r\n    return entry;\r\n  }\r\n\r\n  /**\r\n   * @param {Feature|RenderFeature} feature Feature\r\n   * @return {GeometryBatchItem|void} the cleared entry\r\n   * @private\r\n   */\r\n  clearFeatureEntryInPolygonBatch_(feature) {\r\n    const featureUid = getUid(feature);\r\n    const entry = this.polygonBatch.entries[featureUid];\r\n    if (!entry) {\r\n      return;\r\n    }\r\n    this.polygonBatch.verticesCount -= entry.verticesCount;\r\n    this.polygonBatch.ringsCount -= entry.ringsCount;\r\n    this.polygonBatch.geometriesCount -= entry.flatCoordss.length;\r\n    delete this.polygonBatch.entries[featureUid];\r\n    return entry;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../geom.js\").Geometry|RenderFeature} geometry Geometry\r\n   * @param {Feature|RenderFeature} feature Feature\r\n   * @private\r\n   */\r\n  addGeometry_(geometry, feature) {\r\n    const type = geometry.getType();\r\n    switch (type) {\r\n      case 'GeometryCollection': {\r\n        const geometries =\r\n          /** @type {import(\"../../geom.js\").GeometryCollection} */ (\r\n            geometry\r\n          ).getGeometriesArray();\r\n        for (const geometry of geometries) {\r\n          this.addGeometry_(geometry, feature);\r\n        }\r\n        break;\r\n      }\r\n      case 'MultiPolygon': {\r\n        const multiPolygonGeom =\r\n          /** @type {import(\"../../geom.js\").MultiPolygon} */ (geometry);\r\n        this.addCoordinates_(\r\n          type,\r\n          multiPolygonGeom.getFlatCoordinates(),\r\n          multiPolygonGeom.getEndss(),\r\n          feature,\r\n          getUid(feature),\r\n          multiPolygonGeom.getStride(),\r\n        );\r\n        break;\r\n      }\r\n      case 'MultiLineString': {\r\n        const multiLineGeom =\r\n          /** @type {import(\"../../geom.js\").MultiLineString|RenderFeature} */ (\r\n            geometry\r\n          );\r\n        this.addCoordinates_(\r\n          type,\r\n          multiLineGeom.getFlatCoordinates(),\r\n          multiLineGeom.getEnds(),\r\n          feature,\r\n          getUid(feature),\r\n          multiLineGeom.getStride(),\r\n        );\r\n        break;\r\n      }\r\n      case 'MultiPoint': {\r\n        const multiPointGeom =\r\n          /** @type {import(\"../../geom.js\").MultiPoint|RenderFeature} */ (\r\n            geometry\r\n          );\r\n        this.addCoordinates_(\r\n          type,\r\n          multiPointGeom.getFlatCoordinates(),\r\n          null,\r\n          feature,\r\n          getUid(feature),\r\n          multiPointGeom.getStride(),\r\n        );\r\n        break;\r\n      }\r\n      case 'Polygon': {\r\n        const polygonGeom =\r\n          /** @type {import(\"../../geom.js\").Polygon|RenderFeature} */ (\r\n            geometry\r\n          );\r\n        this.addCoordinates_(\r\n          type,\r\n          polygonGeom.getFlatCoordinates(),\r\n          polygonGeom.getEnds(),\r\n          feature,\r\n          getUid(feature),\r\n          polygonGeom.getStride(),\r\n        );\r\n        break;\r\n      }\r\n      case 'Point': {\r\n        const pointGeom = /** @type {import(\"../../geom.js\").Point} */ (\r\n          geometry\r\n        );\r\n        this.addCoordinates_(\r\n          type,\r\n          pointGeom.getFlatCoordinates(),\r\n          null,\r\n          feature,\r\n          getUid(feature),\r\n          pointGeom.getStride(),\r\n        );\r\n        break;\r\n      }\r\n      case 'LineString':\r\n      case 'LinearRing': {\r\n        const lineGeom = /** @type {import(\"../../geom.js\").LineString} */ (\r\n          geometry\r\n        );\r\n\r\n        const stride = lineGeom.getStride();\r\n\r\n        this.addCoordinates_(\r\n          type,\r\n          lineGeom.getFlatCoordinates(),\r\n          null,\r\n          feature,\r\n          getUid(feature),\r\n          stride,\r\n          lineGeom.getLayout?.(),\r\n        );\r\n        break;\r\n      }\r\n      default:\r\n      // pass\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {GeometryType} type Geometry type\r\n   * @param {Array<number>} flatCoords Flat coordinates\r\n   * @param {Array<number> | Array<Array<number>> | null} ends Coordinate ends\r\n   * @param {Feature|RenderFeature} feature Feature\r\n   * @param {string} featureUid Feature uid\r\n   * @param {number} stride Stride\r\n   * @param {import('../../geom/Geometry.js').GeometryLayout} [layout] Layout\r\n   * @private\r\n   */\r\n  addCoordinates_(type, flatCoords, ends, feature, featureUid, stride, layout) {\r\n    /** @type {number} */\r\n    let verticesCount;\r\n    switch (type) {\r\n      case 'MultiPolygon': {\r\n        const multiPolygonEndss = /** @type {Array<Array<number>>} */ (ends);\r\n        for (let i = 0, ii = multiPolygonEndss.length; i < ii; i++) {\r\n          let polygonEnds = multiPolygonEndss[i];\r\n          const prevPolygonEnds = i > 0 ? multiPolygonEndss[i - 1] : null;\r\n          const startIndex = prevPolygonEnds\r\n            ? prevPolygonEnds[prevPolygonEnds.length - 1]\r\n            : 0;\r\n          const endIndex = polygonEnds[polygonEnds.length - 1];\r\n          polygonEnds =\r\n            startIndex > 0\r\n              ? polygonEnds.map((end) => end - startIndex)\r\n              : polygonEnds;\r\n          this.addCoordinates_(\r\n            'Polygon',\r\n            flatCoords.slice(startIndex, endIndex),\r\n            polygonEnds,\r\n            feature,\r\n            featureUid,\r\n            stride,\r\n            layout,\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case 'MultiLineString': {\r\n        const multiLineEnds = /** @type {Array<number>} */ (ends);\r\n        for (let i = 0, ii = multiLineEnds.length; i < ii; i++) {\r\n          const startIndex = i > 0 ? multiLineEnds[i - 1] : 0;\r\n          this.addCoordinates_(\r\n            'LineString',\r\n            flatCoords.slice(startIndex, multiLineEnds[i]),\r\n            null,\r\n            feature,\r\n            featureUid,\r\n            stride,\r\n            layout,\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case 'MultiPoint':\r\n        for (let i = 0, ii = flatCoords.length; i < ii; i += stride) {\r\n          this.addCoordinates_(\r\n            'Point',\r\n            flatCoords.slice(i, i + 2),\r\n            null,\r\n            feature,\r\n            featureUid,\r\n            null,\r\n            null,\r\n          );\r\n        }\r\n        break;\r\n      case 'Polygon': {\r\n        const polygonEnds = /** @type {Array<number>} */ (ends);\r\n        if (feature instanceof RenderFeature) {\r\n          const multiPolygonEnds = inflateEnds(flatCoords, polygonEnds);\r\n          if (multiPolygonEnds.length > 1) {\r\n            this.addCoordinates_(\r\n              'MultiPolygon',\r\n              flatCoords,\r\n              multiPolygonEnds,\r\n              feature,\r\n              featureUid,\r\n              stride,\r\n              layout,\r\n            );\r\n            return;\r\n          }\r\n        }\r\n        if (!this.polygonBatch.entries[featureUid]) {\r\n          this.polygonBatch.entries[featureUid] = this.addRefToEntry_(\r\n            featureUid,\r\n            {\r\n              feature: feature,\r\n              flatCoordss: [],\r\n              verticesCount: 0,\r\n              ringsCount: 0,\r\n              ringsVerticesCounts: [],\r\n            },\r\n          );\r\n        }\r\n        verticesCount = flatCoords.length / stride;\r\n        const ringsCount = ends.length;\r\n        const ringsVerticesCount = ends.map((end, ind, arr) =>\r\n          ind > 0 ? (end - arr[ind - 1]) / stride : end / stride,\r\n        );\r\n        this.polygonBatch.verticesCount += verticesCount;\r\n        this.polygonBatch.ringsCount += ringsCount;\r\n        this.polygonBatch.geometriesCount++;\r\n        this.polygonBatch.entries[featureUid].flatCoordss.push(\r\n          getFlatCoordinatesXY(flatCoords, stride),\r\n        );\r\n        this.polygonBatch.entries[featureUid].ringsVerticesCounts.push(\r\n          ringsVerticesCount,\r\n        );\r\n        this.polygonBatch.entries[featureUid].verticesCount += verticesCount;\r\n        this.polygonBatch.entries[featureUid].ringsCount += ringsCount;\r\n        for (let i = 0, ii = polygonEnds.length; i < ii; i++) {\r\n          const startIndex = i > 0 ? polygonEnds[i - 1] : 0;\r\n          this.addCoordinates_(\r\n            'LinearRing',\r\n            flatCoords.slice(startIndex, polygonEnds[i]),\r\n            null,\r\n            feature,\r\n            featureUid,\r\n            stride,\r\n            layout,\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case 'Point':\r\n        if (!this.pointBatch.entries[featureUid]) {\r\n          this.pointBatch.entries[featureUid] = this.addRefToEntry_(\r\n            featureUid,\r\n            {\r\n              feature: feature,\r\n              flatCoordss: [],\r\n            },\r\n          );\r\n        }\r\n        this.pointBatch.geometriesCount++;\r\n        this.pointBatch.entries[featureUid].flatCoordss.push(flatCoords);\r\n        break;\r\n      case 'LineString':\r\n      case 'LinearRing':\r\n        if (!this.lineStringBatch.entries[featureUid]) {\r\n          this.lineStringBatch.entries[featureUid] = this.addRefToEntry_(\r\n            featureUid,\r\n            {\r\n              feature: feature,\r\n              flatCoordss: [],\r\n              verticesCount: 0,\r\n            },\r\n          );\r\n        }\r\n        verticesCount = flatCoords.length / stride;\r\n        this.lineStringBatch.verticesCount += verticesCount;\r\n        this.lineStringBatch.geometriesCount++;\r\n        this.lineStringBatch.entries[featureUid].flatCoordss.push(\r\n          getFlatCoordinatesXYM(flatCoords, stride, layout),\r\n        );\r\n        this.lineStringBatch.entries[featureUid].verticesCount += verticesCount;\r\n        break;\r\n      default:\r\n      // pass\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {string} featureUid Feature uid\r\n   * @param {GeometryBatchItem} entry The entry to add\r\n   * @return {GeometryBatchItem} the added entry\r\n   * @private\r\n   */\r\n  addRefToEntry_(featureUid, entry) {\r\n    const currentRef = this.uidToRef_.get(featureUid);\r\n\r\n    // the ref starts at 1 to distinguish from white color (no feature)\r\n    const ref =\r\n      currentRef || this.freeGlobalRef_.pop() || ++this.globalCounter_;\r\n    entry.ref = ref;\r\n    if (!currentRef) {\r\n      this.refToFeature_.set(ref, entry.feature);\r\n      this.uidToRef_.set(featureUid, ref);\r\n    }\r\n    return entry;\r\n  }\r\n\r\n  /**\r\n   * Return a ref to the pool of available refs.\r\n   * @param {number} ref the ref to return\r\n   * @param {string} featureUid the feature uid\r\n   * @private\r\n   */\r\n  returnRef_(ref, featureUid) {\r\n    if (!ref) {\r\n      throw new Error('This feature has no ref: ' + featureUid);\r\n    }\r\n    this.refToFeature_.delete(ref);\r\n    this.uidToRef_.delete(featureUid);\r\n    this.freeGlobalRef_.push(ref);\r\n  }\r\n\r\n  /**\r\n   * @param {Feature|RenderFeature} feature Feature\r\n   */\r\n  changeFeature(feature) {\r\n    this.removeFeature(feature);\r\n    const geometry = feature.getGeometry();\r\n    if (!geometry) {\r\n      return;\r\n    }\r\n    this.addGeometry_(geometry, feature);\r\n  }\r\n\r\n  /**\r\n   * @param {Feature|RenderFeature} feature Feature\r\n   */\r\n  removeFeature(feature) {\r\n    let entry = this.clearFeatureEntryInPointBatch_(feature);\r\n    entry = this.clearFeatureEntryInPolygonBatch_(feature) || entry;\r\n    entry = this.clearFeatureEntryInLineStringBatch_(feature) || entry;\r\n    if (entry) {\r\n      this.returnRef_(entry.ref, getUid(entry.feature));\r\n    }\r\n  }\r\n\r\n  clear() {\r\n    this.polygonBatch.entries = {};\r\n    this.polygonBatch.geometriesCount = 0;\r\n    this.polygonBatch.verticesCount = 0;\r\n    this.polygonBatch.ringsCount = 0;\r\n    this.lineStringBatch.entries = {};\r\n    this.lineStringBatch.geometriesCount = 0;\r\n    this.lineStringBatch.verticesCount = 0;\r\n    this.pointBatch.entries = {};\r\n    this.pointBatch.geometriesCount = 0;\r\n    this.globalCounter_ = 0;\r\n    this.freeGlobalRef_ = [];\r\n    this.refToFeature_.clear();\r\n    this.uidToRef_.clear();\r\n  }\r\n\r\n  /**\r\n   * Resolve the feature associated to a ref.\r\n   * @param {number} ref Hit detected ref\r\n   * @return {Feature|RenderFeature} feature\r\n   */\r\n  getFeatureFromRef(ref) {\r\n    return this.refToFeature_.get(ref);\r\n  }\r\n\r\n  isEmpty() {\r\n    return this.globalCounter_ === 0;\r\n  }\r\n\r\n  /**\r\n   * Will return a new instance of this class that only contains the features\r\n   * for which the provided callback returned true\r\n   * @param {function((Feature|RenderFeature)): boolean} featureFilter Feature filter callback\r\n   * @return {MixedGeometryBatch} Filtered geometry batch\r\n   */\r\n  filter(featureFilter) {\r\n    const filtered = new MixedGeometryBatch();\r\n    for (const feature of this.refToFeature_.values()) {\r\n      if (featureFilter(feature)) {\r\n        filtered.addFeature(feature);\r\n      }\r\n    }\r\n    return filtered;\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoords Flat coords\r\n * @param {number} stride Stride\r\n * @return {Array<number>} Flat coords with only XY components\r\n */\r\nfunction getFlatCoordinatesXY(flatCoords, stride) {\r\n  if (stride === 2) {\r\n    return flatCoords;\r\n  }\r\n  return flatCoords.filter((v, i) => i % stride < 2);\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoords Flat coords\r\n * @param {number} stride Stride\r\n * @param {string} layout Layout\r\n * @return {Array<number>} Flat coords with only XY components\r\n */\r\nfunction getFlatCoordinatesXYM(flatCoords, stride, layout) {\r\n  if (stride === 3 && layout === 'XYM') {\r\n    return flatCoords;\r\n  }\r\n  // this is XYZM layout\r\n  if (stride === 4) {\r\n    return flatCoords.filter((v, i) => i % stride !== 2);\r\n  }\r\n  // this is XYZ layout\r\n  if (stride === 3) {\r\n    return flatCoords.map((v, i) => (i % stride !== 2 ? v : 0));\r\n  }\r\n  // this is XY layout\r\n  return new Array(flatCoords.length * 1.5)\r\n    .fill(0)\r\n    .map((v, i) => (i % 3 === 2 ? 0 : flatCoords[Math.round(i / 1.5)]));\r\n}\r\n\r\nexport default MixedGeometryBatch;\r\n", "/**\r\n * @module ol/render/webgl/renderinstructions\r\n */\r\nimport {transform2D} from '../../geom/flat/transform.js';\r\nimport {apply as applyTransform} from '../../transform.js';\r\n\r\n/**\r\n * @param {Float32Array} renderInstructions Render instructions\r\n * @param {import('./VectorStyleRenderer.js').AttributeDefinitions} customAttributes Custom attributes\r\n * @param {import(\"./MixedGeometryBatch.js\").GeometryBatchItem} batchEntry Batch item\r\n * @param {number} currentIndex Current index\r\n * @return {number} The amount of values pushed\r\n */\r\nfunction pushCustomAttributesInRenderInstructions(\r\n  renderInstructions,\r\n  customAttributes,\r\n  batchEntry,\r\n  currentIndex,\r\n) {\r\n  let shift = 0;\r\n  for (const key in customAttributes) {\r\n    const attr = customAttributes[key];\r\n    const value = attr.callback.call(batchEntry, batchEntry.feature);\r\n    renderInstructions[currentIndex + shift++] = value?.[0] ?? value;\r\n    if (!attr.size || attr.size === 1) {\r\n      continue;\r\n    }\r\n    renderInstructions[currentIndex + shift++] = value[1];\r\n    if (attr.size < 3) {\r\n      continue;\r\n    }\r\n    renderInstructions[currentIndex + shift++] = value[2];\r\n    if (attr.size < 4) {\r\n      continue;\r\n    }\r\n    renderInstructions[currentIndex + shift++] = value[3];\r\n  }\r\n  return shift;\r\n}\r\n\r\n/**\r\n * @param {import('./VectorStyleRenderer.js').AttributeDefinitions} customAttributes Custom attributes\r\n * @return {number} Cumulated size of all attributes\r\n */\r\nexport function getCustomAttributesSize(customAttributes) {\r\n  return Object.keys(customAttributes).reduce(\r\n    (prev, curr) => prev + (customAttributes[curr].size || 1),\r\n    0,\r\n  );\r\n}\r\n\r\n/**\r\n * Render instructions for lines are structured like so:\r\n * [ x0, y0, customAttr0, ... , xN, yN, customAttrN ]\r\n * @param {import(\"./MixedGeometryBatch.js\").PointGeometryBatch} batch Point geometry batch\r\n * @param {Float32Array} renderInstructions Render instructions\r\n * @param {import('./VectorStyleRenderer.js').AttributeDefinitions} customAttributes Custom attributes\r\n * @param {import(\"../../transform.js\").Transform} transform Transform to apply to coordinates\r\n * @return {Float32Array} Generated render instructions\r\n */\r\nexport function generatePointRenderInstructions(\r\n  batch,\r\n  renderInstructions,\r\n  customAttributes,\r\n  transform,\r\n) {\r\n  // here we anticipate the amount of render instructions for points:\r\n  // 2 instructions per vertex for position (x and y)\r\n  // + 1 instruction per vertex per custom attributes\r\n  const totalInstructionsCount =\r\n    (2 + getCustomAttributesSize(customAttributes)) * batch.geometriesCount;\r\n  if (\r\n    !renderInstructions ||\r\n    renderInstructions.length !== totalInstructionsCount\r\n  ) {\r\n    renderInstructions = new Float32Array(totalInstructionsCount);\r\n  }\r\n\r\n  // loop on features to fill the render instructions\r\n  const tmpCoords = [];\r\n  let renderIndex = 0;\r\n  for (const featureUid in batch.entries) {\r\n    const batchEntry = batch.entries[featureUid];\r\n    for (let i = 0, ii = batchEntry.flatCoordss.length; i < ii; i++) {\r\n      tmpCoords[0] = batchEntry.flatCoordss[i][0];\r\n      tmpCoords[1] = batchEntry.flatCoordss[i][1];\r\n      applyTransform(transform, tmpCoords);\r\n\r\n      renderInstructions[renderIndex++] = tmpCoords[0];\r\n      renderInstructions[renderIndex++] = tmpCoords[1];\r\n      renderIndex += pushCustomAttributesInRenderInstructions(\r\n        renderInstructions,\r\n        customAttributes,\r\n        batchEntry,\r\n        renderIndex,\r\n      );\r\n    }\r\n  }\r\n  return renderInstructions;\r\n}\r\n\r\n/**\r\n * Render instructions for lines are structured like so:\r\n * [ customAttr0, ... , customAttrN, numberOfVertices0, x0, y0, ... , xN, yN, numberOfVertices1, ... ]\r\n * @param {import(\"./MixedGeometryBatch.js\").LineStringGeometryBatch} batch Line String geometry batch\r\n * @param {Float32Array} renderInstructions Render instructions\r\n * @param {import('./VectorStyleRenderer.js').AttributeDefinitions} customAttributes Custom attributes\r\n * @param {import(\"../../transform.js\").Transform} transform Transform to apply to coordinates\r\n * @return {Float32Array} Generated render instructions\r\n */\r\nexport function generateLineStringRenderInstructions(\r\n  batch,\r\n  renderInstructions,\r\n  customAttributes,\r\n  transform,\r\n) {\r\n  // here we anticipate the amount of render instructions for lines:\r\n  // 3 instructions per vertex for position (x, y and m)\r\n  // + 1 instruction per line per custom attributes\r\n  // + 1 instruction per line (for vertices count)\r\n  const totalInstructionsCount =\r\n    3 * batch.verticesCount +\r\n    (1 + getCustomAttributesSize(customAttributes)) * batch.geometriesCount;\r\n  if (\r\n    !renderInstructions ||\r\n    renderInstructions.length !== totalInstructionsCount\r\n  ) {\r\n    renderInstructions = new Float32Array(totalInstructionsCount);\r\n  }\r\n\r\n  // loop on features to fill the render instructions\r\n  const flatCoords = [];\r\n  let renderIndex = 0;\r\n  for (const featureUid in batch.entries) {\r\n    const batchEntry = batch.entries[featureUid];\r\n    for (let i = 0, ii = batchEntry.flatCoordss.length; i < ii; i++) {\r\n      flatCoords.length = batchEntry.flatCoordss[i].length;\r\n      transform2D(\r\n        batchEntry.flatCoordss[i],\r\n        0,\r\n        flatCoords.length,\r\n        3,\r\n        transform,\r\n        flatCoords,\r\n        3,\r\n      );\r\n      renderIndex += pushCustomAttributesInRenderInstructions(\r\n        renderInstructions,\r\n        customAttributes,\r\n        batchEntry,\r\n        renderIndex,\r\n      );\r\n\r\n      // vertices count\r\n      renderInstructions[renderIndex++] = flatCoords.length / 3;\r\n\r\n      // looping on points for positions\r\n      for (let j = 0, jj = flatCoords.length; j < jj; j += 3) {\r\n        renderInstructions[renderIndex++] = flatCoords[j];\r\n        renderInstructions[renderIndex++] = flatCoords[j + 1];\r\n        renderInstructions[renderIndex++] = flatCoords[j + 2];\r\n      }\r\n    }\r\n  }\r\n  return renderInstructions;\r\n}\r\n\r\n/**\r\n * Render instructions for polygons are structured like so:\r\n * [ customAttr0, ..., customAttrN, numberOfRings, numberOfVerticesInRing0, ..., numberOfVerticesInRingN, x0, y0, ..., xN, yN, numberOfRings,... ]\r\n * @param {import(\"./MixedGeometryBatch.js\").PolygonGeometryBatch} batch Polygon geometry batch\r\n * @param {Float32Array} renderInstructions Render instructions\r\n * @param {import('./VectorStyleRenderer.js').AttributeDefinitions} customAttributes Custom attributes\r\n * @param {import(\"../../transform.js\").Transform} transform Transform to apply to coordinates\r\n * @return {Float32Array} Generated render instructions\r\n */\r\nexport function generatePolygonRenderInstructions(\r\n  batch,\r\n  renderInstructions,\r\n  customAttributes,\r\n  transform,\r\n) {\r\n  // here we anticipate the amount of render instructions for polygons:\r\n  // 2 instructions per vertex for position (x and y)\r\n  // + 1 instruction per polygon per custom attributes\r\n  // + 1 instruction per polygon (for vertices count in polygon)\r\n  // + 1 instruction per ring (for vertices count in ring)\r\n  const totalInstructionsCount =\r\n    2 * batch.verticesCount +\r\n    (1 + getCustomAttributesSize(customAttributes)) * batch.geometriesCount +\r\n    batch.ringsCount;\r\n  if (\r\n    !renderInstructions ||\r\n    renderInstructions.length !== totalInstructionsCount\r\n  ) {\r\n    renderInstructions = new Float32Array(totalInstructionsCount);\r\n  }\r\n\r\n  // loop on features to fill the render instructions\r\n  const flatCoords = [];\r\n  let renderIndex = 0;\r\n  for (const featureUid in batch.entries) {\r\n    const batchEntry = batch.entries[featureUid];\r\n    for (let i = 0, ii = batchEntry.flatCoordss.length; i < ii; i++) {\r\n      flatCoords.length = batchEntry.flatCoordss[i].length;\r\n      transform2D(\r\n        batchEntry.flatCoordss[i],\r\n        0,\r\n        flatCoords.length,\r\n        2,\r\n        transform,\r\n        flatCoords,\r\n      );\r\n      renderIndex += pushCustomAttributesInRenderInstructions(\r\n        renderInstructions,\r\n        customAttributes,\r\n        batchEntry,\r\n        renderIndex,\r\n      );\r\n\r\n      // ring count\r\n      renderInstructions[renderIndex++] =\r\n        batchEntry.ringsVerticesCounts[i].length;\r\n\r\n      // vertices count in each ring\r\n      for (\r\n        let j = 0, jj = batchEntry.ringsVerticesCounts[i].length;\r\n        j < jj;\r\n        j++\r\n      ) {\r\n        renderInstructions[renderIndex++] =\r\n          batchEntry.ringsVerticesCounts[i][j];\r\n      }\r\n\r\n      // looping on points for positions\r\n      for (let j = 0, jj = flatCoords.length; j < jj; j += 2) {\r\n        renderInstructions[renderIndex++] = flatCoords[j];\r\n        renderInstructions[renderIndex++] = flatCoords[j + 1];\r\n      }\r\n    }\r\n  }\r\n  return renderInstructions;\r\n}\r\n", "/**\r\n * @module ol/render/webgl/VectorStyleRenderer\r\n */\r\nimport {buildExpression, newEvaluationContext} from '../../expr/cpu.js';\r\nimport {\r\n  BooleanType,\r\n  computeGeometryType,\r\n  newParsingContext,\r\n} from '../../expr/expression.js';\r\nimport {\r\n  create as createTransform,\r\n  makeInverse as makeInverseTransform,\r\n} from '../../transform.js';\r\nimport WebGLArrayBuffer from '../../webgl/Buffer.js';\r\nimport {AttributeType} from '../../webgl/Helper.js';\r\nimport {parseLiteralStyle} from '../../webgl/styleparser.js';\r\nimport {ARRAY_BUFFER, DYNAMIC_DRAW, ELEMENT_ARRAY_BUFFER} from '../../webgl.js';\r\nimport {create as createWebGLWorker} from '../../worker/webgl.js';\r\nimport {WebGLWorkerMessageType} from './constants.js';\r\nimport {\r\n  generateLineStringRenderInstructions,\r\n  generatePointRenderInstructions,\r\n  generatePolygonRenderInstructions,\r\n  getCustomAttributesSize,\r\n} from './renderinstructions.js';\r\nimport {colorEncodeId} from './utils.js';\r\n\r\nconst tmpColor = [];\r\n/** @type {Worker|undefined} */\r\nlet WEBGL_WORKER;\r\nfunction getWebGLWorker() {\r\n  if (!WEBGL_WORKER) {\r\n    WEBGL_WORKER = createWebGLWorker();\r\n  }\r\n  return WEBGL_WORKER;\r\n}\r\nlet workerMessageCounter = 0;\r\n\r\n/**\r\n * Names of attributes made available to the vertex shader.\r\n * Please note: changing these *will* break custom shaders!\r\n * @enum {string}\r\n */\r\nexport const Attributes = {\r\n  POSITION: 'a_position',\r\n  INDEX: 'a_index',\r\n  SEGMENT_START: 'a_segmentStart',\r\n  SEGMENT_END: 'a_segmentEnd',\r\n  MEASURE_START: 'a_measureStart',\r\n  MEASURE_END: 'a_measureEnd',\r\n  PARAMETERS: 'a_parameters',\r\n  JOIN_ANGLES: 'a_joinAngles',\r\n  DISTANCE: 'a_distance',\r\n};\r\n\r\n/**\r\n * @typedef {Object} AttributeDefinition A description of a custom attribute to be passed on to the GPU, with a value different\r\n * for each feature.\r\n * @property {number} [size] Amount of numerical values composing the attribute, either 1, 2, 3 or 4; in case size is > 1, the return value\r\n * of the callback should be an array; if unspecified, assumed to be a single float value\r\n * @property {function(this:import(\"./MixedGeometryBatch.js\").GeometryBatchItem, import(\"../../Feature\").FeatureLike):number|Array<number>} callback This callback computes the numerical value of the\r\n * attribute for a given feature.\r\n */\r\n\r\n/**\r\n * @typedef {Object<string, AttributeDefinition>} AttributeDefinitions\r\n * @typedef {Object<string, import(\"../../webgl/Helper\").UniformValue>} UniformDefinitions\r\n */\r\n\r\n/**\r\n * @typedef {Object} WebGLBuffers\r\n * @property {Array<WebGLArrayBuffer>} polygonBuffers Array containing indices and vertices buffers for polygons\r\n * @property {Array<WebGLArrayBuffer>} lineStringBuffers Array containing indices and vertices buffers for line strings\r\n * @property {Array<WebGLArrayBuffer>} pointBuffers Array containing indices and vertices buffers for points\r\n * @property {import(\"../../transform.js\").Transform} invertVerticesTransform Inverse of the transform applied when generating buffers\r\n */\r\n\r\n/**\r\n * @typedef {Object} RenderInstructions\r\n * @property {Float32Array|null} polygonInstructions Polygon instructions; null if nothing to render\r\n * @property {Float32Array|null} lineStringInstructions LineString instructions; null if nothing to render\r\n * @property {Float32Array|null} pointInstructions Point instructions; null if nothing to render\r\n */\r\n\r\n/**\r\n * @typedef {Object} ShaderProgram An object containing both shaders (vertex and fragment)\r\n * @property {string} vertex Vertex shader source\r\n * @property {string} fragment Fragment shader source\r\n */\r\n\r\n/**\r\n * @typedef {Object} AsShaders\r\n * @property {import(\"../../webgl/ShaderBuilder.js\").ShaderBuilder} builder Shader builder with the appropriate presets.\r\n * @property {AttributeDefinitions} [attributes] Custom attributes made available in the vertex shaders.\r\n * Default shaders rely on the attributes in {@link Attributes}.\r\n * @property {UniformDefinitions} [uniforms] Additional uniforms usable in shaders.\r\n */\r\n\r\n/**\r\n * @typedef {Object} AsRule\r\n * @property {import('../../style/flat.js').FlatStyle} style Style\r\n * @property {import(\"../../expr/expression.js\").EncodedExpression} [filter] Filter\r\n */\r\n\r\n/**\r\n * @typedef {AsRule|AsShaders} VectorStyle\r\n */\r\n\r\n/**\r\n * @classdesc This class is responsible for:\r\n * 1. generate WebGL buffers according to a provided style, using a MixedGeometryBatch as input\r\n * 2. rendering geometries contained in said buffers\r\n *\r\n * A layer renderer will typically maintain several of these in order to have several styles rendered separately.\r\n *\r\n * A VectorStyleRenderer instance can be created either from a literal style or from shaders using either\r\n * `VectorStyleRenderer.fromStyle` or `VectorStyleRenderer.fromShaders`. The shaders should not be provided explicitly\r\n * but instead as a preconfigured ShaderBuilder instance.\r\n *\r\n * The `generateBuffers` method returns a promise resolving to WebGL buffers that are intended to be rendered by the\r\n * same renderer.\r\n */\r\nclass VectorStyleRenderer {\r\n  /**\r\n   * @param {VectorStyle} styleOrShaders Literal style or custom shaders\r\n   * @param {import('../../style/flat.js').StyleVariables} variables Style variables\r\n   * @param {import('../../webgl/Helper.js').default} helper Helper\r\n   * @param {boolean} [enableHitDetection] Whether to enable the hit detection (needs compatible shader)\r\n   * @param {import(\"../../expr/expression.js\").ExpressionValue} [filter] Optional filter expression\r\n   */\r\n  constructor(styleOrShaders, variables, helper, enableHitDetection, filter) {\r\n    /**\r\n     * @private\r\n     * @type {import('../../webgl/Helper.js').default}\r\n     */\r\n    this.helper_;\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    this.hitDetectionEnabled_ = !!enableHitDetection;\r\n\r\n    let asShaders = /** @type {AsShaders} */ (styleOrShaders);\r\n    const isShaders = 'builder' in styleOrShaders;\r\n    if (!isShaders) {\r\n      const asRule = /** @type {AsRule} */ (styleOrShaders);\r\n      const parseResult = parseLiteralStyle(\r\n        asRule.style,\r\n        variables,\r\n        asRule.filter,\r\n      );\r\n      asShaders = {\r\n        builder: parseResult.builder,\r\n        attributes: parseResult.attributes,\r\n        uniforms: parseResult.uniforms,\r\n      };\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @type {WebGLProgram}\r\n     */\r\n    this.fillProgram_;\r\n\r\n    /**\r\n     * @private\r\n     * @type {WebGLProgram}\r\n     */\r\n    this.strokeProgram_;\r\n\r\n    /**\r\n     * @private\r\n     * @type {WebGLProgram}\r\n     */\r\n    this.symbolProgram_;\r\n\r\n    /**\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.hasFill_ = !!asShaders.builder.getFillVertexShader();\r\n    if (this.hasFill_) {\r\n      /**\r\n       * @private\r\n       */\r\n      this.fillVertexShader_ = asShaders.builder.getFillVertexShader();\r\n      /**\r\n       * @private\r\n       */\r\n      this.fillFragmentShader_ = asShaders.builder.getFillFragmentShader();\r\n    }\r\n\r\n    /**\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.hasStroke_ = !!asShaders.builder.getStrokeVertexShader();\r\n    if (this.hasStroke_) {\r\n      /**\r\n       * @private\r\n       */\r\n      this.strokeVertexShader_ = asShaders.builder.getStrokeVertexShader();\r\n      /**\r\n       * @private\r\n       */\r\n      this.strokeFragmentShader_ = asShaders.builder.getStrokeFragmentShader();\r\n    }\r\n\r\n    /**\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.hasSymbol_ = !!asShaders.builder.getSymbolVertexShader();\r\n    if (this.hasSymbol_) {\r\n      /**\r\n       * @private\r\n       */\r\n      this.symbolVertexShader_ = asShaders.builder.getSymbolVertexShader();\r\n      /**\r\n       * @private\r\n       */\r\n      this.symbolFragmentShader_ = asShaders.builder.getSymbolFragmentShader();\r\n    }\r\n\r\n    /**\r\n     * @type {function(import('../../Feature.js').FeatureLike): boolean}\r\n     * @private\r\n     */\r\n    this.featureFilter_ = null;\r\n    if (filter) {\r\n      this.featureFilter_ = this.computeFeatureFilter(filter);\r\n    }\r\n\r\n    const hitDetectionAttributes = this.hitDetectionEnabled_\r\n      ? {\r\n          hitColor: {\r\n            callback() {\r\n              return colorEncodeId(this.ref, tmpColor);\r\n            },\r\n            size: 4,\r\n          },\r\n        }\r\n      : {};\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    this.customAttributes_ = Object.assign(\r\n      {},\r\n      hitDetectionAttributes,\r\n      asShaders.attributes,\r\n    );\r\n    /**\r\n     * @private\r\n     */\r\n    this.uniforms_ = asShaders.uniforms;\r\n\r\n    const customAttributesDesc = Object.entries(this.customAttributes_).map(\r\n      ([name, value]) => ({\r\n        name: `a_${name}`,\r\n        size: value.size || 1,\r\n        type: AttributeType.FLOAT,\r\n      }),\r\n    );\r\n    /**\r\n     * @type {Array<import('../../webgl/Helper.js').AttributeDescription>}\r\n     * @private\r\n     */\r\n    this.polygonAttributesDesc_ = [\r\n      {\r\n        name: Attributes.POSITION,\r\n        size: 2,\r\n        type: AttributeType.FLOAT,\r\n      },\r\n      ...customAttributesDesc,\r\n    ];\r\n    /**\r\n     * @type {Array<import('../../webgl/Helper.js').AttributeDescription>}\r\n     * @private\r\n     */\r\n    this.lineStringAttributesDesc_ = [\r\n      {\r\n        name: Attributes.SEGMENT_START,\r\n        size: 2,\r\n        type: AttributeType.FLOAT,\r\n      },\r\n      {\r\n        name: Attributes.MEASURE_START,\r\n        size: 1,\r\n        type: AttributeType.FLOAT,\r\n      },\r\n      {\r\n        name: Attributes.SEGMENT_END,\r\n        size: 2,\r\n        type: AttributeType.FLOAT,\r\n      },\r\n      {\r\n        name: Attributes.MEASURE_END,\r\n        size: 1,\r\n        type: AttributeType.FLOAT,\r\n      },\r\n      {\r\n        name: Attributes.JOIN_ANGLES,\r\n        size: 2,\r\n        type: AttributeType.FLOAT,\r\n      },\r\n      {\r\n        name: Attributes.DISTANCE,\r\n        size: 1,\r\n        type: AttributeType.FLOAT,\r\n      },\r\n      {\r\n        name: Attributes.PARAMETERS,\r\n        size: 1,\r\n        type: AttributeType.FLOAT,\r\n      },\r\n      ...customAttributesDesc,\r\n    ];\r\n    /**\r\n     * @type {Array<import('../../webgl/Helper.js').AttributeDescription>}\r\n     * @private\r\n     */\r\n    this.pointAttributesDesc_ = [\r\n      {\r\n        name: Attributes.POSITION,\r\n        size: 2,\r\n        type: AttributeType.FLOAT,\r\n      },\r\n      {\r\n        name: Attributes.INDEX,\r\n        size: 1,\r\n        type: AttributeType.FLOAT,\r\n      },\r\n      ...customAttributesDesc,\r\n    ];\r\n\r\n    this.setHelper(helper);\r\n  }\r\n\r\n  /**\r\n   * Will apply the style filter when generating geometry batches (if it can be evaluated outside a map context)\r\n   * @param {import(\"../../expr/expression.js\").ExpressionValue} filter Style filter\r\n   * @return {function(import('../../Feature.js').FeatureLike): boolean} Feature filter\r\n   * @private\r\n   */\r\n  computeFeatureFilter(filter) {\r\n    const parsingContext = newParsingContext();\r\n    /**\r\n     * @type {import('../../expr/cpu.js').ExpressionEvaluator}\r\n     */\r\n    let compiled;\r\n    try {\r\n      compiled = buildExpression(filter, BooleanType, parsingContext);\r\n    } catch {\r\n      // filter expression failed to compile for CPU: ignore it\r\n      return null;\r\n    }\r\n\r\n    // do not apply the filter if it depends on map state (e.g. zoom level) or any variable\r\n    if (parsingContext.mapState || parsingContext.variables.size > 0) {\r\n      return null;\r\n    }\r\n\r\n    const evalContext = newEvaluationContext();\r\n    return (feature) => {\r\n      evalContext.properties = feature.getPropertiesInternal();\r\n      if (parsingContext.featureId) {\r\n        const id = feature.getId();\r\n        if (id !== undefined) {\r\n          evalContext.featureId = id;\r\n        } else {\r\n          evalContext.featureId = null;\r\n        }\r\n      }\r\n      evalContext.geometryType = computeGeometryType(feature.getGeometry());\r\n      return /** @type {boolean} */ (compiled(evalContext));\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @param {import('./MixedGeometryBatch.js').default} geometryBatch Geometry batch\r\n   * @param {import(\"../../transform.js\").Transform} transform Transform to apply to coordinates\r\n   * @return {Promise<WebGLBuffers|null>} A promise resolving to WebGL buffers; returns null if buffers are empty\r\n   */\r\n  async generateBuffers(geometryBatch, transform) {\r\n    let filteredBatch = geometryBatch;\r\n    if (this.featureFilter_) {\r\n      filteredBatch = filteredBatch.filter(this.featureFilter_);\r\n      if (filteredBatch.isEmpty()) {\r\n        return null;\r\n      }\r\n    }\r\n    const renderInstructions = this.generateRenderInstructions_(\r\n      filteredBatch,\r\n      transform,\r\n    );\r\n    const [polygonBuffers, lineStringBuffers, pointBuffers] = await Promise.all(\r\n      [\r\n        this.generateBuffersForType_(\r\n          renderInstructions.polygonInstructions,\r\n          'Polygon',\r\n          transform,\r\n        ),\r\n        this.generateBuffersForType_(\r\n          renderInstructions.lineStringInstructions,\r\n          'LineString',\r\n          transform,\r\n        ),\r\n        this.generateBuffersForType_(\r\n          renderInstructions.pointInstructions,\r\n          'Point',\r\n          transform,\r\n        ),\r\n      ],\r\n    );\r\n    // also return the inverse of the transform that was applied when generating buffers\r\n    const invertVerticesTransform = makeInverseTransform(\r\n      createTransform(),\r\n      transform,\r\n    );\r\n    return {\r\n      polygonBuffers: polygonBuffers,\r\n      lineStringBuffers: lineStringBuffers,\r\n      pointBuffers: pointBuffers,\r\n      invertVerticesTransform: invertVerticesTransform,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @param {import('./MixedGeometryBatch.js').default} geometryBatch Geometry batch\r\n   * @param {import(\"../../transform.js\").Transform} transform Transform to apply to coordinates\r\n   * @return {RenderInstructions} Render instructions\r\n   * @private\r\n   */\r\n  generateRenderInstructions_(geometryBatch, transform) {\r\n    const polygonInstructions = this.hasFill_\r\n      ? generatePolygonRenderInstructions(\r\n          geometryBatch.polygonBatch,\r\n          new Float32Array(0),\r\n          this.customAttributes_,\r\n          transform,\r\n        )\r\n      : null;\r\n    const lineStringInstructions = this.hasStroke_\r\n      ? generateLineStringRenderInstructions(\r\n          geometryBatch.lineStringBatch,\r\n          new Float32Array(0),\r\n          this.customAttributes_,\r\n          transform,\r\n        )\r\n      : null;\r\n    const pointInstructions = this.hasSymbol_\r\n      ? generatePointRenderInstructions(\r\n          geometryBatch.pointBatch,\r\n          new Float32Array(0),\r\n          this.customAttributes_,\r\n          transform,\r\n        )\r\n      : null;\r\n\r\n    return {\r\n      polygonInstructions,\r\n      lineStringInstructions,\r\n      pointInstructions,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @param {Float32Array|null} renderInstructions Render instructions\r\n   * @param {import(\"../../geom/Geometry.js\").Type} geometryType Geometry type\r\n   * @param {import(\"../../transform.js\").Transform} transform Transform to apply to coordinates\r\n   * @return {Promise<Array<WebGLArrayBuffer>>|null} Indices buffer and vertices buffer; null if nothing to render\r\n   * @private\r\n   */\r\n  generateBuffersForType_(renderInstructions, geometryType, transform) {\r\n    if (renderInstructions === null) {\r\n      return null;\r\n    }\r\n\r\n    const messageId = workerMessageCounter++;\r\n    let messageType;\r\n    switch (geometryType) {\r\n      case 'Polygon':\r\n        messageType = WebGLWorkerMessageType.GENERATE_POLYGON_BUFFERS;\r\n        break;\r\n      case 'LineString':\r\n        messageType = WebGLWorkerMessageType.GENERATE_LINE_STRING_BUFFERS;\r\n        break;\r\n      case 'Point':\r\n        messageType = WebGLWorkerMessageType.GENERATE_POINT_BUFFERS;\r\n        break;\r\n      default:\r\n      // pass\r\n    }\r\n\r\n    /** @type {import('./constants.js').WebGLWorkerGenerateBuffersMessage} */\r\n    const message = {\r\n      id: messageId,\r\n      type: messageType,\r\n      renderInstructions: renderInstructions.buffer,\r\n      renderInstructionsTransform: transform,\r\n      customAttributesSize: getCustomAttributesSize(this.customAttributes_),\r\n    };\r\n    const WEBGL_WORKER = getWebGLWorker();\r\n    WEBGL_WORKER.postMessage(message, [renderInstructions.buffer]);\r\n\r\n    // leave ownership of render instructions\r\n    renderInstructions = null;\r\n\r\n    return new Promise((resolve) => {\r\n      /**\r\n       * @param {*} event Event.\r\n       */\r\n      const handleMessage = (event) => {\r\n        const received = event.data;\r\n\r\n        // this is not the response to our request: skip\r\n        if (received.id !== messageId) {\r\n          return;\r\n        }\r\n\r\n        // we've received our response: stop listening\r\n        WEBGL_WORKER.removeEventListener('message', handleMessage);\r\n\r\n        // the helper has disposed in the meantime; the promise will not be resolved\r\n        if (!this.helper_.getGL()) {\r\n          return;\r\n        }\r\n\r\n        // copy & flush received buffers to GPU\r\n        const verticesBuffer = new WebGLArrayBuffer(\r\n          ARRAY_BUFFER,\r\n          DYNAMIC_DRAW,\r\n        ).fromArrayBuffer(received.vertexBuffer);\r\n        const indicesBuffer = new WebGLArrayBuffer(\r\n          ELEMENT_ARRAY_BUFFER,\r\n          DYNAMIC_DRAW,\r\n        ).fromArrayBuffer(received.indexBuffer);\r\n        this.helper_.flushBufferData(verticesBuffer);\r\n        this.helper_.flushBufferData(indicesBuffer);\r\n\r\n        resolve([indicesBuffer, verticesBuffer]);\r\n      };\r\n\r\n      WEBGL_WORKER.addEventListener('message', handleMessage);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Render the geometries in the given buffers.\r\n   * @param {WebGLBuffers} buffers WebGL Buffers to draw\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state\r\n   * @param {function(): void} preRenderCallback This callback will be called right before drawing, and can be used to set uniforms\r\n   */\r\n  render(buffers, frameState, preRenderCallback) {\r\n    this.hasFill_ &&\r\n      this.renderInternal_(\r\n        buffers.polygonBuffers[0],\r\n        buffers.polygonBuffers[1],\r\n        this.fillProgram_,\r\n        this.polygonAttributesDesc_,\r\n        frameState,\r\n        preRenderCallback,\r\n      );\r\n    this.hasStroke_ &&\r\n      this.renderInternal_(\r\n        buffers.lineStringBuffers[0],\r\n        buffers.lineStringBuffers[1],\r\n        this.strokeProgram_,\r\n        this.lineStringAttributesDesc_,\r\n        frameState,\r\n        preRenderCallback,\r\n      );\r\n    this.hasSymbol_ &&\r\n      this.renderInternal_(\r\n        buffers.pointBuffers[0],\r\n        buffers.pointBuffers[1],\r\n        this.symbolProgram_,\r\n        this.pointAttributesDesc_,\r\n        frameState,\r\n        preRenderCallback,\r\n      );\r\n  }\r\n\r\n  /**\r\n   * @param {WebGLArrayBuffer} indicesBuffer Indices buffer\r\n   * @param {WebGLArrayBuffer} verticesBuffer Vertices buffer\r\n   * @param {WebGLProgram} program Program\r\n   * @param {Array<import('../../webgl/Helper.js').AttributeDescription>} attributes Attribute descriptions\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @param {function(): void} preRenderCallback This callback will be called right before drawing, and can be used to set uniforms\r\n   * @private\r\n   */\r\n  renderInternal_(\r\n    indicesBuffer,\r\n    verticesBuffer,\r\n    program,\r\n    attributes,\r\n    frameState,\r\n    preRenderCallback,\r\n  ) {\r\n    const renderCount = indicesBuffer.getSize();\r\n    if (renderCount === 0) {\r\n      return;\r\n    }\r\n    this.helper_.useProgram(program, frameState);\r\n    this.helper_.bindBuffer(verticesBuffer);\r\n    this.helper_.bindBuffer(indicesBuffer);\r\n    this.helper_.enableAttributes(attributes);\r\n    preRenderCallback();\r\n    this.helper_.drawElements(0, renderCount);\r\n  }\r\n\r\n  /**\r\n   * @param {import('../../webgl/Helper.js').default} helper Helper\r\n   * @param {WebGLBuffers} buffers WebGL Buffers to reload if any\r\n   */\r\n  setHelper(helper, buffers = null) {\r\n    this.helper_ = helper;\r\n\r\n    if (this.hasFill_) {\r\n      this.fillProgram_ = this.helper_.getProgram(\r\n        this.fillFragmentShader_,\r\n        this.fillVertexShader_,\r\n      );\r\n    }\r\n    if (this.hasStroke_) {\r\n      this.strokeProgram_ = this.helper_.getProgram(\r\n        this.strokeFragmentShader_,\r\n        this.strokeVertexShader_,\r\n      );\r\n    }\r\n    if (this.hasSymbol_) {\r\n      this.symbolProgram_ = this.helper_.getProgram(\r\n        this.symbolFragmentShader_,\r\n        this.symbolVertexShader_,\r\n      );\r\n    }\r\n    this.helper_.addUniforms(this.uniforms_);\r\n\r\n    if (buffers) {\r\n      if (buffers.polygonBuffers) {\r\n        this.helper_.flushBufferData(buffers.polygonBuffers[0]);\r\n        this.helper_.flushBufferData(buffers.polygonBuffers[1]);\r\n      }\r\n      if (buffers.lineStringBuffers) {\r\n        this.helper_.flushBufferData(buffers.lineStringBuffers[0]);\r\n        this.helper_.flushBufferData(buffers.lineStringBuffers[1]);\r\n      }\r\n      if (buffers.pointBuffers) {\r\n        this.helper_.flushBufferData(buffers.pointBuffers[0]);\r\n        this.helper_.flushBufferData(buffers.pointBuffers[1]);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default VectorStyleRenderer;\r\n", "/**\r\n * @module ol/layer/WebGLVector\r\n */\r\nimport WebGLVectorLayerRenderer from '../renderer/webgl/VectorLayer.js';\r\nimport Layer from './Layer.js';\r\n\r\n/***\r\n * @template T\r\n * @typedef {T extends import(\"../source/Vector.js\").default<infer U extends import(\"../Feature.js\").FeatureLike> ? U : never} ExtractedFeatureType\r\n */\r\n\r\n/**\r\n * @template {import(\"../source/Vector.js\").default<FeatureType>} [VectorSourceType=import(\"../source/Vector.js\").default<*>]\r\n * @template {import('../Feature.js').FeatureLike} [FeatureType=ExtractedFeatureType<VectorSourceType>]\r\n * @typedef {Object} Options\r\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\r\n * @property {number} [opacity=1] Opacity (0, 1).\r\n * @property {boolean} [visible=true] Visibility.\r\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\r\n * rendered outside of this extent.\r\n * FIXME: not supported yet\r\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\r\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\r\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\r\n * method was used.\r\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\r\n * visible.\r\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\r\n * be visible.\r\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\r\n * visible.\r\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\r\n * be visible.\r\n * @property {VectorSourceType} [source] Source.\r\n * @property {import('../style/flat.js').FlatStyleLike} style Layer style.\r\n * @property {import('../style/flat.js').StyleVariables} [variables] Style variables. Each variable must hold a literal value (not\r\n * an expression). These variables can be used as {@link import(\"../expr/expression.js\").ExpressionValue expressions} in the styles properties\r\n * using the `['var', 'varName']` operator.\r\n * To update style variables, use the {@link import(\"./WebGLVector.js\").default#updateStyleVariables} method.\r\n * @property {import(\"./Base.js\").BackgroundColor} [background] Background color for the layer. If not specified, no background\r\n * will be rendered.\r\n * FIXME: not supported yet\r\n * @property {boolean} [disableHitDetection=false] Setting this to true will provide a slight performance boost, but will\r\n * prevent all hit detection on the layer.\r\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Layer optimized for rendering large vector datasets.\r\n *\r\n * **Important: a `WebGLVector` layer must be manually disposed when removed, otherwise the underlying WebGL context\r\n * will not be garbage collected.**\r\n *\r\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\r\n * property on the layer object; for example, setting `title: 'My Title'` in the\r\n * options means that `title` is observable, and has get/set accessors.\r\n *\r\n * @template {import(\"../source/Vector.js\").default<FeatureType>} [VectorSourceType=import(\"../source/Vector.js\").default<*>]\r\n * @template {import('../Feature.js').FeatureLike} [FeatureType=ExtractedFeatureType<VectorSourceType>]\r\n * @extends {Layer<VectorSourceType, WebGLVectorLayerRenderer>}\r\n */\r\nclass WebGLVectorLayer extends Layer {\r\n  /**\r\n   * @param {Options<VectorSourceType, FeatureType>} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    const baseOptions = Object.assign({}, options);\r\n\r\n    super(baseOptions);\r\n\r\n    /**\r\n     * @type {import('../style/flat.js').StyleVariables}\r\n     * @private\r\n     */\r\n    this.styleVariables_ = options.variables || {};\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    this.style_ = options.style;\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    this.hitDetectionDisabled_ = !!options.disableHitDetection;\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  createRenderer() {\r\n    return new WebGLVectorLayerRenderer(this, {\r\n      style: this.style_,\r\n      variables: this.styleVariables_,\r\n      disableHitDetection: this.hitDetectionDisabled_,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update any variables used by the layer style and trigger a re-render.\r\n   * @param {import('../style/flat.js').StyleVariables} variables Variables to update.\r\n   */\r\n  updateStyleVariables(variables) {\r\n    Object.assign(this.styleVariables_, variables);\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Set the layer style.\r\n   * @param {import('../style/flat.js').FlatStyleLike} style Layer style.\r\n   */\r\n  setStyle(style) {\r\n    this.style = style;\r\n    this.clearRenderer();\r\n    this.changed();\r\n  }\r\n}\r\n\r\nexport default WebGLVectorLayer;\r\n"],
  "mappings": "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",
  "names": ["asArray", "style", "buffer", "create", "options", "buffer", "create", "EventType_default", "Layer_default", "Layer_default", "create", "equals", "tmpColor", "offset", "buffer", "Layer_default", "create", "Uniforms", "TileLayer_default", "buildExpression", "Uniforms", "equals", "tile", "buildExpression", "scale", "Layer_default", "Uniforms", "TileLayer_default", "geometry", "create", "Attributes", "WEBGL_WORKER", "Uniforms", "Layer_default", "create", "equals", "buffer", "VectorLayer_default", "Layer_default", "VectorLayer_default"]
}
