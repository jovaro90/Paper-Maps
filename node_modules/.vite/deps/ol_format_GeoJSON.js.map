{
  "version": 3,
  "sources": ["../../ol/format/GeoJSON.js", "../../ol/format/Feature.js", "../../ol/format/JSONFeature.js"],
  "sourcesContent": ["/**\r\n * @module ol/format/GeoJSON\r\n */\r\n\r\nimport Feature from '../Feature.js';\r\nimport {getLayoutForStride} from '../geom/SimpleGeometry.js';\r\nimport {\r\n  deflateCoordinatesArray,\r\n  deflateMultiCoordinatesArray,\r\n} from '../geom/flat/deflate.js';\r\nimport {isEmpty} from '../obj.js';\r\nimport {get as getProjection} from '../proj.js';\r\nimport RenderFeature from '../render/Feature.js';\r\nimport {\r\n  createGeometry,\r\n  createRenderFeature,\r\n  transformGeometryWithOptions,\r\n} from './Feature.js';\r\nimport JSONFeature from './JSONFeature.js';\r\n\r\n/**\r\n * @typedef {import(\"geojson\").GeoJSON} GeoJSONObject\r\n * @typedef {import(\"geojson\").Feature} GeoJSONFeature\r\n * @typedef {import(\"geojson\").FeatureCollection} GeoJSONFeatureCollection\r\n * @typedef {import(\"geojson\").Geometry} GeoJSONGeometry\r\n * @typedef {import(\"geojson\").Point} GeoJSONPoint\r\n * @typedef {import(\"geojson\").LineString} GeoJSONLineString\r\n * @typedef {import(\"geojson\").Polygon} GeoJSONPolygon\r\n * @typedef {import(\"geojson\").MultiPoint} GeoJSONMultiPoint\r\n * @typedef {import(\"geojson\").MultiLineString} GeoJSONMultiLineString\r\n * @typedef {import(\"geojson\").MultiPolygon} GeoJSONMultiPolygon\r\n * @typedef {import(\"geojson\").GeometryCollection} GeoJSONGeometryCollection\r\n */\r\n\r\n/**\r\n * @template {import(\"../Feature.js\").FeatureLike} [FeatureType=import(\"../Feature.js\").default]\r\n * @typedef {Object} Options\r\n *\r\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection='EPSG:4326'] Default data projection.\r\n * @property {import(\"../proj.js\").ProjectionLike} [featureProjection] Projection for features read or\r\n * written by the format.  Options passed to read or write methods will take precedence.\r\n * @property {string} [geometryName] Geometry name to use when creating features.\r\n * @property {boolean} [extractGeometryName=false] Certain GeoJSON providers include\r\n * the geometry_name field in the feature GeoJSON. If set to `true` the GeoJSON reader\r\n * will look for that field to set the geometry name. If both this field is set to `true`\r\n * and a `geometryName` is provided, the `geometryName` will take precedence.\r\n * @property {import('./Feature.js').FeatureToFeatureClass<FeatureType>} [featureClass] Feature class\r\n * to be used when reading features. The default is {@link module:ol/Feature~Feature}. If performance is\r\n * the primary concern, and features are not going to be modified or round-tripped through the format,\r\n * consider using {@link module:ol/render/Feature~RenderFeature}\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Feature format for reading and writing data in the GeoJSON format.\r\n *\r\n * @template {import('../Feature.js').FeatureLike} [FeatureType=import(\"../Feature.js\").default]\r\n * @extends {JSONFeature<FeatureType>}\r\n * @api\r\n */\r\nclass GeoJSON extends JSONFeature {\r\n  /**\r\n   * @param {Options<FeatureType>} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    options = options ? options : {};\r\n\r\n    super();\r\n\r\n    /**\r\n     * @type {import(\"../proj/Projection.js\").default}\r\n     */\r\n    this.dataProjection = getProjection(\r\n      options.dataProjection ? options.dataProjection : 'EPSG:4326',\r\n    );\r\n\r\n    if (options.featureProjection) {\r\n      /**\r\n       * @type {import(\"../proj/Projection.js\").default}\r\n       */\r\n      this.defaultFeatureProjection = getProjection(options.featureProjection);\r\n    }\r\n\r\n    if (options.featureClass) {\r\n      this.featureClass = options.featureClass;\r\n    }\r\n\r\n    /**\r\n     * Name of the geometry attribute for features.\r\n     * @type {string|undefined}\r\n     * @private\r\n     */\r\n    this.geometryName_ = options.geometryName;\r\n\r\n    /**\r\n     * Look for the `geometry_name` in the feature GeoJSON\r\n     * @type {boolean|undefined}\r\n     * @private\r\n     */\r\n    this.extractGeometryName_ = options.extractGeometryName;\r\n\r\n    this.supportedMediaTypes = [\r\n      'application/geo+json',\r\n      'application/vnd.geo+json',\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * @param {Object} object Object.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @protected\r\n   * @return {FeatureType|Array<FeatureType>} Feature.\r\n   * @override\r\n   */\r\n  readFeatureFromObject(object, options) {\r\n    /**\r\n     * @type {GeoJSONFeature}\r\n     */\r\n    let geoJSONFeature = null;\r\n    if (object['type'] === 'Feature') {\r\n      geoJSONFeature = /** @type {GeoJSONFeature} */ (object);\r\n    } else {\r\n      geoJSONFeature = {\r\n        'type': 'Feature',\r\n        'geometry': /** @type {GeoJSONGeometry} */ (object),\r\n        'properties': null,\r\n      };\r\n    }\r\n\r\n    const geometry = readGeometryInternal(geoJSONFeature['geometry'], options);\r\n    if (this.featureClass === RenderFeature) {\r\n      return /** @type {FeatureType|Array<FeatureType>} */ (\r\n        createRenderFeature(\r\n          {\r\n            geometry,\r\n            id: geoJSONFeature['id'],\r\n            properties: geoJSONFeature['properties'],\r\n          },\r\n          options,\r\n        )\r\n      );\r\n    }\r\n\r\n    const feature = new Feature();\r\n    if (this.geometryName_) {\r\n      feature.setGeometryName(this.geometryName_);\r\n    } else if (this.extractGeometryName_ && geoJSONFeature['geometry_name']) {\r\n      feature.setGeometryName(geoJSONFeature['geometry_name']);\r\n    }\r\n    feature.setGeometry(createGeometry(geometry, options));\r\n\r\n    if ('id' in geoJSONFeature) {\r\n      feature.setId(geoJSONFeature['id']);\r\n    }\r\n\r\n    if (geoJSONFeature['properties']) {\r\n      feature.setProperties(geoJSONFeature['properties'], true);\r\n    }\r\n    return /** @type {FeatureType|Array<FeatureType>} */ (feature);\r\n  }\r\n\r\n  /**\r\n   * @param {Object} object Object.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @protected\r\n   * @return {Array<FeatureType>} Features.\r\n   * @override\r\n   */\r\n  readFeaturesFromObject(object, options) {\r\n    const geoJSONObject = /** @type {GeoJSONObject} */ (object);\r\n    let features = null;\r\n    if (geoJSONObject['type'] === 'FeatureCollection') {\r\n      const geoJSONFeatureCollection = /** @type {GeoJSONFeatureCollection} */ (\r\n        object\r\n      );\r\n      features = [];\r\n      const geoJSONFeatures = geoJSONFeatureCollection['features'];\r\n      for (let i = 0, ii = geoJSONFeatures.length; i < ii; ++i) {\r\n        const featureObject = this.readFeatureFromObject(\r\n          geoJSONFeatures[i],\r\n          options,\r\n        );\r\n        if (!featureObject) {\r\n          continue;\r\n        }\r\n        features.push(featureObject);\r\n      }\r\n    } else {\r\n      features = [this.readFeatureFromObject(object, options)];\r\n    }\r\n    return /** @type {Array<FeatureType>} */ (features.flat());\r\n  }\r\n\r\n  /**\r\n   * @param {GeoJSONGeometry} object Object.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @protected\r\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\r\n   * @override\r\n   */\r\n  readGeometryFromObject(object, options) {\r\n    return readGeometry(object, options);\r\n  }\r\n\r\n  /**\r\n   * @param {Object} object Object.\r\n   * @protected\r\n   * @return {import(\"../proj/Projection.js\").default} Projection.\r\n   * @override\r\n   */\r\n  readProjectionFromObject(object) {\r\n    const crs = object['crs'];\r\n    let projection;\r\n    if (crs) {\r\n      if (crs['type'] == 'name') {\r\n        projection = getProjection(crs['properties']['name']);\r\n      } else if (crs['type'] === 'EPSG') {\r\n        projection = getProjection('EPSG:' + crs['properties']['code']);\r\n      } else {\r\n        throw new Error('Unknown SRS type');\r\n      }\r\n    } else {\r\n      projection = this.dataProjection;\r\n    }\r\n    return /** @type {import(\"../proj/Projection.js\").default} */ (projection);\r\n  }\r\n\r\n  /**\r\n   * Encode a feature as a GeoJSON Feature object.\r\n   *\r\n   * @param {import(\"../Feature.js\").default} feature Feature.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {GeoJSONFeature} Object.\r\n   * @api\r\n   * @override\r\n   */\r\n  writeFeatureObject(feature, options) {\r\n    options = this.adaptOptions(options);\r\n\r\n    /** @type {GeoJSONFeature} */\r\n    const object = {\r\n      'type': 'Feature',\r\n      geometry: null,\r\n      properties: null,\r\n    };\r\n\r\n    const id = feature.getId();\r\n    if (id !== undefined) {\r\n      object.id = id;\r\n    }\r\n\r\n    if (!feature.hasProperties()) {\r\n      return object;\r\n    }\r\n\r\n    const properties = feature.getProperties();\r\n    const geometry = feature.getGeometry();\r\n    if (geometry) {\r\n      object.geometry = writeGeometry(geometry, options);\r\n\r\n      delete properties[feature.getGeometryName()];\r\n    }\r\n\r\n    if (!isEmpty(properties)) {\r\n      object.properties = properties;\r\n    }\r\n\r\n    return object;\r\n  }\r\n\r\n  /**\r\n   * Encode an array of features as a GeoJSON object.\r\n   *\r\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {GeoJSONFeatureCollection} GeoJSON Object.\r\n   * @api\r\n   * @override\r\n   */\r\n  writeFeaturesObject(features, options) {\r\n    options = this.adaptOptions(options);\r\n    const objects = [];\r\n    for (let i = 0, ii = features.length; i < ii; ++i) {\r\n      objects.push(this.writeFeatureObject(features[i], options));\r\n    }\r\n    return {\r\n      type: 'FeatureCollection',\r\n      features: objects,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Encode a geometry as a GeoJSON object.\r\n   *\r\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {GeoJSONGeometry|GeoJSONGeometryCollection} Object.\r\n   * @api\r\n   * @override\r\n   */\r\n  writeGeometryObject(geometry, options) {\r\n    return writeGeometry(geometry, this.adaptOptions(options));\r\n  }\r\n}\r\n\r\n/**\r\n * @param {GeoJSONGeometry|GeoJSONGeometryCollection} object Object.\r\n * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n * @return {import(\"./Feature.js\").GeometryObject} Geometry.\r\n */\r\nfunction readGeometryInternal(object, options) {\r\n  if (!object) {\r\n    return null;\r\n  }\r\n\r\n  /** @type {import(\"./Feature.js\").GeometryObject} */\r\n  let geometry;\r\n  switch (object['type']) {\r\n    case 'Point': {\r\n      geometry = readPointGeometry(/** @type {GeoJSONPoint} */ (object));\r\n      break;\r\n    }\r\n    case 'LineString': {\r\n      geometry = readLineStringGeometry(\r\n        /** @type {GeoJSONLineString} */ (object),\r\n      );\r\n      break;\r\n    }\r\n    case 'Polygon': {\r\n      geometry = readPolygonGeometry(/** @type {GeoJSONPolygon} */ (object));\r\n      break;\r\n    }\r\n    case 'MultiPoint': {\r\n      geometry = readMultiPointGeometry(\r\n        /** @type {GeoJSONMultiPoint} */ (object),\r\n      );\r\n      break;\r\n    }\r\n    case 'MultiLineString': {\r\n      geometry = readMultiLineStringGeometry(\r\n        /** @type {GeoJSONMultiLineString} */ (object),\r\n      );\r\n      break;\r\n    }\r\n    case 'MultiPolygon': {\r\n      geometry = readMultiPolygonGeometry(\r\n        /** @type {GeoJSONMultiPolygon} */ (object),\r\n      );\r\n      break;\r\n    }\r\n    case 'GeometryCollection': {\r\n      geometry = readGeometryCollectionGeometry(\r\n        /** @type {GeoJSONGeometryCollection} */ (object),\r\n      );\r\n      break;\r\n    }\r\n    default: {\r\n      throw new Error('Unsupported GeoJSON type: ' + object['type']);\r\n    }\r\n  }\r\n  return geometry;\r\n}\r\n\r\n/**\r\n * @param {GeoJSONGeometry|GeoJSONGeometryCollection} object Object.\r\n * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n * @return {import(\"../geom/Geometry.js\").default} Geometry.\r\n */\r\nfunction readGeometry(object, options) {\r\n  const geometryObject = readGeometryInternal(object, options);\r\n  return createGeometry(geometryObject, options);\r\n}\r\n\r\n/**\r\n * @param {GeoJSONGeometryCollection} object Object.\r\n * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n * @return {import(\"./Feature.js\").GeometryCollectionObject} Geometry collection.\r\n */\r\nfunction readGeometryCollectionGeometry(object, options) {\r\n  const geometries = object['geometries'].map(\r\n    /**\r\n     * @param {GeoJSONGeometry} geometry Geometry.\r\n     * @return {import(\"./Feature.js\").GeometryObject} geometry Geometry.\r\n     */\r\n    function (geometry) {\r\n      return readGeometryInternal(geometry, options);\r\n    },\r\n  );\r\n  return geometries;\r\n}\r\n\r\n/**\r\n * @param {GeoJSONPoint} object Input object.\r\n * @return {import(\"./Feature.js\").GeometryObject} Point geometry.\r\n */\r\nfunction readPointGeometry(object) {\r\n  const flatCoordinates = object['coordinates'];\r\n  return {\r\n    type: 'Point',\r\n    flatCoordinates,\r\n    layout: getLayoutForStride(flatCoordinates.length),\r\n  };\r\n}\r\n\r\n/**\r\n * @param {GeoJSONLineString} object Object.\r\n * @return {import(\"./Feature.js\").GeometryObject} LineString geometry.\r\n */\r\nfunction readLineStringGeometry(object) {\r\n  const coordinates = object['coordinates'];\r\n  const flatCoordinates = coordinates.flat();\r\n  return {\r\n    type: 'LineString',\r\n    flatCoordinates,\r\n    ends: [flatCoordinates.length],\r\n    layout: getLayoutForStride(coordinates[0]?.length || 2),\r\n  };\r\n}\r\n\r\n/**\r\n * @param {GeoJSONMultiLineString} object Object.\r\n * @return {import(\"./Feature.js\").GeometryObject} MultiLineString geometry.\r\n */\r\nfunction readMultiLineStringGeometry(object) {\r\n  const coordinates = object['coordinates'];\r\n  const stride = coordinates[0]?.[0]?.length || 2;\r\n  const flatCoordinates = [];\r\n  const ends = deflateCoordinatesArray(flatCoordinates, 0, coordinates, stride);\r\n  return {\r\n    type: 'MultiLineString',\r\n    flatCoordinates,\r\n    ends,\r\n    layout: getLayoutForStride(stride),\r\n  };\r\n}\r\n\r\n/**\r\n * @param {GeoJSONMultiPoint} object Object.\r\n * @return {import(\"./Feature.js\").GeometryObject} MultiPoint geometry.\r\n */\r\nfunction readMultiPointGeometry(object) {\r\n  const coordinates = object['coordinates'];\r\n  return {\r\n    type: 'MultiPoint',\r\n    flatCoordinates: coordinates.flat(),\r\n    layout: getLayoutForStride(coordinates[0]?.length || 2),\r\n  };\r\n}\r\n\r\n/**\r\n * @param {GeoJSONMultiPolygon} object Object.\r\n * @return {import(\"./Feature.js\").GeometryObject} MultiPolygon geometry.\r\n */\r\nfunction readMultiPolygonGeometry(object) {\r\n  const coordinates = object['coordinates'];\r\n  const flatCoordinates = [];\r\n  const stride = coordinates[0]?.[0]?.[0].length || 2;\r\n  const endss = deflateMultiCoordinatesArray(\r\n    flatCoordinates,\r\n    0,\r\n    coordinates,\r\n    stride,\r\n  );\r\n  return {\r\n    type: 'MultiPolygon',\r\n    flatCoordinates,\r\n    ends: endss,\r\n    layout: getLayoutForStride(stride),\r\n  };\r\n}\r\n\r\n/**\r\n * @param {GeoJSONPolygon} object Object.\r\n * @return {import(\"./Feature.js\").GeometryObject} Polygon.\r\n */\r\nfunction readPolygonGeometry(object) {\r\n  const coordinates = object['coordinates'];\r\n  const flatCoordinates = [];\r\n  const stride = coordinates[0]?.[0]?.length;\r\n  const ends = deflateCoordinatesArray(flatCoordinates, 0, coordinates, stride);\r\n  return {\r\n    type: 'Polygon',\r\n    flatCoordinates,\r\n    ends,\r\n    layout: getLayoutForStride(stride),\r\n  };\r\n}\r\n\r\n/**\r\n * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\r\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n * @return {GeoJSONGeometry} GeoJSON geometry.\r\n */\r\nfunction writeGeometry(geometry, options) {\r\n  geometry = transformGeometryWithOptions(geometry, true, options);\r\n\r\n  const type = geometry.getType();\r\n\r\n  /** @type {GeoJSONGeometry} */\r\n  let geoJSON;\r\n  switch (type) {\r\n    case 'Point': {\r\n      geoJSON = writePointGeometry(\r\n        /** @type {import(\"../geom/Point.js\").default} */ (geometry),\r\n        options,\r\n      );\r\n      break;\r\n    }\r\n    case 'LineString': {\r\n      geoJSON = writeLineStringGeometry(\r\n        /** @type {import(\"../geom/LineString.js\").default} */ (geometry),\r\n        options,\r\n      );\r\n      break;\r\n    }\r\n    case 'Polygon': {\r\n      geoJSON = writePolygonGeometry(\r\n        /** @type {import(\"../geom/Polygon.js\").default} */ (geometry),\r\n        options,\r\n      );\r\n      break;\r\n    }\r\n    case 'MultiPoint': {\r\n      geoJSON = writeMultiPointGeometry(\r\n        /** @type {import(\"../geom/MultiPoint.js\").default} */ (geometry),\r\n        options,\r\n      );\r\n      break;\r\n    }\r\n    case 'MultiLineString': {\r\n      geoJSON = writeMultiLineStringGeometry(\r\n        /** @type {import(\"../geom/MultiLineString.js\").default} */ (geometry),\r\n        options,\r\n      );\r\n      break;\r\n    }\r\n    case 'MultiPolygon': {\r\n      geoJSON = writeMultiPolygonGeometry(\r\n        /** @type {import(\"../geom/MultiPolygon.js\").default} */ (geometry),\r\n        options,\r\n      );\r\n      break;\r\n    }\r\n    case 'GeometryCollection': {\r\n      geoJSON = writeGeometryCollectionGeometry(\r\n        /** @type {import(\"../geom/GeometryCollection.js\").default} */ (\r\n          geometry\r\n        ),\r\n        options,\r\n      );\r\n      break;\r\n    }\r\n    case 'Circle': {\r\n      geoJSON = {\r\n        type: 'GeometryCollection',\r\n        geometries: [],\r\n      };\r\n      break;\r\n    }\r\n    default: {\r\n      throw new Error('Unsupported geometry type: ' + type);\r\n    }\r\n  }\r\n  return geoJSON;\r\n}\r\n\r\n/**\r\n * @param {import(\"../geom/GeometryCollection.js\").default} geometry Geometry.\r\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n * @return {GeoJSONGeometryCollection} GeoJSON geometry collection.\r\n */\r\nfunction writeGeometryCollectionGeometry(geometry, options) {\r\n  options = Object.assign({}, options);\r\n  delete options.featureProjection;\r\n  const geometries = geometry.getGeometriesArray().map(function (geometry) {\r\n    return writeGeometry(geometry, options);\r\n  });\r\n  return {\r\n    type: 'GeometryCollection',\r\n    geometries: geometries,\r\n  };\r\n}\r\n\r\n/**\r\n * @param {import(\"../geom/LineString.js\").default} geometry Geometry.\r\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n * @return {GeoJSONGeometry} GeoJSON geometry.\r\n */\r\nfunction writeLineStringGeometry(geometry, options) {\r\n  return {\r\n    type: 'LineString',\r\n    coordinates: geometry.getCoordinates(),\r\n  };\r\n}\r\n\r\n/**\r\n * @param {import(\"../geom/MultiLineString.js\").default} geometry Geometry.\r\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n * @return {GeoJSONGeometry} GeoJSON geometry.\r\n */\r\nfunction writeMultiLineStringGeometry(geometry, options) {\r\n  return {\r\n    type: 'MultiLineString',\r\n    coordinates: geometry.getCoordinates(),\r\n  };\r\n}\r\n\r\n/**\r\n * @param {import(\"../geom/MultiPoint.js\").default} geometry Geometry.\r\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n * @return {GeoJSONGeometry} GeoJSON geometry.\r\n */\r\nfunction writeMultiPointGeometry(geometry, options) {\r\n  return {\r\n    type: 'MultiPoint',\r\n    coordinates: geometry.getCoordinates(),\r\n  };\r\n}\r\n\r\n/**\r\n * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\r\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n * @return {GeoJSONGeometry} GeoJSON geometry.\r\n */\r\nfunction writeMultiPolygonGeometry(geometry, options) {\r\n  let right;\r\n  if (options) {\r\n    right = options.rightHanded;\r\n  }\r\n  return {\r\n    type: 'MultiPolygon',\r\n    coordinates: geometry.getCoordinates(right),\r\n  };\r\n}\r\n\r\n/**\r\n * @param {import(\"../geom/Point.js\").default} geometry Geometry.\r\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n * @return {GeoJSONGeometry} GeoJSON geometry.\r\n */\r\nfunction writePointGeometry(geometry, options) {\r\n  return {\r\n    type: 'Point',\r\n    coordinates: geometry.getCoordinates(),\r\n  };\r\n}\r\n\r\n/**\r\n * @param {import(\"../geom/Polygon.js\").default} geometry Geometry.\r\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n * @return {GeoJSONGeometry} GeoJSON geometry.\r\n */\r\nfunction writePolygonGeometry(geometry, options) {\r\n  let right;\r\n  if (options) {\r\n    right = options.rightHanded;\r\n  }\r\n  return {\r\n    type: 'Polygon',\r\n    coordinates: geometry.getCoordinates(right),\r\n  };\r\n}\r\n\r\nexport default GeoJSON;\r\n", "/**\r\n * @module ol/format/Feature\r\n */\r\nimport Feature from '../Feature.js';\r\nimport {\r\n  linearRingsAreOriented,\r\n  linearRingssAreOriented,\r\n  orientLinearRings,\r\n  orientLinearRingsArray,\r\n} from '../geom/flat/orient.js';\r\nimport {\r\n  GeometryCollection,\r\n  LineString,\r\n  MultiLineString,\r\n  MultiPoint,\r\n  MultiPolygon,\r\n  Point,\r\n  Polygon,\r\n} from '../geom.js';\r\nimport {\r\n  equivalent as equivalentProjection,\r\n  get as getProjection,\r\n  getTransform,\r\n  transformExtent,\r\n} from '../proj.js';\r\nimport RenderFeature from '../render/Feature.js';\r\nimport {abstract} from '../util.js';\r\n\r\n/**\r\n * @typedef {Object} ReadOptions\r\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection] Projection of the data we are reading.\r\n * If not provided, the projection will be derived from the data (where possible) or\r\n * the `dataProjection` of the format is assigned (where set). If the projection\r\n * can not be derived from the data and if no `dataProjection` is set for a format,\r\n * the features will not be reprojected.\r\n * @property {import(\"../extent.js\").Extent} [extent] Tile extent in map units of the tile being read.\r\n * This is only required when reading data with tile pixels as geometry units. When configured,\r\n * a `dataProjection` with `TILE_PIXELS` as `units` and the tile's pixel extent as `extent` needs to be\r\n * provided.\r\n * @property {import(\"../proj.js\").ProjectionLike} [featureProjection] Projection of the feature geometries\r\n * created by the format reader. If not provided, features will be returned in the\r\n * `dataProjection`.\r\n */\r\n\r\n/**\r\n * @typedef {Object} WriteOptions\r\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection] Projection of the data we are writing.\r\n * If not provided, the `dataProjection` of the format is assigned (where set).\r\n * If no `dataProjection` is set for a format, the features will be returned\r\n * in the `featureProjection`.\r\n * @property {import(\"../proj.js\").ProjectionLike} [featureProjection] Projection of the feature geometries\r\n * that will be serialized by the format writer. If not provided, geometries are assumed\r\n * to be in the `dataProjection` if that is set; in other words, they are not transformed.\r\n * @property {boolean} [rightHanded] When writing geometries, follow the right-hand\r\n * rule for linear ring orientation.  This means that polygons will have counter-clockwise\r\n * exterior rings and clockwise interior rings.  By default, coordinates are serialized\r\n * as they are provided at construction.  If `true`, the right-hand rule will\r\n * be applied.  If `false`, the left-hand rule will be applied (clockwise for\r\n * exterior and counter-clockwise for interior rings).  Note that not all\r\n * formats support this.  The GeoJSON format does use this property when writing\r\n * geometries.\r\n * @property {number} [decimals] Maximum number of decimal places for coordinates.\r\n * Coordinates are stored internally as floats, but floating-point arithmetic can create\r\n * coordinates with a large number of decimal places, not generally wanted on output.\r\n * Set a number here to round coordinates. Can also be used to ensure that\r\n * coordinates read in can be written back out with the same number of decimals.\r\n * Default is no rounding.\r\n */\r\n\r\n/**\r\n * @typedef {'arraybuffer' | 'json' | 'text' | 'xml'} Type\r\n */\r\n\r\n/**\r\n * @typedef {Object} SimpleGeometryObject\r\n * @property {import('../geom/Geometry.js').Type} type Type.\r\n * @property {Array<number>} flatCoordinates Flat coordinates.\r\n * @property {Array<number>|Array<Array<number>>} [ends] Ends or endss.\r\n * @property {import('../geom/Geometry.js').GeometryLayout} [layout] Layout.\r\n */\r\n\r\n/**\r\n * @typedef {Array<GeometryObject>} GeometryCollectionObject\r\n */\r\n\r\n/**\r\n * @typedef {SimpleGeometryObject|GeometryCollectionObject} GeometryObject\r\n */\r\n\r\n/**\r\n * @typedef {Object} FeatureObject\r\n * @property {string|number} [id] Id.\r\n * @property {GeometryObject} [geometry] Geometry.\r\n * @property {Object<string, *>} [properties] Properties.\r\n */\r\n\r\n/***\r\n * @template {import('../Feature.js').FeatureLike} T\r\n * @typedef {T extends RenderFeature ? typeof RenderFeature : typeof Feature} FeatureToFeatureClass\r\n */\r\n\r\n/***\r\n * @template {import(\"../Feature.js\").FeatureClass} T\r\n * @typedef {T[keyof T] extends RenderFeature ? RenderFeature : Feature} FeatureClassToFeature\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Abstract base class; normally only used for creating subclasses and not\r\n * instantiated in apps.\r\n * Base class for feature formats.\r\n * {@link module:ol/format/Feature~FeatureFormat} subclasses provide the ability to decode and encode\r\n * {@link module:ol/Feature~Feature} objects from a variety of commonly used geospatial\r\n * file formats.  See the documentation for each format for more details.\r\n *\r\n * @template {import('../Feature.js').FeatureLike} [FeatureType=import(\"../Feature.js\").default]\r\n * @abstract\r\n * @api\r\n */\r\nclass FeatureFormat {\r\n  constructor() {\r\n    /**\r\n     * @protected\r\n     * @type {import(\"../proj/Projection.js\").default|undefined}\r\n     */\r\n    this.dataProjection = undefined;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {import(\"../proj/Projection.js\").default|undefined}\r\n     */\r\n    this.defaultFeatureProjection = undefined;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {FeatureToFeatureClass<FeatureType>}\r\n     */\r\n    this.featureClass = /** @type {FeatureToFeatureClass<FeatureType>} */ (\r\n      Feature\r\n    );\r\n\r\n    /**\r\n     * A list media types supported by the format in descending order of preference.\r\n     * @type {Array<string>}\r\n     */\r\n    this.supportedMediaTypes = null;\r\n  }\r\n\r\n  /**\r\n   * Adds the data projection to the read options.\r\n   * @param {Document|Element|Object|string} source Source.\r\n   * @param {ReadOptions} [options] Options.\r\n   * @return {ReadOptions|undefined} Options.\r\n   * @protected\r\n   */\r\n  getReadOptions(source, options) {\r\n    if (options) {\r\n      let dataProjection = options.dataProjection\r\n        ? getProjection(options.dataProjection)\r\n        : this.readProjection(source);\r\n      if (\r\n        options.extent &&\r\n        dataProjection &&\r\n        dataProjection.getUnits() === 'tile-pixels'\r\n      ) {\r\n        dataProjection = getProjection(dataProjection);\r\n        dataProjection.setWorldExtent(options.extent);\r\n      }\r\n      options = {\r\n        dataProjection: dataProjection,\r\n        featureProjection: options.featureProjection,\r\n      };\r\n    }\r\n    return this.adaptOptions(options);\r\n  }\r\n\r\n  /**\r\n   * Sets the `dataProjection` on the options, if no `dataProjection`\r\n   * is set.\r\n   * @param {WriteOptions|ReadOptions|undefined} options\r\n   *     Options.\r\n   * @protected\r\n   * @return {WriteOptions|ReadOptions|undefined}\r\n   *     Updated options.\r\n   */\r\n  adaptOptions(options) {\r\n    return Object.assign(\r\n      {\r\n        dataProjection: this.dataProjection,\r\n        featureProjection: this.defaultFeatureProjection,\r\n        featureClass: this.featureClass,\r\n      },\r\n      options,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @return {Type} The format type.\r\n   */\r\n  getType() {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Read a single feature from a source.\r\n   *\r\n   * @abstract\r\n   * @param {Document|Element|Object|string} source Source.\r\n   * @param {ReadOptions} [options] Read options.\r\n   * @return {FeatureType|Array<FeatureType>} Feature.\r\n   */\r\n  readFeature(source, options) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Read all features from a source.\r\n   *\r\n   * @abstract\r\n   * @param {Document|Element|ArrayBuffer|Object|string} source Source.\r\n   * @param {ReadOptions} [options] Read options.\r\n   * @return {Array<FeatureType>} Features.\r\n   */\r\n  readFeatures(source, options) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Read a single geometry from a source.\r\n   *\r\n   * @abstract\r\n   * @param {Document|Element|Object|string} source Source.\r\n   * @param {ReadOptions} [options] Read options.\r\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\r\n   */\r\n  readGeometry(source, options) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Read the projection from a source.\r\n   *\r\n   * @abstract\r\n   * @param {Document|Element|Object|string} source Source.\r\n   * @return {import(\"../proj/Projection.js\").default|undefined} Projection.\r\n   */\r\n  readProjection(source) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Encode a feature in this format.\r\n   *\r\n   * @abstract\r\n   * @param {Feature} feature Feature.\r\n   * @param {WriteOptions} [options] Write options.\r\n   * @return {string|ArrayBuffer} Result.\r\n   */\r\n  writeFeature(feature, options) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Encode an array of features in this format.\r\n   *\r\n   * @abstract\r\n   * @param {Array<Feature>} features Features.\r\n   * @param {WriteOptions} [options] Write options.\r\n   * @return {string|ArrayBuffer} Result.\r\n   */\r\n  writeFeatures(features, options) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Write a single geometry in this format.\r\n   *\r\n   * @abstract\r\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\r\n   * @param {WriteOptions} [options] Write options.\r\n   * @return {string|ArrayBuffer} Result.\r\n   */\r\n  writeGeometry(geometry, options) {\r\n    return abstract();\r\n  }\r\n}\r\n\r\nexport default FeatureFormat;\r\n\r\n/**\r\n * @template {import(\"../geom/Geometry.js\").default|RenderFeature} T\r\n * @param {T} geometry Geometry.\r\n * @param {boolean} write Set to true for writing, false for reading.\r\n * @param {WriteOptions|ReadOptions} [options] Options.\r\n * @return {T} Transformed geometry.\r\n */\r\nexport function transformGeometryWithOptions(geometry, write, options) {\r\n  const featureProjection = options\r\n    ? getProjection(options.featureProjection)\r\n    : null;\r\n  const dataProjection = options ? getProjection(options.dataProjection) : null;\r\n\r\n  let transformed = geometry;\r\n  if (\r\n    featureProjection &&\r\n    dataProjection &&\r\n    !equivalentProjection(featureProjection, dataProjection)\r\n  ) {\r\n    if (write) {\r\n      transformed = /** @type {T} */ (geometry.clone());\r\n    }\r\n    const fromProjection = write ? featureProjection : dataProjection;\r\n    const toProjection = write ? dataProjection : featureProjection;\r\n    if (fromProjection.getUnits() === 'tile-pixels') {\r\n      transformed.transform(fromProjection, toProjection);\r\n    } else {\r\n      transformed.applyTransform(getTransform(fromProjection, toProjection));\r\n    }\r\n  }\r\n  if (\r\n    write &&\r\n    options &&\r\n    /** @type {WriteOptions} */ (options).decimals !== undefined\r\n  ) {\r\n    const power = Math.pow(10, /** @type {WriteOptions} */ (options).decimals);\r\n    // if decimals option on write, round each coordinate appropriately\r\n    /**\r\n     * @param {Array<number>} coordinates Coordinates.\r\n     * @return {Array<number>} Transformed coordinates.\r\n     */\r\n    const transform = function (coordinates) {\r\n      for (let i = 0, ii = coordinates.length; i < ii; ++i) {\r\n        coordinates[i] = Math.round(coordinates[i] * power) / power;\r\n      }\r\n      return coordinates;\r\n    };\r\n    if (transformed === geometry) {\r\n      transformed = /** @type {T} */ (geometry.clone());\r\n    }\r\n    transformed.applyTransform(transform);\r\n  }\r\n  return transformed;\r\n}\r\n\r\n/**\r\n * @param {import(\"../extent.js\").Extent} extent Extent.\r\n * @param {ReadOptions} [options] Read options.\r\n * @return {import(\"../extent.js\").Extent} Transformed extent.\r\n */\r\nexport function transformExtentWithOptions(extent, options) {\r\n  const featureProjection = options\r\n    ? getProjection(options.featureProjection)\r\n    : null;\r\n  const dataProjection = options ? getProjection(options.dataProjection) : null;\r\n\r\n  if (\r\n    featureProjection &&\r\n    dataProjection &&\r\n    !equivalentProjection(featureProjection, dataProjection)\r\n  ) {\r\n    return transformExtent(extent, dataProjection, featureProjection);\r\n  }\r\n  return extent;\r\n}\r\n\r\nconst GeometryConstructor = {\r\n  Point: Point,\r\n  LineString: LineString,\r\n  Polygon: Polygon,\r\n  MultiPoint: MultiPoint,\r\n  MultiLineString: MultiLineString,\r\n  MultiPolygon: MultiPolygon,\r\n};\r\n\r\nfunction orientFlatCoordinates(flatCoordinates, ends, stride) {\r\n  if (Array.isArray(ends[0])) {\r\n    // MultiPolagon\r\n    if (!linearRingssAreOriented(flatCoordinates, 0, ends, stride)) {\r\n      flatCoordinates = flatCoordinates.slice();\r\n      orientLinearRingsArray(flatCoordinates, 0, ends, stride);\r\n    }\r\n    return flatCoordinates;\r\n  }\r\n  if (!linearRingsAreOriented(flatCoordinates, 0, ends, stride)) {\r\n    flatCoordinates = flatCoordinates.slice();\r\n    orientLinearRings(flatCoordinates, 0, ends, stride);\r\n  }\r\n  return flatCoordinates;\r\n}\r\n\r\n/**\r\n * @param {FeatureObject} object Feature object.\r\n * @param {WriteOptions|ReadOptions} [options] Options.\r\n * @return {RenderFeature|Array<RenderFeature>} Render feature.\r\n */\r\nexport function createRenderFeature(object, options) {\r\n  const geometry = object.geometry;\r\n  if (!geometry) {\r\n    return [];\r\n  }\r\n  if (Array.isArray(geometry)) {\r\n    return geometry\r\n      .map((geometry) => createRenderFeature({...object, geometry}))\r\n      .flat();\r\n  }\r\n\r\n  const geometryType =\r\n    geometry.type === 'MultiPolygon' ? 'Polygon' : geometry.type;\r\n  if (geometryType === 'GeometryCollection' || geometryType === 'Circle') {\r\n    throw new Error('Unsupported geometry type: ' + geometryType);\r\n  }\r\n\r\n  const stride = geometry.layout.length;\r\n  return transformGeometryWithOptions(\r\n    new RenderFeature(\r\n      geometryType,\r\n      geometryType === 'Polygon'\r\n        ? orientFlatCoordinates(geometry.flatCoordinates, geometry.ends, stride)\r\n        : geometry.flatCoordinates,\r\n      geometry.ends?.flat(),\r\n      stride,\r\n      object.properties || {},\r\n      object.id,\r\n    ).enableSimplifyTransformed(),\r\n    false,\r\n    options,\r\n  );\r\n}\r\n\r\n/**\r\n * @param {GeometryObject|null} object Geometry object.\r\n * @param {WriteOptions|ReadOptions} [options] Options.\r\n * @return {import(\"../geom/Geometry.js\").default} Geometry.\r\n */\r\nexport function createGeometry(object, options) {\r\n  if (!object) {\r\n    return null;\r\n  }\r\n  if (Array.isArray(object)) {\r\n    const geometries = object.map((geometry) =>\r\n      createGeometry(geometry, options),\r\n    );\r\n    return new GeometryCollection(geometries);\r\n  }\r\n  const Geometry = GeometryConstructor[object.type];\r\n  return transformGeometryWithOptions(\r\n    new Geometry(object.flatCoordinates, object.layout || 'XY', object.ends),\r\n    false,\r\n    options,\r\n  );\r\n}\r\n", "/**\r\n * @module ol/format/JSONFeature\r\n */\r\nimport {abstract} from '../util.js';\r\nimport FeatureFormat from './Feature.js';\r\n\r\n/**\r\n * @classdesc\r\n * Abstract base class; normally only used for creating subclasses and not\r\n * instantiated in apps.\r\n * Base class for JSON feature formats.\r\n *\r\n * @template {import('../Feature.js').FeatureLike} [FeatureType=import(\"../Feature.js\").default]\r\n * @extends {FeatureFormat<FeatureType>}\r\n * @abstract\r\n */\r\nclass JSONFeature extends FeatureFormat {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"./Feature.js\").Type} Format.\r\n   * @override\r\n   */\r\n  getType() {\r\n    return 'json';\r\n  }\r\n\r\n  /**\r\n   * Read a feature.  Only works for a single feature. Use `readFeatures` to\r\n   * read a feature collection.\r\n   *\r\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @return {FeatureType|Array<FeatureType>} Feature.\r\n   * @api\r\n   * @override\r\n   */\r\n  readFeature(source, options) {\r\n    return this.readFeatureFromObject(\r\n      getObject(source),\r\n      this.getReadOptions(source, options),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Read all features.  Works with both a single feature and a feature\r\n   * collection.\r\n   *\r\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @return {Array<FeatureType>} Features.\r\n   * @api\r\n   * @override\r\n   */\r\n  readFeatures(source, options) {\r\n    return this.readFeaturesFromObject(\r\n      getObject(source),\r\n      this.getReadOptions(source, options),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {Object} object Object.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @protected\r\n   * @return {FeatureType|Array<FeatureType>} Feature.\r\n   */\r\n  readFeatureFromObject(object, options) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {Object} object Object.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @protected\r\n   * @return {Array<FeatureType>} Features.\r\n   */\r\n  readFeaturesFromObject(object, options) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Read a geometry.\r\n   *\r\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\r\n   * @api\r\n   * @override\r\n   */\r\n  readGeometry(source, options) {\r\n    return this.readGeometryFromObject(\r\n      getObject(source),\r\n      this.getReadOptions(source, options),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {Object} object Object.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @protected\r\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\r\n   */\r\n  readGeometryFromObject(object, options) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Read the projection.\r\n   *\r\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\r\n   * @return {import(\"../proj/Projection.js\").default} Projection.\r\n   * @api\r\n   * @override\r\n   */\r\n  readProjection(source) {\r\n    return this.readProjectionFromObject(getObject(source));\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {Object} object Object.\r\n   * @protected\r\n   * @return {import(\"../proj/Projection.js\").default} Projection.\r\n   */\r\n  readProjectionFromObject(object) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Encode a feature as string.\r\n   *\r\n   * @param {import(\"../Feature.js\").default} feature Feature.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {string} Encoded feature.\r\n   * @api\r\n   * @override\r\n   */\r\n  writeFeature(feature, options) {\r\n    return JSON.stringify(this.writeFeatureObject(feature, options));\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {import(\"../Feature.js\").default} feature Feature.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {Object} Object.\r\n   */\r\n  writeFeatureObject(feature, options) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Encode an array of features as string.\r\n   *\r\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {string} Encoded features.\r\n   * @api\r\n   * @override\r\n   */\r\n  writeFeatures(features, options) {\r\n    return JSON.stringify(this.writeFeaturesObject(features, options));\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {Object} Object.\r\n   */\r\n  writeFeaturesObject(features, options) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Encode a geometry as string.\r\n   *\r\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {string} Encoded geometry.\r\n   * @api\r\n   * @override\r\n   */\r\n  writeGeometry(geometry, options) {\r\n    return JSON.stringify(this.writeGeometryObject(geometry, options));\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {Object} Object.\r\n   */\r\n  writeGeometryObject(geometry, options) {\r\n    return abstract();\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Document|Element|Object|string} source Source.\r\n * @return {Object} Object.\r\n */\r\nfunction getObject(source) {\r\n  if (typeof source === 'string') {\r\n    const object = JSON.parse(source);\r\n    return object ? /** @type {Object} */ (object) : null;\r\n  }\r\n  if (source !== null) {\r\n    return source;\r\n  }\r\n  return null;\r\n}\r\n\r\nexport default JSONFeature;\r\n"],
  "mappings": "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",
  "names": ["Feature_default", "geometry", "Feature_default", "Feature_default", "Feature_default", "geometry"]
}
